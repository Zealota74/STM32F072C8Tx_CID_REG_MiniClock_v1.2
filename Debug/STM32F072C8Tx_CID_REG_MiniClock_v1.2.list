
STM32F072C8Tx_CID_REG_MiniClock_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800220c  0800220c  0001220c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002ac  2000002c  08002c50  0002002c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002d8  08002c50  000202d8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001de1c  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004747  00000000  00000000  0003de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00003a41  00000000  00000000  000425b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000710  00000000  00000000  00045ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b98  00000000  00000000  00046708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017620  00000000  00000000  000472a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000122a6  00000000  00000000  0005e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007444e  00000000  00000000  00070b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000e4fb4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000fe8  00000000  00000000  000e5008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021f4 	.word	0x080021f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080021f4 	.word	0x080021f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__ctzsi2>:
 8000220:	4241      	negs	r1, r0
 8000222:	4008      	ands	r0, r1
 8000224:	211c      	movs	r1, #28
 8000226:	2301      	movs	r3, #1
 8000228:	041b      	lsls	r3, r3, #16
 800022a:	4298      	cmp	r0, r3
 800022c:	d301      	bcc.n	8000232 <__ctzsi2+0x12>
 800022e:	0c00      	lsrs	r0, r0, #16
 8000230:	3910      	subs	r1, #16
 8000232:	0a1b      	lsrs	r3, r3, #8
 8000234:	4298      	cmp	r0, r3
 8000236:	d301      	bcc.n	800023c <__ctzsi2+0x1c>
 8000238:	0a00      	lsrs	r0, r0, #8
 800023a:	3908      	subs	r1, #8
 800023c:	091b      	lsrs	r3, r3, #4
 800023e:	4298      	cmp	r0, r3
 8000240:	d301      	bcc.n	8000246 <__ctzsi2+0x26>
 8000242:	0900      	lsrs	r0, r0, #4
 8000244:	3904      	subs	r1, #4
 8000246:	a202      	add	r2, pc, #8	; (adr r2, 8000250 <__ctzsi2+0x30>)
 8000248:	5c10      	ldrb	r0, [r2, r0]
 800024a:	1a40      	subs	r0, r0, r1
 800024c:	4770      	bx	lr
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	1d1d1c1b 	.word	0x1d1d1c1b
 8000254:	1e1e1e1e 	.word	0x1e1e1e1e
 8000258:	1f1f1f1f 	.word	0x1f1f1f1f
 800025c:	1f1f1f1f 	.word	0x1f1f1f1f

08000260 <main>:
				;
	NVIC_EnableIRQ( TIM2_IRQn );
}
/*******************************************************************************/

int main(void) {
 8000260:	b510      	push	{r4, lr}
	SystemClock_Config();
 8000262:	f001 fd33 	bl	8001ccc <SystemClock_Config>

	nvic_priority();
 8000266:	f001 fe65 	bl	8001f34 <nvic_priority>

/********************************** Hardware layer *****************************************/
	RCC_gpio_init();
 800026a:	f000 f941 	bl	80004f0 <RCC_gpio_init>
	sw_led_debug_init();
 800026e:	f000 f95f 	bl	8000530 <sw_led_debug_init>

	sw_keyboard_init();
 8000272:	f001 fa25 	bl	80016c0 <sw_keyboard_init>
//	sw_ir_init();

	HT1632C_init();
 8000276:	f000 fa05 	bl	8000684 <HT1632C_init>
	clock_init( FALSE );
 800027a:	2000      	movs	r0, #0
 800027c:	f001 fce8 	bl	8001c50 <clock_init>

/*******************************************************************************************/
//	gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
//	gpio_pin_LO( DEBUG_PORT0, DEBUG_PIN0);
/********************************** Hardware abstraction layer ****************************/
	osd_init();
 8000280:	f000 fa7e 	bl	8000780 <osd_init>
	scroll_text_param( (FONT_INFO *)&Arial6pt8FontInfo_var );
 8000284:	4818      	ldr	r0, [pc, #96]	; (80002e8 <main+0x88>)
 8000286:	f000 fb2f 	bl	80008e8 <scroll_text_param>

//	register_irDecoded_event_callback( osd_ir_manage );
	register_scroll_event_callback( scroll_text_display );
 800028a:	4818      	ldr	r0, [pc, #96]	; (80002ec <main+0x8c>)
 800028c:	f000 fa5e 	bl	800074c <register_scroll_event_callback>

	register_datetime_event_callback( rtc_get_date_time );
 8000290:	4817      	ldr	r0, [pc, #92]	; (80002f0 <main+0x90>)
 8000292:	f001 fd03 	bl	8001c9c <register_datetime_event_callback>
	register_osd_event_callback( osd_manage_screens );
 8000296:	4817      	ldr	r0, [pc, #92]	; (80002f4 <main+0x94>)
 8000298:	f000 fad6 	bl	8000848 <register_osd_event_callback>

	SysTick_Config( (uint32_t)SystemCoreClock / 1000 );		// Systick on 1 ms
 800029c:	21fa      	movs	r1, #250	; 0xfa
 800029e:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <main+0x98>)
 80002a0:	0089      	lsls	r1, r1, #2
 80002a2:	6818      	ldr	r0, [r3, #0]
 80002a4:	f7ff ff30 	bl	8000108 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	3801      	subs	r0, #1
 80002ac:	045b      	lsls	r3, r3, #17
 80002ae:	4298      	cmp	r0, r3
 80002b0:	d20d      	bcs.n	80002ce <main+0x6e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b2:	21c0      	movs	r1, #192	; 0xc0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b4:	4a11      	ldr	r2, [pc, #68]	; (80002fc <main+0x9c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b6:	0609      	lsls	r1, r1, #24
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ba:	4811      	ldr	r0, [pc, #68]	; (8000300 <main+0xa0>)
 80002bc:	6a03      	ldr	r3, [r0, #32]
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	0a1b      	lsrs	r3, r3, #8
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c6:	2300      	movs	r3, #0
 80002c8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	3307      	adds	r3, #7
 80002cc:	6013      	str	r3, [r2, #0]
	while (1) {
		SW_OSD_EVENT( 0 );
 80002ce:	2000      	movs	r0, #0
 80002d0:	f000 fac0 	bl	8000854 <SW_OSD_EVENT>
		SW_DATETIME_EVENT();
 80002d4:	f001 fce8 	bl	8001ca8 <SW_DATETIME_EVENT>

//		SW_IR_DECODED_EVENT();

		SW_SCROLL_EVENT( (uint16_t *)&softTimer1, TRUE );
 80002d8:	2101      	movs	r1, #1
 80002da:	480a      	ldr	r0, [pc, #40]	; (8000304 <main+0xa4>)
 80002dc:	f000 fa3c 	bl	8000758 <SW_SCROLL_EVENT>

		if (softTimer2 == 0) {
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <main+0xa8>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
	while (1) {
 80002e4:	e7f3      	b.n	80002ce <main+0x6e>
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	0800275c 	.word	0x0800275c
 80002ec:	080008fd 	.word	0x080008fd
 80002f0:	08001c85 	.word	0x08001c85
 80002f4:	080007e1 	.word	0x080007e1
 80002f8:	20000000 	.word	0x20000000
 80002fc:	e000e010 	.word	0xe000e010
 8000300:	e000ed00 	.word	0xe000ed00
 8000304:	200002d4 	.word	0x200002d4
 8000308:	200002b2 	.word	0x200002b2

0800030c <TIM2_IRQHandler>:
		}
	}
}
/*******************************************************************************/
void TIM2_IRQHandler( void ) {
	if (TIM2->SR & TIM_SR_UIF ) { 		// Update interrupt Flag
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	691a      	ldr	r2, [r3, #16]
void TIM2_IRQHandler( void ) {
 8000312:	b510      	push	{r4, lr}
	if (TIM2->SR & TIM_SR_UIF ) { 		// Update interrupt Flag
 8000314:	07d2      	lsls	r2, r2, #31
 8000316:	d50a      	bpl.n	800032e <TIM2_IRQHandler+0x22>
		TIM2->SR = ~TIM_SR_UIF;
 8000318:	2202      	movs	r2, #2
 800031a:	4252      	negs	r2, r2

		gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
 800031c:	2140      	movs	r1, #64	; 0x40
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <TIM2_IRQHandler+0x24>)
		TIM2->SR = ~TIM_SR_UIF;
 8000320:	611a      	str	r2, [r3, #16]
		gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
 8000322:	f000 f882 	bl	800042a <gpio_pin_HI>
		gpio_pin_LO( DEBUG_PORT0, DEBUG_PIN0);
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	4801      	ldr	r0, [pc, #4]	; (8000330 <TIM2_IRQHandler+0x24>)
 800032a:	f000 f86f 	bl	800040c <gpio_pin_LO>
	}
}
 800032e:	bd10      	pop	{r4, pc}
 8000330:	48000400 	.word	0x48000400

08000334 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000334:	4770      	bx	lr

08000336 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler>

08000338 <SVC_Handler>:
 8000338:	4770      	bx	lr

0800033a <PendSV_Handler>:
 800033a:	4770      	bx	lr

0800033c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800033c:	2101      	movs	r1, #1
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000348:	685a      	ldr	r2, [r3, #4]
 800034a:	4002      	ands	r2, r0
 800034c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	480e      	ldr	r0, [pc, #56]	; (800038c <SystemInit+0x50>)
 8000352:	4002      	ands	r2, r0
 8000354:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <SystemInit+0x54>)
 800035a:	4002      	ands	r2, r0
 800035c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <SystemInit+0x58>)
 8000362:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000364:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000366:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800036a:	4382      	bics	r2, r0
 800036c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800036e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <SystemInit+0x5c>)
 8000372:	4002      	ands	r2, r0
 8000374:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000378:	438a      	bics	r2, r1
 800037a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]

}
 8000380:	4770      	bx	lr
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	40021000 	.word	0x40021000
 8000388:	08ffb80c 	.word	0x08ffb80c
 800038c:	fef6ffff 	.word	0xfef6ffff
 8000390:	fffbffff 	.word	0xfffbffff
 8000394:	ffc0ffff 	.word	0xffc0ffff
 8000398:	fffcfe2c 	.word	0xfffcfe2c

0800039c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800039c:	220c      	movs	r2, #12
{
 800039e:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003a0:	4d15      	ldr	r5, [pc, #84]	; (80003f8 <SystemCoreClockUpdate+0x5c>)
 80003a2:	4e16      	ldr	r6, [pc, #88]	; (80003fc <SystemCoreClockUpdate+0x60>)
 80003a4:	686b      	ldr	r3, [r5, #4]
 80003a6:	4013      	ands	r3, r2

  switch (tmp)
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	d00a      	beq.n	80003c2 <SystemCoreClockUpdate+0x26>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <SystemCoreClockUpdate+0x64>)
 80003ae:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003b0:	686b      	ldr	r3, [r5, #4]
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <SystemCoreClockUpdate+0x68>)
 80003b4:	061b      	lsls	r3, r3, #24
 80003b6:	0f1b      	lsrs	r3, r3, #28
 80003b8:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80003ba:	6832      	ldr	r2, [r6, #0]
 80003bc:	40da      	lsrs	r2, r3
 80003be:	6032      	str	r2, [r6, #0]
}
 80003c0:	bd70      	pop	{r4, r5, r6, pc}
      pllmull = ( pllmull >> 18) + 2;
 80003c2:	200f      	movs	r0, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80003c4:	686c      	ldr	r4, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003c6:	686b      	ldr	r3, [r5, #4]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80003c8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003ca:	22c0      	movs	r2, #192	; 0xc0
      pllmull = ( pllmull >> 18) + 2;
 80003cc:	0ca4      	lsrs	r4, r4, #18
 80003ce:	4004      	ands	r4, r0
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80003d0:	4001      	ands	r1, r0
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80003d2:	2080      	movs	r0, #128	; 0x80
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003d4:	0252      	lsls	r2, r2, #9
 80003d6:	4013      	ands	r3, r2
      pllmull = ( pllmull >> 18) + 2;
 80003d8:	3402      	adds	r4, #2
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80003da:	3101      	adds	r1, #1
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80003dc:	0240      	lsls	r0, r0, #9
 80003de:	4283      	cmp	r3, r0
 80003e0:	d101      	bne.n	80003e6 <SystemCoreClockUpdate+0x4a>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80003e2:	4807      	ldr	r0, [pc, #28]	; (8000400 <SystemCoreClockUpdate+0x64>)
 80003e4:	e002      	b.n	80003ec <SystemCoreClockUpdate+0x50>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d1fb      	bne.n	80003e2 <SystemCoreClockUpdate+0x46>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <SystemCoreClockUpdate+0x6c>)
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80003ec:	f7ff fe8c 	bl	8000108 <__udivsi3>
 80003f0:	4344      	muls	r4, r0
 80003f2:	6034      	str	r4, [r6, #0]
 80003f4:	e7dc      	b.n	80003b0 <SystemCoreClockUpdate+0x14>
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000
 80003fc:	20000000 	.word	0x20000000
 8000400:	007a1200 	.word	0x007a1200
 8000404:	0800220c 	.word	0x0800220c
 8000408:	02dc6c00 	.word	0x02dc6c00

0800040c <gpio_pin_LO>:
#endif
}
#endif

#ifdef BSRR_REG
	OPTIMISE("O0") inline void gpio_pin_LO(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	000a      	movs	r2, r1
 8000416:	1cbb      	adds	r3, r7, #2
 8000418:	801a      	strh	r2, [r3, #0]
		port->BRR = pin;
 800041a:	1cbb      	adds	r3, r7, #2
 800041c:	881a      	ldrh	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}

0800042a <gpio_pin_HI>:
	OPTIMISE("O0") inline void gpio_pin_HI(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	000a      	movs	r2, r1
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	801a      	strh	r2, [r3, #0]
		port->BSRR = pin;
 8000438:	1cbb      	adds	r3, r7, #2
 800043a:	881a      	ldrh	r2, [r3, #0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	619a      	str	r2, [r3, #24]
	}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}

08000448 <gpio_pin_IMPULSES>:
}

void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num ) {
	num = 2*num + 2;
	while ( --num ) {
		if ( num%2 ) {
 8000448:	2301      	movs	r3, #1
	num = 2*num + 2;
 800044a:	3201      	adds	r2, #1
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	b2d2      	uxtb	r2, r2
	while ( --num ) {
 8000452:	3a01      	subs	r2, #1
 8000454:	b2d2      	uxtb	r2, r2
 8000456:	2a00      	cmp	r2, #0
 8000458:	d100      	bne.n	800045c <gpio_pin_IMPULSES+0x14>
			port->BRR = pin;
		} else {
			port->BSRR = pin;
		}
	}
}
 800045a:	4770      	bx	lr
		if ( num%2 ) {
 800045c:	421a      	tst	r2, r3
 800045e:	d001      	beq.n	8000464 <gpio_pin_IMPULSES+0x1c>
			port->BRR = pin;
 8000460:	6281      	str	r1, [r0, #40]	; 0x28
 8000462:	e7f6      	b.n	8000452 <gpio_pin_IMPULSES+0xa>
			port->BSRR = pin;
 8000464:	6181      	str	r1, [r0, #24]
 8000466:	e7f4      	b.n	8000452 <gpio_pin_IMPULSES+0xa>

08000468 <gpio_pin_cfg>:
void gpio_pin_cfg( GPIO_TypeDef * const port, T_GPIO_PIN pin, T_GPIO_MODE mode ) {
 8000468:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800046a:	0004      	movs	r4, r0
 800046c:	0015      	movs	r5, r2
 800046e:	0008      	movs	r0, r1
	if (mode & 0x100u)
 8000470:	05d3      	lsls	r3, r2, #23
 8000472:	d534      	bpl.n	80004de <gpio_pin_cfg+0x76>
		port->OTYPER |= pin;
 8000474:	6863      	ldr	r3, [r4, #4]
 8000476:	430b      	orrs	r3, r1
 8000478:	6063      	str	r3, [r4, #4]
	uint32_t reset_mask = ~(0x03u << pin);
 800047a:	2603      	movs	r6, #3
	pin = __builtin_ctz(pin) * 2;
 800047c:	f7ff fed0 	bl	8000220 <__ctzsi2>
	uint32_t reset_mask = ~(0x03u << pin);
 8000480:	0032      	movs	r2, r6
	pin = __builtin_ctz(pin) * 2;
 8000482:	b283      	uxth	r3, r0
 8000484:	0058      	lsls	r0, r3, #1
	uint32_t reset_mask = ~(0x03u << pin);
 8000486:	b280      	uxth	r0, r0
 8000488:	4082      	lsls	r2, r0
	reg_val = port->MODER;
 800048a:	6821      	ldr	r1, [r4, #0]
	pin = __builtin_ctz(pin) * 2;
 800048c:	9301      	str	r3, [sp, #4]
	reg_val &= reset_mask;
 800048e:	4391      	bics	r1, r2
 8000490:	468c      	mov	ip, r1
	reg_val |= (((mode & 0x600u) >> 9u) << pin);
 8000492:	0a69      	lsrs	r1, r5, #9
 8000494:	4031      	ands	r1, r6
 8000496:	4663      	mov	r3, ip
 8000498:	4081      	lsls	r1, r0
 800049a:	4319      	orrs	r1, r3
	port->MODER = reg_val;
 800049c:	6021      	str	r1, [r4, #0]
	reg_val = port->PUPDR;
 800049e:	68e1      	ldr	r1, [r4, #12]
	reg_val &= reset_mask;
 80004a0:	4391      	bics	r1, r2
 80004a2:	468c      	mov	ip, r1
	reg_val |= (((mode & 0x30u) >> 4u) << pin);
 80004a4:	0929      	lsrs	r1, r5, #4
 80004a6:	4031      	ands	r1, r6
 80004a8:	4663      	mov	r3, ip
 80004aa:	4081      	lsls	r1, r0
 80004ac:	4319      	orrs	r1, r3
	port->PUPDR = reg_val;
 80004ae:	60e1      	str	r1, [r4, #12]
	reg_val = port->OSPEEDR;
 80004b0:	68a1      	ldr	r1, [r4, #8]
	pin *= 2;
 80004b2:	9b01      	ldr	r3, [sp, #4]
	reg_val &= reset_mask;
 80004b4:	4391      	bics	r1, r2
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 80004b6:	09aa      	lsrs	r2, r5, #6
 80004b8:	4032      	ands	r2, r6
 80004ba:	4082      	lsls	r2, r0
	pin *= 2;
 80004bc:	009b      	lsls	r3, r3, #2
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 80004be:	430a      	orrs	r2, r1
	pin *= 2;
 80004c0:	b29b      	uxth	r3, r3
	port->OSPEEDR = reg_val;
 80004c2:	60a2      	str	r2, [r4, #8]
	if (pin > 28) {
 80004c4:	2b1c      	cmp	r3, #28
 80004c6:	d80e      	bhi.n	80004e6 <gpio_pin_cfg+0x7e>
	reg_adr = &port->AFR[0];
 80004c8:	3420      	adds	r4, #32
	reg_val &= ~(0x0fu << pin);
 80004ca:	220f      	movs	r2, #15
 80004cc:	0010      	movs	r0, r2
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80004ce:	4015      	ands	r5, r2
	reg_val &= ~(0x0fu << pin);
 80004d0:	4098      	lsls	r0, r3
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80004d2:	409d      	lsls	r5, r3
	reg_val = *reg_adr;
 80004d4:	6821      	ldr	r1, [r4, #0]
	reg_val &= ~(0x0fu << pin);
 80004d6:	4381      	bics	r1, r0
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80004d8:	430d      	orrs	r5, r1
	*reg_adr = reg_val;
 80004da:	6025      	str	r5, [r4, #0]
}
 80004dc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		port->OTYPER &= (uint32_t) ~pin;
 80004de:	6863      	ldr	r3, [r4, #4]
 80004e0:	438b      	bics	r3, r1
 80004e2:	6063      	str	r3, [r4, #4]
 80004e4:	e7c9      	b.n	800047a <gpio_pin_cfg+0x12>
		pin -= 32;
 80004e6:	3b20      	subs	r3, #32
 80004e8:	b29b      	uxth	r3, r3
		reg_adr = &port->AFR[1];
 80004ea:	3424      	adds	r4, #36	; 0x24
 80004ec:	e7ed      	b.n	80004ca <gpio_pin_cfg+0x62>
	...

080004f0 <RCC_gpio_init>:
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <RCC_gpio_init+0x24>)
 80004f4:	0292      	lsls	r2, r2, #10
 80004f6:	6959      	ldr	r1, [r3, #20]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	6959      	ldr	r1, [r3, #20]
 8000500:	02d2      	lsls	r2, r2, #11
 8000502:	430a      	orrs	r2, r1
 8000504:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	6959      	ldr	r1, [r3, #20]
 800050a:	0312      	lsls	r2, r2, #12
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
}
 8000510:	4770      	bx	lr
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <sw_led_off>:

volatile uint32_t ledEventFlag = 0;


#ifdef BSRR_REG
OPTIMISE("O0") void sw_led_off( void ) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	LED1_PORT->BSRR = LED1_PIN;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <sw_led_off+0x14>)
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	0192      	lsls	r2, r2, #6
 8000522:	619a      	str	r2, [r3, #24]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	48000800 	.word	0x48000800

08000530 <sw_led_debug_init>:

OPTIMISE("O0") void sw_led_blink( void ) {
	sw_led_xor( LED1_PORT, LED1_PIN );
}

void sw_led_debug_init( void ) {
 8000530:	b570      	push	{r4, r5, r6, lr}

	sw_led_off( LED2_PORT, LED2_PIN_BLUE );
	sw_led_off( LED2_PORT, LED2_PIN_RED );
	sw_led_off( LED2_PORT, LED2_PIN_GREEN );
#else
	gpio_pin_cfg( LED1_PORT, LED1_PIN, 	gpio_mode_output_OD_LS );
 8000532:	22c0      	movs	r2, #192	; 0xc0
 8000534:	2180      	movs	r1, #128	; 0x80
	sw_led_off();
#endif

#ifdef	DEBUG_PIN0
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 8000536:	25b0      	movs	r5, #176	; 0xb0
 8000538:	4c0c      	ldr	r4, [pc, #48]	; (800056c <sw_led_debug_init+0x3c>)
 800053a:	00ad      	lsls	r5, r5, #2
	gpio_pin_cfg( LED1_PORT, LED1_PIN, 	gpio_mode_output_OD_LS );
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <sw_led_debug_init+0x40>)
 800053e:	0092      	lsls	r2, r2, #2
 8000540:	0189      	lsls	r1, r1, #6
 8000542:	f7ff ff91 	bl	8000468 <gpio_pin_cfg>
	sw_led_off();
 8000546:	f7ff ffe7 	bl	8000518 <sw_led_off>
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 800054a:	002a      	movs	r2, r5
 800054c:	0020      	movs	r0, r4
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	f7ff ff8a 	bl	8000468 <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN1
	gpio_pin_cfg( DEBUG_PORT1, DEBUG_PIN1, gpio_mode_output_PP_HS );
 8000554:	002a      	movs	r2, r5
 8000556:	0020      	movs	r0, r4
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	f7ff ff85 	bl	8000468 <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN2
	gpio_pin_cfg( DEBUG_PORT2, DEBUG_PIN2, gpio_mode_output_PP_HS );
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	002a      	movs	r2, r5
 8000562:	0020      	movs	r0, r4
 8000564:	0089      	lsls	r1, r1, #2
 8000566:	f7ff ff7f 	bl	8000468 <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN3
	gpio_pin_cfg( DEBUG_PORT3, DEBUG_PIN3, gpio_mode_output_PP_HS );
#endif
}
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	48000400 	.word	0x48000400
 8000570:	48000800 	.word	0x48000800

08000574 <HT1632C_command>:
};

static const SPI_param_t spi2_ht3216c_Param = { MSBFIRST, CPOL_HIGH, CPHA_LEADING };

/**************************** Basic display function ***************************/
static void HT1632C_command( uint16_t data ) {
 8000574:	b510      	push	{r4, lr}
#if SPI_TRANSFER_MODE == SPI_SW_MODE
	HT1632C_send( &command, ONE_TRANSMIT, 12 );
#elif SPI_TRANSFER_MODE == SPI_HW_MODE
	sw_spi_hw_write_read( data, 12 );
 8000576:	210c      	movs	r1, #12
 8000578:	f001 fc9e 	bl	8001eb8 <sw_spi_hw_write_read>
#endif
}
 800057c:	bd10      	pop	{r4, pc}
	...

08000580 <EXTI4_15_IRQHandler>:


#ifdef HARDWARE_SYNC
/*******************************************************************************/
void EXTI4_15_IRQHandler(void) {
	if (EXTI->PR & EXTI_PR_PR8) {
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	4b38      	ldr	r3, [pc, #224]	; (8000664 <EXTI4_15_IRQHandler+0xe4>)
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	6959      	ldr	r1, [r3, #20]
void EXTI4_15_IRQHandler(void) {
 8000588:	b570      	push	{r4, r5, r6, lr}
	if (EXTI->PR & EXTI_PR_PR8) {
 800058a:	4211      	tst	r1, r2
 800058c:	d051      	beq.n	8000632 <EXTI4_15_IRQHandler+0xb2>
		EXTI->PR = EXTI_PR_PR8;		// This bit is cleared by writing a 1 to the bit.

		volatile static uint8_t cnt;
		cnt++;
 800058e:	4c36      	ldr	r4, [pc, #216]	; (8000668 <EXTI4_15_IRQHandler+0xe8>)
		EXTI->PR = EXTI_PR_PR8;		// This bit is cleared by writing a 1 to the bit.
 8000590:	615a      	str	r2, [r3, #20]
		cnt++;
 8000592:	7823      	ldrb	r3, [r4, #0]
	if( bright == DYNAMIC_BRIGHT ) {
 8000594:	4935      	ldr	r1, [pc, #212]	; (800066c <EXTI4_15_IRQHandler+0xec>)
		cnt++;
 8000596:	3301      	adds	r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	7023      	strb	r3, [r4, #0]

		HT1632C_dyna_bright( cnt%2 );
 800059c:	7823      	ldrb	r3, [r4, #0]
	if( bright == DYNAMIC_BRIGHT ) {
 800059e:	7808      	ldrb	r0, [r1, #0]
		HT1632C_dyna_bright( cnt%2 );
 80005a0:	3aff      	subs	r2, #255	; 0xff
 80005a2:	4013      	ands	r3, r2
	if( bright == DYNAMIC_BRIGHT ) {
 80005a4:	2809      	cmp	r0, #9
 80005a6:	d14c      	bne.n	8000642 <EXTI4_15_IRQHandler+0xc2>
		if ( dynaBright )	brightness = gammaBright[ 7 ];
 80005a8:	3006      	adds	r0, #6
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d114      	bne.n	80005d8 <EXTI4_15_IRQHandler+0x58>
	if ( i++%2 == 0 ) {
 80005ae:	4930      	ldr	r1, [pc, #192]	; (8000670 <EXTI4_15_IRQHandler+0xf0>)
 80005b0:	780b      	ldrb	r3, [r1, #0]
 80005b2:	1898      	adds	r0, r3, r2
 80005b4:	7008      	strb	r0, [r1, #0]
 80005b6:	492f      	ldr	r1, [pc, #188]	; (8000674 <EXTI4_15_IRQHandler+0xf4>)
 80005b8:	4213      	tst	r3, r2
 80005ba:	d10c      	bne.n	80005d6 <EXTI4_15_IRQHandler+0x56>
		if (dir == 1) {
 80005bc:	2500      	movs	r5, #0
 80005be:	482e      	ldr	r0, [pc, #184]	; (8000678 <EXTI4_15_IRQHandler+0xf8>)
 80005c0:	780b      	ldrb	r3, [r1, #0]
 80005c2:	5745      	ldrsb	r5, [r0, r5]
 80005c4:	4295      	cmp	r5, r2
 80005c6:	d135      	bne.n	8000634 <EXTI4_15_IRQHandler+0xb4>
			bright++;
 80005c8:	189b      	adds	r3, r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	700b      	strb	r3, [r1, #0]
			if ( bright == HT1632C_BRIGHT_MAX ) dir =-1;	// DOWN
 80005ce:	2b0f      	cmp	r3, #15
 80005d0:	d101      	bne.n	80005d6 <EXTI4_15_IRQHandler+0x56>
 80005d2:	33f0      	adds	r3, #240	; 0xf0
 80005d4:	7003      	strb	r3, [r0, #0]
	return bright;
 80005d6:	7808      	ldrb	r0, [r1, #0]
	HT1632C_command( HT1632C_SET_BRIGHT + ((brightness & 15) << 1) );
 80005d8:	231e      	movs	r3, #30
 80005da:	0040      	lsls	r0, r0, #1
 80005dc:	4018      	ands	r0, r3
 80005de:	2394      	movs	r3, #148	; 0x94
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	f7ff ffc6 	bl	8000574 <HT1632C_command>
	HT_CS_LO;
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	2090      	movs	r0, #144	; 0x90
		HT1632C_write_buff ( cnt%2 );
 80005ec:	7825      	ldrb	r5, [r4, #0]
	HT_CS_LO;
 80005ee:	0089      	lsls	r1, r1, #2
 80005f0:	05c0      	lsls	r0, r0, #23
 80005f2:	f7ff ff0b 	bl	800040c <gpio_pin_LO>
		HT1632C_write_buff ( cnt%2 );
 80005f6:	b2ed      	uxtb	r5, r5
	command = HT1632C_WRITE;
 80005f8:	23a0      	movs	r3, #160	; 0xa0
		HT1632C_write_buff ( cnt%2 );
 80005fa:	2401      	movs	r4, #1
	if ( chooseBuffer == 0 ) {
 80005fc:	002e      	movs	r6, r5
	command = HT1632C_WRITE;
 80005fe:	481f      	ldr	r0, [pc, #124]	; (800067c <EXTI4_15_IRQHandler+0xfc>)
 8000600:	009b      	lsls	r3, r3, #2
	sw_spi_hw_send_buff16( &command, ONE_TRANSMIT, 10 );
 8000602:	220a      	movs	r2, #10
 8000604:	2101      	movs	r1, #1
	command = HT1632C_WRITE;
 8000606:	8003      	strh	r3, [r0, #0]
	if ( chooseBuffer == 0 ) {
 8000608:	4026      	ands	r6, r4
	sw_spi_hw_send_buff16( &command, ONE_TRANSMIT, 10 );
 800060a:	f001 fc2d 	bl	8001e68 <sw_spi_hw_send_buff16>
	if ( chooseBuffer == 0 ) {
 800060e:	4225      	tst	r5, r4
 8000610:	d11e      	bne.n	8000650 <EXTI4_15_IRQHandler+0xd0>
		sw_spi_hw_send_buff8( (uint8_t *)fb_get_active_buffer(buffer1), FRAMEBUFFER_ALL, 8 );
 8000612:	0030      	movs	r0, r6
 8000614:	f000 fb78 	bl	8000d08 <fb_get_active_buffer>
 8000618:	2208      	movs	r2, #8
 800061a:	2120      	movs	r1, #32
 800061c:	f001 fbfe 	bl	8001e1c <sw_spi_hw_send_buff8>
		fb_switch_buff(buffer1);
 8000620:	0030      	movs	r0, r6
		fb_switch_buff(buffer2);
 8000622:	f000 fb87 	bl	8000d34 <fb_switch_buff>
	HT_CS_HI;
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	2090      	movs	r0, #144	; 0x90
 800062a:	0089      	lsls	r1, r1, #2
 800062c:	05c0      	lsls	r0, r0, #23
 800062e:	f7ff fefc 	bl	800042a <gpio_pin_HI>
		HT1632C_scroll( 5 );
	}
}
 8000632:	bd70      	pop	{r4, r5, r6, pc}
			bright--;
 8000634:	3b01      	subs	r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	700b      	strb	r3, [r1, #0]
			if ( bright == HT1632C_BRIGHT_MIN ) dir = 1;	// UP
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1cb      	bne.n	80005d6 <EXTI4_15_IRQHandler+0x56>
 800063e:	7002      	strb	r2, [r0, #0]
 8000640:	e7c9      	b.n	80005d6 <EXTI4_15_IRQHandler+0x56>
		else		 		brightness = gammaBright[ 1 ];
 8000642:	0010      	movs	r0, r2
		if ( dynaBright )	brightness = gammaBright[ bright ];
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0c7      	beq.n	80005d8 <EXTI4_15_IRQHandler+0x58>
 8000648:	780b      	ldrb	r3, [r1, #0]
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <EXTI4_15_IRQHandler+0x100>)
 800064c:	5cd0      	ldrb	r0, [r2, r3]
 800064e:	e7c3      	b.n	80005d8 <EXTI4_15_IRQHandler+0x58>
		sw_spi_hw_send_buff8( (uint8_t *)fb_get_active_buffer(buffer2), FRAMEBUFFER_ALL, 8 );
 8000650:	0020      	movs	r0, r4
 8000652:	f000 fb59 	bl	8000d08 <fb_get_active_buffer>
 8000656:	2208      	movs	r2, #8
 8000658:	2120      	movs	r1, #32
 800065a:	f001 fbdf 	bl	8001e1c <sw_spi_hw_send_buff8>
		fb_switch_buff(buffer2);
 800065e:	0020      	movs	r0, r4
 8000660:	e7df      	b.n	8000622 <EXTI4_15_IRQHandler+0xa2>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40010400 	.word	0x40010400
 8000668:	2000004a 	.word	0x2000004a
 800066c:	20000048 	.word	0x20000048
 8000670:	2000004e 	.word	0x2000004e
 8000674:	20000049 	.word	0x20000049
 8000678:	20000004 	.word	0x20000004
 800067c:	2000004c 	.word	0x2000004c
 8000680:	08002934 	.word	0x08002934

08000684 <HT1632C_init>:
	NVIC_EnableIRQ( TIM2_IRQn );
}
/*******************************************************************************/
#endif
/*******************************************************************************/
void HT1632C_init( void ) {					// setting up the display
 8000684:	b570      	push	{r4, r5, r6, lr}
	gpio_pin_cfg( HT_CS_PORT, 	HT_CS_PIN,	 gpio_mode_output_PP_HS);
 8000686:	2590      	movs	r5, #144	; 0x90
 8000688:	22b0      	movs	r2, #176	; 0xb0
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	05ed      	lsls	r5, r5, #23
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	0089      	lsls	r1, r1, #2
 8000692:	0028      	movs	r0, r5
 8000694:	f7ff fee8 	bl	8000468 <gpio_pin_cfg>

#if SPI_TRANSFER_MODE == SPI_SW_MODE
	gpio_pin_cfg( HT_WR_PORT, 	HT_WR_PIN,	 gpio_mode_output_PP_HS);
	gpio_pin_cfg( HT_DATA_PORT, HT_DATA_PIN, gpio_mode_output_PP_HS);
#elif SPI_TRANSFER_MODE == SPI_HW_MODE
	sw_spi_hw_init( &spi2_ht3216c_Param );
 8000698:	4818      	ldr	r0, [pc, #96]	; (80006fc <HT1632C_init+0x78>)
 800069a:	f001 fb5d 	bl	8001d58 <sw_spi_hw_init>
#endif
	HT1632C_command( HT1632C_START_SYS );
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <HT1632C_init+0x7c>)
 80006a0:	f7ff ff68 	bl	8000574 <HT1632C_command>
	HT1632C_command( HT1632C_LED_ON );
 80006a4:	4817      	ldr	r0, [pc, #92]	; (8000704 <HT1632C_init+0x80>)
 80006a6:	f7ff ff65 	bl	8000574 <HT1632C_command>
	HT1632C_command( HT1632C_SET_CLOCK );
 80006aa:	2083      	movs	r0, #131	; 0x83
 80006ac:	0100      	lsls	r0, r0, #4
 80006ae:	f7ff ff61 	bl	8000574 <HT1632C_command>
	HT1632C_command( HT1632C_SET_LEYOUT );
 80006b2:	2084      	movs	r0, #132	; 0x84
 80006b4:	0100      	lsls	r0, r0, #4
 80006b6:	f7ff ff5d 	bl	8000574 <HT1632C_command>
	HT1632C_command( HT1632C_BLINK_OFF );
 80006ba:	2081      	movs	r0, #129	; 0x81
 80006bc:	0100      	lsls	r0, r0, #4
 80006be:	f7ff ff59 	bl	8000574 <HT1632C_command>
	HT1632C_command( HT1632C_SET_BRIGHT + (6 << 1) );
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <HT1632C_init+0x84>)
 80006c4:	f7ff ff56 	bl	8000574 <HT1632C_command>
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 80006c8:	2480      	movs	r4, #128	; 0x80
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006ca:	2301      	movs	r3, #1
 80006cc:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HT1632C_init+0x88>)
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 80006ce:	0064      	lsls	r4, r4, #1
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006d0:	6991      	ldr	r1, [r2, #24]
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 80006d2:	0028      	movs	r0, r5
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006d4:	430b      	orrs	r3, r1
 80006d6:	6193      	str	r3, [r2, #24]
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 80006d8:	0021      	movs	r1, r4
 80006da:	2210      	movs	r2, #16
 80006dc:	f7ff fec4 	bl	8000468 <gpio_pin_cfg>
	SYSCFG->EXTICR[1] 	|= SYSCFG_EXTICR3_EXTI8_PA;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HT1632C_init+0x8c>)
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	60da      	str	r2, [r3, #12]
	EXTI->FTSR 			|= EXTI_FTSR_TR8;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HT1632C_init+0x90>)
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	4322      	orrs	r2, r4
 80006ec:	60da      	str	r2, [r3, #12]
	EXTI->IMR 			|= EXTI_IMR_MR8;			// Interrupt Mask on line 8
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4314      	orrs	r4, r2
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	601c      	str	r4, [r3, #0]
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HT1632C_init+0x94>)
 80006f8:	601a      	str	r2, [r3, #0]
#ifdef HARDWARE_SYNC
	Configure_EXTI();
#else
	sw_tim2_init();
#endif
}
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	0800293c 	.word	0x0800293c
 8000700:	00000802 	.word	0x00000802
 8000704:	00000806 	.word	0x00000806
 8000708:	0000094c 	.word	0x0000094c
 800070c:	40021000 	.word	0x40021000
 8000710:	40010000 	.word	0x40010000
 8000714:	40010400 	.word	0x40010400
 8000718:	e000e100 	.word	0xe000e100

0800071c <HT1632C_brightness>:
void INLINE HT1632C_brightness( uint16_t brightness ) {
 800071c:	b510      	push	{r4, lr}
	bright = brightness;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HT1632C_brightness+0x28>)
 8000720:	b2c0      	uxtb	r0, r0
 8000722:	7018      	strb	r0, [r3, #0]
	if ( bright < AUTO_BRIGHT ) {
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	2a07      	cmp	r2, #7
 8000728:	d80a      	bhi.n	8000740 <HT1632C_brightness+0x24>
		brightness = gammaBright[ bright ];
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HT1632C_brightness+0x2c>)
		HT1632C_command( HT1632C_SET_BRIGHT + ((brightness & 15) << 1) );
 800072e:	5cd0      	ldrb	r0, [r2, r3]
 8000730:	231e      	movs	r3, #30
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	4018      	ands	r0, r3
 8000736:	2394      	movs	r3, #148	; 0x94
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	18c0      	adds	r0, r0, r3
 800073c:	f7ff ff1a 	bl	8000574 <HT1632C_command>
	}
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000048 	.word	0x20000048
 8000748:	08002934 	.word	0x08002934

0800074c <register_scroll_event_callback>:

/******** Funkcje callback'owe i zdarzeniowe *************/
static void ( *scroll_event_callback )( uint8_t );
void register_scroll_event_callback(
		void (*callback)( uint8_t aa ) ) {
	scroll_event_callback = callback;
 800074c:	4b01      	ldr	r3, [pc, #4]	; (8000754 <register_scroll_event_callback+0x8>)
 800074e:	6018      	str	r0, [r3, #0]
}
 8000750:	4770      	bx	lr
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20000050 	.word	0x20000050

08000758 <SW_SCROLL_EVENT>:
/********************************************************/
/**********************************************************************/
void SW_SCROLL_EVENT( uint16_t * softTimer, uint8_t scrollOn ) {
 8000758:	b510      	push	{r4, lr}
	if ( scrollEvent && scrollOn ) {
 800075a:	4c07      	ldr	r4, [pc, #28]	; (8000778 <SW_SCROLL_EVENT+0x20>)
 800075c:	7823      	ldrb	r3, [r4, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d009      	beq.n	8000776 <SW_SCROLL_EVENT+0x1e>
 8000762:	2900      	cmp	r1, #0
 8000764:	d007      	beq.n	8000776 <SW_SCROLL_EVENT+0x1e>
		if ( scroll_event_callback ) {
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <SW_SCROLL_EVENT+0x24>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <SW_SCROLL_EVENT+0x1e>
			scroll_event_callback( 0 );
 800076e:	2000      	movs	r0, #0
 8000770:	4798      	blx	r3
			scrollEvent = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	7023      	strb	r3, [r4, #0]
		}
	}
}
 8000776:	bd10      	pop	{r4, pc}
 8000778:	2000004f 	.word	0x2000004f
 800077c:	20000050 	.word	0x20000050

08000780 <osd_init>:

uint8_t osdDisplayContant = DISPLAY_TIME;

/**********************************************************************/
void osd_init( void ) {
	osd_rtc_fonts_param( (FONT_INFO *)&ArialBoldDigits8FontInfo,	// Default TIME font
 8000780:	2201      	movs	r2, #1
void osd_init( void ) {
 8000782:	b510      	push	{r4, lr}
	osd_rtc_fonts_param( (FONT_INFO *)&ArialBoldDigits8FontInfo,	// Default TIME font
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <osd_init+0x18>)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <osd_init+0x1c>)
 8000788:	f000 fa1e 	bl	8000bc8 <osd_rtc_fonts_param>
						 (FONT_INFO *)&MagicMatrix_3x7_FontInfo,	// Default DATE font
						 WITHOUT_SEC );
	osd_bright_text_param();
 800078c:	f000 f92e 	bl	80009ec <osd_bright_text_param>
	softTimer1 = 0;
 8000790:	2200      	movs	r2, #0
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <osd_init+0x20>)
 8000794:	801a      	strh	r2, [r3, #0]
}
 8000796:	bd10      	pop	{r4, pc}
 8000798:	0800291c 	.word	0x0800291c
 800079c:	08002804 	.word	0x08002804
 80007a0:	200002d4 	.word	0x200002d4

080007a4 <osd_keyboard_manage>:
/**********************************************************************/

/**********************************************************************/
void osd_keyboard_manage( void ) {
 80007a4:	b510      	push	{r4, lr}
	KEY_EVENT_t presType  = keyboard_ptr()->keyEvent;
 80007a6:	f000 ff87 	bl	80016b8 <keyboard_ptr>
 80007aa:	7804      	ldrb	r4, [r0, #0]
	uint8_t 	keyNumber = keyboard_ptr()->keyCoded;
 80007ac:	f000 ff84 	bl	80016b8 <keyboard_ptr>

	if ( presType == SHORT_PRESS ) {
 80007b0:	2c01      	cmp	r4, #1
 80007b2:	d10a      	bne.n	80007ca <osd_keyboard_manage+0x26>
	uint8_t 	keyNumber = keyboard_ptr()->keyCoded;
 80007b4:	7843      	ldrb	r3, [r0, #1]
		switch ( keyNumber ) {
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d008      	beq.n	80007cc <osd_keyboard_manage+0x28>
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d009      	beq.n	80007d2 <osd_keyboard_manage+0x2e>
				osd_bright_display_minus();
				break;
			default:
				break;
		}
		osdDisplayContant = DISPLAY_BRIGHT;
 80007be:	2204      	movs	r2, #4
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <osd_keyboard_manage+0x34>)
 80007c2:	701a      	strb	r2, [r3, #0]
		softTimer5 = 0;						// Break main loop
 80007c4:	2200      	movs	r2, #0
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <osd_keyboard_manage+0x38>)
 80007c8:	801a      	strh	r2, [r3, #0]
	}
}
 80007ca:	bd10      	pop	{r4, pc}
				osd_bright_display_plus();
 80007cc:	f000 f928 	bl	8000a20 <osd_bright_display_plus>
				break;
 80007d0:	e7f5      	b.n	80007be <osd_keyboard_manage+0x1a>
				osd_bright_display_minus();
 80007d2:	f000 f945 	bl	8000a60 <osd_bright_display_minus>
				break;
 80007d6:	e7f2      	b.n	80007be <osd_keyboard_manage+0x1a>
 80007d8:	20000006 	.word	0x20000006
 80007dc:	200002c8 	.word	0x200002c8

080007e0 <osd_manage_screens>:
/**********************************************************************/

/**********************************************************************/
void osd_manage_screens( void ) {
 80007e0:	b570      	push	{r4, r5, r6, lr}
	volatile static uint8_t cnt = 1;
	switch ( osdDisplayContant ) {
 80007e2:	4c16      	ldr	r4, [pc, #88]	; (800083c <osd_manage_screens+0x5c>)
 80007e4:	7825      	ldrb	r5, [r4, #0]
 80007e6:	2d02      	cmp	r5, #2
 80007e8:	d019      	beq.n	800081e <osd_manage_screens+0x3e>
 80007ea:	2d04      	cmp	r5, #4
 80007ec:	d020      	beq.n	8000830 <osd_manage_screens+0x50>
 80007ee:	2d01      	cmp	r5, #1
 80007f0:	d111      	bne.n	8000816 <osd_manage_screens+0x36>
		case DISPLAY_TIME:				// Switch to display time
			if ( cnt % ( 2*8 + 1 ) ) {
 80007f2:	4e13      	ldr	r6, [pc, #76]	; (8000840 <osd_manage_screens+0x60>)
 80007f4:	7833      	ldrb	r3, [r6, #0]
 80007f6:	011a      	lsls	r2, r3, #4
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d90b      	bls.n	8000818 <osd_manage_screens+0x38>
				osd_display_time();
 8000800:	f000 f980 	bl	8000b04 <osd_display_time>
				softTimer5 = 500;
 8000804:	22fa      	movs	r2, #250	; 0xfa
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <osd_manage_screens+0x64>)
 8000808:	0052      	lsls	r2, r2, #1
 800080a:	801a      	strh	r2, [r3, #0]
				osdDisplayContant = DISPLAY_TIME;
 800080c:	7025      	strb	r5, [r4, #0]
			} else {
				osdDisplayContant = DISPLAY_DATE;
			}
			cnt++;
 800080e:	7833      	ldrb	r3, [r6, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	7033      	strb	r3, [r6, #0]
//			osdDisplayContant = DISPLAY_TIME;
//			break;
		default:
			break;
	}
}
 8000816:	bd70      	pop	{r4, r5, r6, pc}
				osdDisplayContant = DISPLAY_DATE;
 8000818:	2302      	movs	r3, #2
 800081a:	7023      	strb	r3, [r4, #0]
 800081c:	e7f7      	b.n	800080e <osd_manage_screens+0x2e>
			osd_display_date();
 800081e:	f000 f9ad 	bl	8000b7c <osd_display_date>
			softTimer5 = 4000;
 8000822:	22fa      	movs	r2, #250	; 0xfa
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <osd_manage_screens+0x64>)
 8000826:	0112      	lsls	r2, r2, #4
			softTimer5 = 2000;
 8000828:	801a      	strh	r2, [r3, #0]
			osdDisplayContant = DISPLAY_TIME;
 800082a:	2301      	movs	r3, #1
 800082c:	7023      	strb	r3, [r4, #0]
}
 800082e:	e7f2      	b.n	8000816 <osd_manage_screens+0x36>
			osd_keyboard_manage();
 8000830:	f7ff ffb8 	bl	80007a4 <osd_keyboard_manage>
			softTimer5 = 2000;
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	4b03      	ldr	r3, [pc, #12]	; (8000844 <osd_manage_screens+0x64>)
 8000838:	00d2      	lsls	r2, r2, #3
 800083a:	e7f5      	b.n	8000828 <osd_manage_screens+0x48>
 800083c:	20000006 	.word	0x20000006
 8000840:	20000005 	.word	0x20000005
 8000844:	200002c8 	.word	0x200002c8

08000848 <register_osd_event_callback>:
/**********************************************************************/

/****************** Funkcje callback'owe i zdarzeniowe ****************/
void register_osd_event_callback( void (*callback)( void )) {
	osd_event_callback = callback;
 8000848:	4b01      	ldr	r3, [pc, #4]	; (8000850 <register_osd_event_callback+0x8>)
 800084a:	6018      	str	r0, [r3, #0]
}
 800084c:	4770      	bx	lr
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000054 	.word	0x20000054

08000854 <SW_OSD_EVENT>:
void SW_OSD_EVENT( bool externalEvent ) {
	if ( softTimer5 == 0 ) {
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SW_OSD_EVENT+0x18>)
void SW_OSD_EVENT( bool externalEvent ) {
 8000856:	b510      	push	{r4, lr}
	if ( softTimer5 == 0 ) {
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <SW_OSD_EVENT+0x14>
		if( osd_event_callback ) {
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SW_OSD_EVENT+0x1c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d000      	beq.n	8000868 <SW_OSD_EVENT+0x14>
			osd_event_callback();
 8000866:	4798      	blx	r3
		}
	}
}
 8000868:	bd10      	pop	{r4, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	200002c8 	.word	0x200002c8
 8000870:	20000054 	.word	0x20000054

08000874 <sw_date_to_string>:

/*************************************************************************/
static CHAR	Date[20];

//Format: "20 październik 2018"
CHAR * sw_date_to_string( void ) {
 8000874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	Date[0] = '\0';
 8000876:	2300      	movs	r3, #0
 8000878:	4c16      	ldr	r4, [pc, #88]	; (80008d4 <sw_date_to_string+0x60>)

	char Buffer[13];
	// Add day to string
	itoa( ShowDateTime.day, Buffer, 10 );
 800087a:	4d17      	ldr	r5, [pc, #92]	; (80008d8 <sw_date_to_string+0x64>)
	Date[0] = '\0';
 800087c:	7023      	strb	r3, [r4, #0]
	itoa( ShowDateTime.day, Buffer, 10 );
 800087e:	220a      	movs	r2, #10
 8000880:	4669      	mov	r1, sp
 8000882:	7928      	ldrb	r0, [r5, #4]
 8000884:	f001 fc5e 	bl	8002144 <itoa>
	strcat( Buffer, " " );
 8000888:	4e14      	ldr	r6, [pc, #80]	; (80008dc <sw_date_to_string+0x68>)
 800088a:	4668      	mov	r0, sp
 800088c:	0031      	movs	r1, r6
 800088e:	f001 fc6e 	bl	800216e <strcat>
	// I'm testing pointer to pointer :)
	wchar_t * * ptr = (wchar_t * *)sw_rtc_get_tables( RETURN_MONTHS ) + ShowDateTime.month - 1;
	wcscat( Date, (wchar_t *) *ptr );
	wcscat( Date, L" " );
#else
	strcat( Date, Buffer );
 8000892:	4669      	mov	r1, sp
 8000894:	0020      	movs	r0, r4
 8000896:	f001 fc6a 	bl	800216e <strcat>
	CHAR * * ptr = (CHAR * *)sw_rtc_get_tables( RETURN_MONTHS ) + ShowDateTime.month - 1;
 800089a:	796b      	ldrb	r3, [r5, #5]
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <sw_date_to_string+0x6c>)
	strcat( Date, (CHAR *) *ptr );
 800089e:	0020      	movs	r0, r4
	CHAR * * ptr = (CHAR * *)sw_rtc_get_tables( RETURN_MONTHS ) + ShowDateTime.month - 1;
 80008a0:	189b      	adds	r3, r3, r2
	strcat( Date, (CHAR *) *ptr );
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <sw_date_to_string+0x70>)
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	5899      	ldr	r1, [r3, r2]
 80008a8:	f001 fc61 	bl	800216e <strcat>
	strcat( Date, " " );
 80008ac:	0031      	movs	r1, r6
 80008ae:	0020      	movs	r0, r4
 80008b0:	f001 fc5d 	bl	800216e <strcat>
#endif
	itoa( 2000 + ShowDateTime.year, Buffer, 10 );
 80008b4:	23fa      	movs	r3, #250	; 0xfa
 80008b6:	79a8      	ldrb	r0, [r5, #6]
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	220a      	movs	r2, #10
 80008bc:	4669      	mov	r1, sp
 80008be:	18c0      	adds	r0, r0, r3
 80008c0:	f001 fc40 	bl	8002144 <itoa>

#ifdef UNICODE
	text_char_to_wide( Buffer_w, Buffer );
	wcscat( Date, Buffer_w );						// Add day to string
#else
	strcat( Date, Buffer );
 80008c4:	4669      	mov	r1, sp
 80008c6:	0020      	movs	r0, r4
 80008c8:	f001 fc51 	bl	800216e <strcat>
#endif
	return Date;
}
 80008cc:	0020      	movs	r0, r4
 80008ce:	b004      	add	sp, #16
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000058 	.word	0x20000058
 80008d8:	200002a3 	.word	0x200002a3
 80008dc:	0800293f 	.word	0x0800293f
 80008e0:	3fffffff 	.word	0x3fffffff
 80008e4:	080029e4 	.word	0x080029e4

080008e8 <scroll_text_param>:

/********************************************************************************************/
static T_STRING Text2;

void scroll_text_param( FONT_INFO * font ) {
	graphic_set_string( &Text2, 0, 0, font );
 80008e8:	2200      	movs	r2, #0
void scroll_text_param( FONT_INFO * font ) {
 80008ea:	b510      	push	{r4, lr}
 80008ec:	0003      	movs	r3, r0
	graphic_set_string( &Text2, 0, 0, font );
 80008ee:	0011      	movs	r1, r2
 80008f0:	4801      	ldr	r0, [pc, #4]	; (80008f8 <scroll_text_param+0x10>)
 80008f2:	f000 fabd 	bl	8000e70 <graphic_set_string>
}
 80008f6:	bd10      	pop	{r4, pc}
 80008f8:	2000006c 	.word	0x2000006c

080008fc <scroll_text_display>:

void scroll_text_display( uint8_t Length ) {
 80008fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static int16_t k = 0;
	uint8_t textLength;

	Text2.str = sw_date_to_string();
 80008fe:	f7ff ffb9 	bl	8000874 <sw_date_to_string>
	Text2.x   = k++;
 8000902:	4d13      	ldr	r5, [pc, #76]	; (8000950 <scroll_text_display+0x54>)
	Text2.str = sw_date_to_string();
 8000904:	4e13      	ldr	r6, [pc, #76]	; (8000954 <scroll_text_display+0x58>)
	Text2.x   = k++;
 8000906:	2200      	movs	r2, #0
 8000908:	5eab      	ldrsh	r3, [r5, r2]
	Text2.str = sw_date_to_string();
 800090a:	60f0      	str	r0, [r6, #12]
	Text2.x   = k++;
 800090c:	1c5a      	adds	r2, r3, #1

	T_DISPLAY * NoActiveBuffer = fb_get_noActive_buffer(buffer2);
 800090e:	2001      	movs	r0, #1
	Text2.x   = k++;
 8000910:	802a      	strh	r2, [r5, #0]
 8000912:	8033      	strh	r3, [r6, #0]
	T_DISPLAY * NoActiveBuffer = fb_get_noActive_buffer(buffer2);
 8000914:	f000 f9fe 	bl	8000d14 <fb_get_noActive_buffer>
 8000918:	0004      	movs	r4, r0
	fb_clear_screen( NoActiveBuffer );
 800091a:	f000 fa2b 	bl	8000d74 <fb_clear_screen>
	textLength = graphic_puts_RAM( NoActiveBuffer, &Text2, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <scroll_text_display+0x5c>)
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <scroll_text_display+0x60>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	466b      	mov	r3, sp
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	0031      	movs	r1, r6
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <scroll_text_display+0x64>)
 800092e:	2201      	movs	r2, #1
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	0020      	movs	r0, r4
 8000934:	f000 faa6 	bl	8000e84 <graphic_puts_RAM>
 8000938:	0004      	movs	r4, r0
	fb_buffer_is_ready(buffer2);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fa14 	bl	8000d68 <fb_buffer_is_ready>

	if ( k == SCREEN_WIDTH) {
 8000940:	2200      	movs	r2, #0
 8000942:	5eab      	ldrsh	r3, [r5, r2]
 8000944:	2b20      	cmp	r3, #32
 8000946:	d102      	bne.n	800094e <scroll_text_display+0x52>
		k = -textLength;
 8000948:	b2e4      	uxtb	r4, r4
 800094a:	4264      	negs	r4, r4
 800094c:	802c      	strh	r4, [r5, #0]
	}
}
 800094e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8000950:	20000080 	.word	0x20000080
 8000954:	2000006c 	.word	0x2000006c
 8000958:	080029d4 	.word	0x080029d4
 800095c:	080029d0 	.word	0x080029d0
 8000960:	080029e0 	.word	0x080029e0

08000964 <osd_bright_display_number>:
	Bright1.str = (CHAR *)bright1;
}
/********************************************************************************************/

/********************************************************************************************/
static void osd_bright_display_number( T_DISPLAY * buffer, uint8_t number ) {
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	b087      	sub	sp, #28
	graphic_puts_RAM( buffer, &Bright1, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 8000968:	466b      	mov	r3, sp
 800096a:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <osd_bright_display_number+0x6c>)
 800096c:	4f19      	ldr	r7, [pc, #100]	; (80009d4 <osd_bright_display_number+0x70>)
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	9701      	str	r7, [sp, #4]
 8000972:	9205      	str	r2, [sp, #20]
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <osd_bright_display_number+0x74>)
static void osd_bright_display_number( T_DISPLAY * buffer, uint8_t number ) {
 8000978:	000d      	movs	r5, r1
	graphic_puts_RAM( buffer, &Bright1, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 800097a:	781e      	ldrb	r6, [r3, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	4917      	ldr	r1, [pc, #92]	; (80009dc <osd_bright_display_number+0x78>)
 8000980:	1c33      	adds	r3, r6, #0
static void osd_bright_display_number( T_DISPLAY * buffer, uint8_t number ) {
 8000982:	0004      	movs	r4, r0
	graphic_puts_RAM( buffer, &Bright1, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 8000984:	f000 fa7e 	bl	8000e84 <graphic_puts_RAM>

	if ( number < AUTO_BRIGHT) {
 8000988:	2d07      	cmp	r5, #7
 800098a:	d80d      	bhi.n	80009a8 <osd_bright_display_number+0x44>
		graphic_puts_int_RAM( buffer, &Bright2, number, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 800098c:	9a05      	ldr	r2, [sp, #20]
 800098e:	ab01      	add	r3, sp, #4
 8000990:	9702      	str	r7, [sp, #8]
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	466b      	mov	r3, sp
 8000996:	002a      	movs	r2, r5
 8000998:	701e      	strb	r6, [r3, #0]
 800099a:	0020      	movs	r0, r4
 800099c:	2301      	movs	r3, #1
 800099e:	4910      	ldr	r1, [pc, #64]	; (80009e0 <osd_bright_display_number+0x7c>)
 80009a0:	f000 fbbc 	bl	800111c <graphic_puts_int_RAM>
	} else
	if ( number == DYNAMIC_BRIGHT) {
		Bright2.str = (CHAR *)brightDYN;
		graphic_puts_RAM( buffer, &Bright2, FONTx1, WhiteColor, BlackColor, &GammaRGB );
	}
}
 80009a4:	b007      	add	sp, #28
 80009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ( number == AUTO_BRIGHT) {
 80009a8:	2d08      	cmp	r5, #8
 80009aa:	d10c      	bne.n	80009c6 <osd_bright_display_number+0x62>
		Bright2.str = (CHAR *)brightAU;
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <osd_bright_display_number+0x7c>)
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <osd_bright_display_number+0x80>)
		Bright2.str = (CHAR *)brightDYN;
 80009b0:	60cb      	str	r3, [r1, #12]
		graphic_puts_RAM( buffer, &Bright2, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 80009b2:	466b      	mov	r3, sp
 80009b4:	9a05      	ldr	r2, [sp, #20]
 80009b6:	9701      	str	r7, [sp, #4]
 80009b8:	0020      	movs	r0, r4
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	2201      	movs	r2, #1
 80009be:	1c33      	adds	r3, r6, #0
 80009c0:	f000 fa60 	bl	8000e84 <graphic_puts_RAM>
}
 80009c4:	e7ee      	b.n	80009a4 <osd_bright_display_number+0x40>
	if ( number == DYNAMIC_BRIGHT) {
 80009c6:	2d09      	cmp	r5, #9
 80009c8:	d1ec      	bne.n	80009a4 <osd_bright_display_number+0x40>
		Bright2.str = (CHAR *)brightDYN;
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <osd_bright_display_number+0x7c>)
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <osd_bright_display_number+0x84>)
 80009ce:	e7ef      	b.n	80009b0 <osd_bright_display_number+0x4c>
 80009d0:	08002a14 	.word	0x08002a14
 80009d4:	08002a18 	.word	0x08002a18
 80009d8:	08002a24 	.word	0x08002a24
 80009dc:	20000084 	.word	0x20000084
 80009e0:	20000098 	.word	0x20000098
 80009e4:	08002a2e 	.word	0x08002a2e
 80009e8:	08002a31 	.word	0x08002a31

080009ec <osd_bright_text_param>:
	graphic_set_string( &Bright1,  0, 0, (FONT_INFO *)&Arial6pt8FontInfo_var );
 80009ec:	2200      	movs	r2, #0
void osd_bright_text_param( void ) {
 80009ee:	b570      	push	{r4, r5, r6, lr}
	graphic_set_string( &Bright1,  0, 0, (FONT_INFO *)&Arial6pt8FontInfo_var );
 80009f0:	4d07      	ldr	r5, [pc, #28]	; (8000a10 <osd_bright_text_param+0x24>)
 80009f2:	4c08      	ldr	r4, [pc, #32]	; (8000a14 <osd_bright_text_param+0x28>)
 80009f4:	002b      	movs	r3, r5
 80009f6:	0011      	movs	r1, r2
 80009f8:	0020      	movs	r0, r4
 80009fa:	f000 fa39 	bl	8000e70 <graphic_set_string>
	graphic_set_string( &Bright2, 23, 0, (FONT_INFO *)&Arial6pt8FontInfo_var );
 80009fe:	002b      	movs	r3, r5
 8000a00:	2200      	movs	r2, #0
 8000a02:	2117      	movs	r1, #23
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <osd_bright_text_param+0x2c>)
 8000a06:	f000 fa33 	bl	8000e70 <graphic_set_string>
	Bright1.str = (CHAR *)bright1;
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <osd_bright_text_param+0x30>)
 8000a0c:	60e3      	str	r3, [r4, #12]
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	0800275c 	.word	0x0800275c
 8000a14:	20000084 	.word	0x20000084
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	08002a25 	.word	0x08002a25

08000a20 <osd_bright_display_plus>:

static int8_t bright = 0;
/**********************************************************************/
void osd_bright_display_plus( void ) {
 8000a20:	b570      	push	{r4, r5, r6, lr}
	bright++;
 8000a22:	4c0e      	ldr	r4, [pc, #56]	; (8000a5c <osd_bright_display_plus+0x3c>)
 8000a24:	7823      	ldrb	r3, [r4, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b25b      	sxtb	r3, r3
	if (bright > 9) bright = 9;
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	dc13      	bgt.n	8000a56 <osd_bright_display_plus+0x36>

	HT1632C_brightness( bright );
 8000a2e:	2000      	movs	r0, #0
	if (bright > 9) bright = 9;
 8000a30:	7023      	strb	r3, [r4, #0]
	HT1632C_brightness( bright );
 8000a32:	5620      	ldrsb	r0, [r4, r0]
 8000a34:	b280      	uxth	r0, r0
 8000a36:	f7ff fe71 	bl	800071c <HT1632C_brightness>

	T_DISPLAY * NoActiveBuffer = fb_get_noActive_buffer(buffer1);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f96a 	bl	8000d14 <fb_get_noActive_buffer>
 8000a40:	0005      	movs	r5, r0

	fb_clear_screen	 ( NoActiveBuffer );
 8000a42:	f000 f997 	bl	8000d74 <fb_clear_screen>
	osd_bright_display_number( NoActiveBuffer, bright );
 8000a46:	0028      	movs	r0, r5
 8000a48:	7821      	ldrb	r1, [r4, #0]
 8000a4a:	f7ff ff8b 	bl	8000964 <osd_bright_display_number>
	fb_buffer_is_ready(buffer1);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f98a 	bl	8000d68 <fb_buffer_is_ready>
}
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
	if (bright > 9) bright = 9;
 8000a56:	2309      	movs	r3, #9
 8000a58:	e7e9      	b.n	8000a2e <osd_bright_display_plus+0xe>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	200000ac 	.word	0x200000ac

08000a60 <osd_bright_display_minus>:
void osd_bright_display_minus( void ) {
 8000a60:	b570      	push	{r4, r5, r6, lr}
	bright--;
 8000a62:	4c0e      	ldr	r4, [pc, #56]	; (8000a9c <osd_bright_display_minus+0x3c>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b25a      	sxtb	r2, r3
	if (bright < 0) bright = 0;
 8000a6a:	061b      	lsls	r3, r3, #24
 8000a6c:	d413      	bmi.n	8000a96 <osd_bright_display_minus+0x36>
	bright--;
 8000a6e:	7022      	strb	r2, [r4, #0]

	HT1632C_brightness( bright );
 8000a70:	2000      	movs	r0, #0
 8000a72:	5620      	ldrsb	r0, [r4, r0]
 8000a74:	b280      	uxth	r0, r0
 8000a76:	f7ff fe51 	bl	800071c <HT1632C_brightness>

	T_DISPLAY * NoActiveBuffer = fb_get_noActive_buffer(buffer1);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f94a 	bl	8000d14 <fb_get_noActive_buffer>
 8000a80:	0005      	movs	r5, r0

	fb_clear_screen	 ( NoActiveBuffer );
 8000a82:	f000 f977 	bl	8000d74 <fb_clear_screen>
	osd_bright_display_number( NoActiveBuffer, bright );
 8000a86:	0028      	movs	r0, r5
 8000a88:	7821      	ldrb	r1, [r4, #0]
 8000a8a:	f7ff ff6b 	bl	8000964 <osd_bright_display_number>
	fb_buffer_is_ready(buffer1);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f96a 	bl	8000d68 <fb_buffer_is_ready>
}
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
	if (bright < 0) bright = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	7023      	strb	r3, [r4, #0]
 8000a9a:	e7e9      	b.n	8000a70 <osd_bright_display_minus+0x10>
 8000a9c:	200000ac 	.word	0x200000ac

08000aa0 <osd_rtc_puts_int_RAM.constprop.0>:

static const T_COLOR colorClock = {1};
/********************************************************************************************/

/********************************* Draw the numbers on screen *******************************/
static void osd_rtc_puts_int_RAM( T_DISPLAY * buffer, T_STRING *string, int data,
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
					uint8_t textSize, T_COLOR color, T_COLOR bg, const T_GAMMA * gamma ) {
	char buffer1[16];
	char buffer2[16] = "0";
 8000aa2:	2330      	movs	r3, #48	; 0x30
static void osd_rtc_puts_int_RAM( T_DISPLAY * buffer, T_STRING *string, int data,
 8000aa4:	0015      	movs	r5, r2
 8000aa6:	000c      	movs	r4, r1
 8000aa8:	b08d      	sub	sp, #52	; 0x34
	char buffer2[16] = "0";
 8000aaa:	220c      	movs	r2, #12
 8000aac:	2100      	movs	r1, #0
static void osd_rtc_puts_int_RAM( T_DISPLAY * buffer, T_STRING *string, int data,
 8000aae:	9003      	str	r0, [sp, #12]

	itoa( data, buffer1, 10 );
 8000ab0:	ae04      	add	r6, sp, #16
	char buffer2[16] = "0";
 8000ab2:	a809      	add	r0, sp, #36	; 0x24
 8000ab4:	9308      	str	r3, [sp, #32]
 8000ab6:	f001 fb52 	bl	800215e <memset>
	itoa( data, buffer1, 10 );
 8000aba:	220a      	movs	r2, #10
 8000abc:	0031      	movs	r1, r6
 8000abe:	0028      	movs	r0, r5
 8000ac0:	f001 fb40 	bl	8002144 <itoa>
	char buffer2[16] = "0";
 8000ac4:	af08      	add	r7, sp, #32
	string->str = buffer1;
 8000ac6:	60e6      	str	r6, [r4, #12]

	if ( data > -1 && data < 10 ) {
 8000ac8:	2d09      	cmp	r5, #9
 8000aca:	dc04      	bgt.n	8000ad6 <osd_rtc_puts_int_RAM.constprop.0+0x36>
		strcat( buffer2, buffer1 );
 8000acc:	0031      	movs	r1, r6
 8000ace:	0038      	movs	r0, r7
 8000ad0:	f001 fb4d 	bl	800216e <strcat>
		string->str = buffer2;
 8000ad4:	60e7      	str	r7, [r4, #12]
#ifdef UNICODE
	wchar_t buffer_wchar[16];
	(void)text_char_to_wide( buffer_wchar, str );
	string->str = buffer_wchar;
#endif
	string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <osd_rtc_puts_int_RAM.constprop.0+0x58>)
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <osd_rtc_puts_int_RAM.constprop.0+0x5c>)
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	466b      	mov	r3, sp
 8000ade:	7812      	ldrb	r2, [r2, #0]
 8000ae0:	0021      	movs	r1, r4
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <osd_rtc_puts_int_RAM.constprop.0+0x60>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	9803      	ldr	r0, [sp, #12]
 8000aec:	f000 f9ca 	bl	8000e84 <graphic_puts_RAM>
 8000af0:	8120      	strh	r0, [r4, #8]
}
 8000af2:	b00d      	add	sp, #52	; 0x34
 8000af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	08002a3c 	.word	0x08002a3c
 8000afc:	08002a3b 	.word	0x08002a3b
 8000b00:	08002a48 	.word	0x08002a48

08000b04 <osd_display_time>:
						  colorClock, BlackColor, &GammaRGB );
}
/********************************************************************************************/

/************************************ Public functions **************************************/
void osd_display_time(void) {
 8000b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	T_DISPLAY * nonActiveBuffer = fb_get_noActive_buffer(buffer1);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f904 	bl	8000d14 <fb_get_noActive_buffer>
 8000b0c:	0004      	movs	r4, r0
	T_COLOR delimColor = colorClock;
 8000b0e:	2501      	movs	r5, #1

	fb_clear_screen( nonActiveBuffer );
 8000b10:	f000 f930 	bl	8000d74 <fb_clear_screen>
	osd_rtc_puts_int_RAM( buffer, &TextHH, ShowDateTime.hh, FONTx1,
 8000b14:	4e12      	ldr	r6, [pc, #72]	; (8000b60 <osd_display_time+0x5c>)
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <osd_display_time+0x60>)
 8000b18:	78b2      	ldrb	r2, [r6, #2]
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f7ff ffc0 	bl	8000aa0 <osd_rtc_puts_int_RAM.constprop.0>
		if (cnt++%2) delimColor = colorClock;
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <osd_display_time+0x64>)
	T_COLOR delimColor = colorClock;
 8000b22:	1c2f      	adds	r7, r5, #0
		if (cnt++%2) delimColor = colorClock;
 8000b24:	7813      	ldrb	r3, [r2, #0]
 8000b26:	1959      	adds	r1, r3, r5
 8000b28:	7011      	strb	r1, [r2, #0]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	402a      	ands	r2, r5
 8000b2e:	422b      	tst	r3, r5
 8000b30:	d100      	bne.n	8000b34 <osd_display_time+0x30>
		else 		 delimColor = BlackColor;
 8000b32:	1c17      	adds	r7, r2, #0
	graphic_puts_RAM( buffer, &Delim1, FONTx1, delimColor, BlackColor, &GammaRGB );
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <osd_display_time+0x68>)
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <osd_display_time+0x6c>)
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	466b      	mov	r3, sp
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0020      	movs	r0, r4
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	490c      	ldr	r1, [pc, #48]	; (8000b74 <osd_display_time+0x70>)
 8000b44:	1c3b      	adds	r3, r7, #0
 8000b46:	2201      	movs	r2, #1
 8000b48:	f000 f99c 	bl	8000e84 <graphic_puts_RAM>
	osd_rtc_puts_int_RAM( buffer, &TextMM, ShowDateTime.mm, FONTx1,
 8000b4c:	7872      	ldrb	r2, [r6, #1]
 8000b4e:	0020      	movs	r0, r4
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <osd_display_time+0x74>)
 8000b52:	f7ff ffa5 	bl	8000aa0 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_display_time( nonActiveBuffer, WITHOUT_SEC );
	fb_buffer_is_ready(buffer1);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f906 	bl	8000d68 <fb_buffer_is_ready>
}
 8000b5c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	200002a3 	.word	0x200002a3
 8000b64:	20000100 	.word	0x20000100
 8000b68:	20000164 	.word	0x20000164
 8000b6c:	08002a3c 	.word	0x08002a3c
 8000b70:	08002a3b 	.word	0x08002a3b
 8000b74:	200000b0 	.word	0x200000b0
 8000b78:	20000114 	.word	0x20000114

08000b7c <osd_display_date>:
void osd_display_date(void) {
 8000b7c:	b570      	push	{r4, r5, r6, lr}
	T_DISPLAY * nonActiveBuffer = fb_get_noActive_buffer(buffer1);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f8c8 	bl	8000d14 <fb_get_noActive_buffer>
 8000b84:	0004      	movs	r4, r0

	fb_clear_screen( nonActiveBuffer );
 8000b86:	f000 f8f5 	bl	8000d74 <fb_clear_screen>
	osd_rtc_puts_int_RAM( buffer, &TextYEAR, dateTime->year + 2000,
 8000b8a:	23fa      	movs	r3, #250	; 0xfa
 8000b8c:	4d0a      	ldr	r5, [pc, #40]	; (8000bb8 <osd_display_date+0x3c>)
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	79aa      	ldrb	r2, [r5, #6]
 8000b92:	0020      	movs	r0, r4
 8000b94:	18d2      	adds	r2, r2, r3
 8000b96:	4909      	ldr	r1, [pc, #36]	; (8000bbc <osd_display_date+0x40>)
 8000b98:	f7ff ff82 	bl	8000aa0 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_puts_int_RAM( buffer, &TextMONTH, dateTime->month, FONTx1,
 8000b9c:	796a      	ldrb	r2, [r5, #5]
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <osd_display_date+0x44>)
 8000ba2:	f7ff ff7d 	bl	8000aa0 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_puts_int_RAM( buffer, &TextDAY, dateTime->day, FONTx1,
 8000ba6:	792a      	ldrb	r2, [r5, #4]
 8000ba8:	0020      	movs	r0, r4
 8000baa:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <osd_display_date+0x48>)
 8000bac:	f7ff ff78 	bl	8000aa0 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_display_date( nonActiveBuffer, &ShowDateTime );
	fb_buffer_is_ready(buffer1);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 f8d9 	bl	8000d68 <fb_buffer_is_ready>
}
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	200002a3 	.word	0x200002a3
 8000bbc:	20000150 	.word	0x20000150
 8000bc0:	20000128 	.word	0x20000128
 8000bc4:	200000ec 	.word	0x200000ec

08000bc8 <osd_rtc_fonts_param>:
/********************************************************************************************/

/********************************************************************************************/
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	TextHH.str = "00";
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <osd_rtc_fonts_param+0x10c>)
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000bcc:	000e      	movs	r6, r1
	TextHH.str = "00";
 8000bce:	4942      	ldr	r1, [pc, #264]	; (8000cd8 <osd_rtc_fonts_param+0x110>)
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000bd0:	0005      	movs	r5, r0
	TextHH.str = "00";
 8000bd2:	60cb      	str	r3, [r1, #12]
	TextMM.str = "00";
 8000bd4:	4941      	ldr	r1, [pc, #260]	; (8000cdc <osd_rtc_fonts_param+0x114>)
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000bd6:	b085      	sub	sp, #20
	TextMM.str = "00";
 8000bd8:	60cb      	str	r3, [r1, #12]
	TextSS.str = "00";
 8000bda:	4941      	ldr	r1, [pc, #260]	; (8000ce0 <osd_rtc_fonts_param+0x118>)
 8000bdc:	60cb      	str	r3, [r1, #12]
	Delim1.str = ":";
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <osd_rtc_fonts_param+0x11c>)
 8000be0:	4941      	ldr	r1, [pc, #260]	; (8000ce8 <osd_rtc_fonts_param+0x120>)
 8000be2:	60cb      	str	r3, [r1, #12]
	Delim2.str = ":";
 8000be4:	4941      	ldr	r1, [pc, #260]	; (8000cec <osd_rtc_fonts_param+0x124>)
 8000be6:	60cb      	str	r3, [r1, #12]
	Delim3.str = ";";
 8000be8:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <osd_rtc_fonts_param+0x128>)
 8000bea:	4942      	ldr	r1, [pc, #264]	; (8000cf4 <osd_rtc_fonts_param+0x12c>)
 8000bec:	60d9      	str	r1, [r3, #12]
	if ( hDigit > SCREEN_HEIGHT ) return 0;		// Font height larger screen height
 8000bee:	7803      	ldrb	r3, [r0, #0]
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d854      	bhi.n	8000c9e <osd_rtc_fonts_param+0xd6>
	uint8_t wDigit = digitsFont->charInfo[ '0' - digitsFont->startChar ].widthBits;		// Width of "0" character
 8000bf4:	2330      	movs	r3, #48	; 0x30
	uint8_t wDelim = digitsFont->charInfo[ ':' - digitsFont->startChar ].widthBits;		// Width of ";" character
 8000bf6:	213a      	movs	r1, #58	; 0x3a
	uint8_t wDigit = digitsFont->charInfo[ '0' - digitsFont->startChar ].widthBits;		// Width of "0" character
 8000bf8:	686c      	ldr	r4, [r5, #4]
 8000bfa:	68c0      	ldr	r0, [r0, #12]
 8000bfc:	1b1b      	subs	r3, r3, r4
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	5c1b      	ldrb	r3, [r3, r0]
	uint8_t wDelim = digitsFont->charInfo[ ':' - digitsFont->startChar ].widthBits;		// Width of ";" character
 8000c02:	1b09      	subs	r1, r1, r4
	uint8_t wInter = digitsFont->interspacePixels;
 8000c04:	7a2c      	ldrb	r4, [r5, #8]
	uint8_t wDelim = digitsFont->charInfo[ ':' - digitsFont->startChar ].widthBits;		// Width of ";" character
 8000c06:	0089      	lsls	r1, r1, #2
 8000c08:	5c0f      	ldrb	r7, [r1, r0]
	uint8_t wInter = digitsFont->interspacePixels;
 8000c0a:	1919      	adds	r1, r3, r4
	uint8_t allW = 2 * ( 2*wDigit + wInter ) + 1 *( 2*wInter + wDelim );
 8000c0c:	18e3      	adds	r3, r4, r3
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	0049      	lsls	r1, r1, #1
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	b2c9      	uxtb	r1, r1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	9102      	str	r1, [sp, #8]
 8000c1a:	9301      	str	r3, [sp, #4]
	if ( withSeconds == WITH_SEC ) allW = allW + ( 2*wDigit + wInter ) + ( 2*wInter + wDelim );
 8000c1c:	2a02      	cmp	r2, #2
 8000c1e:	d105      	bne.n	8000c2c <osd_rtc_fonts_param+0x64>
 8000c20:	9a01      	ldr	r2, [sp, #4]
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	18cb      	adds	r3, r1, r3
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	9301      	str	r3, [sp, #4]
	if ( allW > SCREEN_WIDTH ) return SCREEN_TO_SMALL;
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d835      	bhi.n	8000c9e <osd_rtc_fonts_param+0xd6>
			xPos = (W + 1) / 2 - allW / 2;
 8000c32:	0859      	lsrs	r1, r3, #1
 8000c34:	2310      	movs	r3, #16
 8000c36:	1a59      	subs	r1, r3, r1
 8000c38:	b2cb      	uxtb	r3, r1
	graphic_set_string( &TextHH, xPos, yPos, digitsFont );
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4826      	ldr	r0, [pc, #152]	; (8000cd8 <osd_rtc_fonts_param+0x110>)
			xPos = (W + 1) / 2 - allW / 2;
 8000c3e:	9303      	str	r3, [sp, #12]
	graphic_set_string( &TextHH, xPos, yPos, digitsFont );
 8000c40:	b2c9      	uxtb	r1, r1
 8000c42:	002b      	movs	r3, r5
 8000c44:	f000 f914 	bl	8000e70 <graphic_set_string>
	xPos += 2 * (wDigit + wInter);
 8000c48:	9a02      	ldr	r2, [sp, #8]
 8000c4a:	9b03      	ldr	r3, [sp, #12]
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	4463      	add	r3, ip
 8000c50:	0019      	movs	r1, r3
 8000c52:	b2db      	uxtb	r3, r3
	graphic_set_string( &Delim1, xPos, yPos, digitsFont );
 8000c54:	2200      	movs	r2, #0
 8000c56:	4824      	ldr	r0, [pc, #144]	; (8000ce8 <osd_rtc_fonts_param+0x120>)
	xPos += 2 * (wDigit + wInter);
 8000c58:	9303      	str	r3, [sp, #12]
	graphic_set_string( &Delim1, xPos, yPos, digitsFont );
 8000c5a:	b2c9      	uxtb	r1, r1
 8000c5c:	002b      	movs	r3, r5
 8000c5e:	f000 f907 	bl	8000e70 <graphic_set_string>
	xPos += wDelim + wInter;
 8000c62:	193c      	adds	r4, r7, r4
 8000c64:	9b03      	ldr	r3, [sp, #12]
 8000c66:	b2e4      	uxtb	r4, r4
 8000c68:	1919      	adds	r1, r3, r4
 8000c6a:	b2cf      	uxtb	r7, r1
	graphic_set_string( &TextMM, xPos, yPos, digitsFont );
 8000c6c:	002b      	movs	r3, r5
 8000c6e:	2200      	movs	r2, #0
 8000c70:	481a      	ldr	r0, [pc, #104]	; (8000cdc <osd_rtc_fonts_param+0x114>)
 8000c72:	b2c9      	uxtb	r1, r1
 8000c74:	f000 f8fc 	bl	8000e70 <graphic_set_string>
	xPos += 2 * (wDigit + wInter);
 8000c78:	9b02      	ldr	r3, [sp, #8]
	graphic_set_string( &Delim2, xPos, yPos, digitsFont );
 8000c7a:	2200      	movs	r2, #0
	xPos += 2 * (wDigit + wInter);
 8000c7c:	19d9      	adds	r1, r3, r7
 8000c7e:	b2cf      	uxtb	r7, r1
	graphic_set_string( &Delim2, xPos, yPos, digitsFont );
 8000c80:	002b      	movs	r3, r5
 8000c82:	481a      	ldr	r0, [pc, #104]	; (8000cec <osd_rtc_fonts_param+0x124>)
 8000c84:	b2c9      	uxtb	r1, r1
	xPos += wDelim + wInter;
 8000c86:	19e4      	adds	r4, r4, r7
	graphic_set_string( &Delim2, xPos, yPos, digitsFont );
 8000c88:	f000 f8f2 	bl	8000e70 <graphic_set_string>
	graphic_set_string( &TextSS, xPos, yPos, digitsFont );
 8000c8c:	002b      	movs	r3, r5
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <osd_rtc_fonts_param+0x118>)
 8000c92:	b2e1      	uxtb	r1, r4
 8000c94:	f000 f8ec 	bl	8000e70 <graphic_set_string>
	osd_rtc_string_init();

	uint8_t check;
	check = osd_rtc_time_params( timeFont, ALIGN_CTOP, 0, displaySeconds );

	if ( check == SCREEN_TO_SMALL )	while(1) {}
 8000c98:	9b01      	ldr	r3, [sp, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d100      	bne.n	8000ca0 <osd_rtc_fonts_param+0xd8>
 8000c9e:	e7fe      	b.n	8000c9e <osd_rtc_fonts_param+0xd6>
	graphic_set_string( &TextYEAR, 	0, 0, (FONT_INFO *)&MagicMatrix_3x5_FontInfo );
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <osd_rtc_fonts_param+0x130>)
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	4815      	ldr	r0, [pc, #84]	; (8000cfc <osd_rtc_fonts_param+0x134>)
 8000ca8:	f000 f8e2 	bl	8000e70 <graphic_set_string>
	graphic_set_string( &TextMONTH, 16, 1, digitsFont );
 8000cac:	0033      	movs	r3, r6
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <osd_rtc_fonts_param+0x138>)
 8000cb4:	f000 f8dc 	bl	8000e70 <graphic_set_string>
	graphic_set_string( &TextDAY, 	25, 0, digitsFont );
 8000cb8:	0033      	movs	r3, r6
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2119      	movs	r1, #25
 8000cbe:	4811      	ldr	r0, [pc, #68]	; (8000d04 <osd_rtc_fonts_param+0x13c>)
 8000cc0:	f000 f8d6 	bl	8000e70 <graphic_set_string>
	graphic_set_string( &Delim3, 	23, 1, digitsFont );
 8000cc4:	0033      	movs	r3, r6
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2117      	movs	r1, #23
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <osd_rtc_fonts_param+0x128>)
 8000ccc:	f000 f8d0 	bl	8000e70 <graphic_set_string>
	check = osd_rtc_date_params( dateFont, ALIGN_LTOP, 0 );
}
 8000cd0:	b005      	add	sp, #20
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd4:	08002a34 	.word	0x08002a34
 8000cd8:	20000100 	.word	0x20000100
 8000cdc:	20000114 	.word	0x20000114
 8000ce0:	2000013c 	.word	0x2000013c
 8000ce4:	08002a37 	.word	0x08002a37
 8000ce8:	200000b0 	.word	0x200000b0
 8000cec:	200000c4 	.word	0x200000c4
 8000cf0:	200000d8 	.word	0x200000d8
 8000cf4:	08002a39 	.word	0x08002a39
 8000cf8:	08002880 	.word	0x08002880
 8000cfc:	20000150 	.word	0x20000150
 8000d00:	20000128 	.word	0x20000128
 8000d04:	200000ec 	.word	0x200000ec

08000d08 <fb_get_active_buffer>:
const T_DISPLAY * Buffer[] 		= { Buffer1, 		Buffer2 };
const T_DISPLAY * Buffer_Back[]	= { Buffer1_Back,	Buffer2_Back };
	  T_DISPLAY * ActualBuffer[]= { Buffer1,		Buffer2 };

T_DISPLAY* fb_get_active_buffer( uint8_t buffNum ) {
	return ActualBuffer[buffNum];
 8000d08:	4b01      	ldr	r3, [pc, #4]	; (8000d10 <fb_get_active_buffer+0x8>)
 8000d0a:	0080      	lsls	r0, r0, #2
 8000d0c:	58c0      	ldr	r0, [r0, r3]
}
 8000d0e:	4770      	bx	lr
 8000d10:	20000008 	.word	0x20000008

08000d14 <fb_get_noActive_buffer>:
T_DISPLAY* fb_get_active_buffer1( uint8_t buffNum ) {
	return FrameBuffers[buffNum].buff;
}
T_DISPLAY * fb_get_noActive_buffer( uint8_t buffNum ) {
	if ( ActualBuffer[ buffNum ] == Buffer[ buffNum ] ) {
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <fb_get_noActive_buffer+0x14>)
 8000d16:	0083      	lsls	r3, r0, #2
 8000d18:	5898      	ldr	r0, [r3, r2]
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <fb_get_noActive_buffer+0x18>)
 8000d1c:	589a      	ldr	r2, [r3, r2]
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	d101      	bne.n	8000d26 <fb_get_noActive_buffer+0x12>
		return (T_DISPLAY *)Buffer_Back[ buffNum ];
 8000d22:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <fb_get_noActive_buffer+0x1c>)
 8000d24:	5898      	ldr	r0, [r3, r2]
	} else {
		return (T_DISPLAY *)Buffer[ buffNum ];
	}
}
 8000d26:	4770      	bx	lr
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000018 	.word	0x20000018

08000d34 <fb_switch_buff>:

void fb_switch_buff( uint8_t buffNum ) {
	if ( SyncFlags[ buffNum ] ) {
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <fb_switch_buff+0x24>)
 8000d36:	5c1a      	ldrb	r2, [r3, r0]
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d00b      	beq.n	8000d54 <fb_switch_buff+0x20>
		SyncFlags[ buffNum ] = SYNC_FLAG_CLR;
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	541a      	strb	r2, [r3, r0]
	} else {
		return;
	}
	if (ActualBuffer[ buffNum ] == Buffer[ buffNum ]) {
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <fb_switch_buff+0x28>)
 8000d42:	0080      	lsls	r0, r0, #2
 8000d44:	58c2      	ldr	r2, [r0, r3]
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <fb_switch_buff+0x2c>)
 8000d48:	58c1      	ldr	r1, [r0, r3]
 8000d4a:	4291      	cmp	r1, r2
 8000d4c:	d101      	bne.n	8000d52 <fb_switch_buff+0x1e>
		ActualBuffer[ buffNum ] = (T_DISPLAY *)Buffer_Back[ buffNum ];
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <fb_switch_buff+0x30>)
 8000d50:	5882      	ldr	r2, [r0, r2]
	} else {
		ActualBuffer[ buffNum ] = (T_DISPLAY *)Buffer[ buffNum ];
 8000d52:	50c2      	str	r2, [r0, r3]
	}
}
 8000d54:	4770      	bx	lr
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	200001e5 	.word	0x200001e5
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000018 	.word	0x20000018

08000d68 <fb_buffer_is_ready>:

void fb_buffer_is_ready(uint8_t buffNum) {
	SyncFlags[ buffNum ] = SYNC_FLAG_SET;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <fb_buffer_is_ready+0x8>)
 8000d6c:	541a      	strb	r2, [r3, r0]
}
 8000d6e:	4770      	bx	lr
 8000d70:	200001e5 	.word	0x200001e5

08000d74 <fb_clear_screen>:
//		syncFlag2 = buff; //while(syncFlag) {}
//	}
//	return syncOld;
//}

void fb_clear_screen( T_DISPLAY * buffer ) {
 8000d74:	b510      	push	{r4, lr}
	memset( (void *)buffer, 0x00, ( FRAMEBUFFER_ALL ) );
 8000d76:	2220      	movs	r2, #32
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f001 f9f0 	bl	800215e <memset>
}
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <fb_set_pixel_RAM>:

#define REVERSE		1
void fb_set_pixel_RAM( volatile T_DISPLAY * buffer, int16_t x, int16_t y, const T_COLOR color ) {
 8000d80:	b530      	push	{r4, r5, lr}
/***************************** Base routine, set - clear pixel ***************************/
	if ( x < 0 || x > (SCREEN_WIDTH  - 1) ||
 8000d82:	b28c      	uxth	r4, r1
 8000d84:	2c1f      	cmp	r4, #31
 8000d86:	d814      	bhi.n	8000db2 <fb_set_pixel_RAM+0x32>
		 y < 0 || y > (SCREEN_HEIGHT - 1)	) return;
 8000d88:	b294      	uxth	r4, r2
 8000d8a:	2c07      	cmp	r4, #7
 8000d8c:	d811      	bhi.n	8000db2 <fb_set_pixel_RAM+0x32>

	if( REVERSE ) {
		if ( color.mono ) {
 8000d8e:	2507      	movs	r5, #7
 8000d90:	10cc      	asrs	r4, r1, #3
 8000d92:	00e4      	lsls	r4, r4, #3
 8000d94:	1aaa      	subs	r2, r5, r2
 8000d96:	18a2      	adds	r2, r4, r2
 8000d98:	1a80      	subs	r0, r0, r2
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4029      	ands	r1, r5
 8000d9e:	408a      	lsls	r2, r1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	301f      	adds	r0, #31
 8000da4:	b252      	sxtb	r2, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d004      	beq.n	8000db4 <fb_set_pixel_RAM+0x34>
			buffer[ 31 - ( (7-y) + 8*(x/8) ) ].mono |=  (1 << (x%8) );
 8000daa:	7803      	ldrb	r3, [r0, #0]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	7002      	strb	r2, [r0, #0]
			buffer[ (7-y) + 8*(x/8) ].mono |=  (1 << (7 - x%8) );
		} else {
			buffer[ (7-y) + 8*(x/8) ].mono &= ~(1 << (7 - x%8) );
		}
	}
}
 8000db2:	bd30      	pop	{r4, r5, pc}
			buffer[ 31 - ( (7-y) + 8*(x/8) ) ].mono &= ~(1 << (x%8) );
 8000db4:	7803      	ldrb	r3, [r0, #0]
 8000db6:	4393      	bics	r3, r2
 8000db8:	7003      	strb	r3, [r0, #0]
 8000dba:	e7fa      	b.n	8000db2 <fb_set_pixel_RAM+0x32>

08000dbc <polish_letters_UTF8>:
	0xC584,  /*ń, */
	0xC3B3,  /*ó, */
};
/*****************************************************************/
uint8_t polish_letters_UTF8( CHAR * codeChar ) {
	if ( *codeChar < 128 ) {
 8000dbc:	2100      	movs	r1, #0
uint8_t polish_letters_UTF8( CHAR * codeChar ) {
 8000dbe:	b510      	push	{r4, lr}
	if ( *codeChar < 128 ) {
 8000dc0:	5641      	ldrsb	r1, [r0, r1]
uint8_t polish_letters_UTF8( CHAR * codeChar ) {
 8000dc2:	0003      	movs	r3, r0
	if ( *codeChar < 128 ) {
 8000dc4:	7802      	ldrb	r2, [r0, #0]
		return ASCII;
 8000dc6:	2013      	movs	r0, #19
	if ( *codeChar < 128 ) {
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	da13      	bge.n	8000df4 <polish_letters_UTF8+0x38>
	}
	uint8_t tmp = ASCII;
	uint16_t a = (uint16_t)( *codeChar << 8);		// High nibble
			 a = (uint16_t)a | *(codeChar +1);		// Low  nibble

	for ( uint8_t i = 0; i < PL_CHARACTERS_COUNT; i++ ) {
 8000dcc:	2000      	movs	r0, #0
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	490a      	ldr	r1, [pc, #40]	; (8000dfc <polish_letters_UTF8+0x40>)
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	ba5b      	rev16	r3, r3

			if ( *codeChar >= 0x81 && *codeChar <= 0xBC ) {
 8000dd8:	327f      	adds	r2, #127	; 0x7f
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	2a3b      	cmp	r2, #59	; 0x3b
 8000de0:	d909      	bls.n	8000df6 <polish_letters_UTF8+0x3a>
				return UTF8_HIGH_BYTE;
			}
			uint16_t b = (uint16_t)( utf_8Code[i] );
			if ( a == b ) {
 8000de2:	880c      	ldrh	r4, [r1, #0]
 8000de4:	429c      	cmp	r4, r3
 8000de6:	d005      	beq.n	8000df4 <polish_letters_UTF8+0x38>
	for ( uint8_t i = 0; i < PL_CHARACTERS_COUNT; i++ ) {
 8000de8:	3001      	adds	r0, #1
 8000dea:	b2c0      	uxtb	r0, r0
 8000dec:	3102      	adds	r1, #2
 8000dee:	2812      	cmp	r0, #18
 8000df0:	d1f5      	bne.n	8000dde <polish_letters_UTF8+0x22>
		return ASCII;
 8000df2:	3001      	adds	r0, #1
				return i;
			}
	}
	return tmp;
}
 8000df4:	bd10      	pop	{r4, pc}
				return UTF8_HIGH_BYTE;
 8000df6:	2014      	movs	r0, #20
 8000df8:	e7fc      	b.n	8000df4 <polish_letters_UTF8+0x38>
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	08002a4a 	.word	0x08002a4a

08000e00 <graphic_draw_H_line_RAM>:
#include "gfx.h"


/***************************************************************************************/
void graphic_draw_H_line_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, uint8_t width,
							  const T_COLOR color, const T_GAMMA *gamma ) {
 8000e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e02:	0005      	movs	r5, r0
#ifdef PANEL_RGB
	T_RGB_2ROWS colorTmp[ 8 ];
	graphic_24bit_to_rgb( color, colorTmp, gamma );
#endif
	for ( uint8_t i=0; i < width; i++ ) {
 8000e04:	b28c      	uxth	r4, r1
							  const T_COLOR color, const T_GAMMA *gamma ) {
 8000e06:	0016      	movs	r6, r2
 8000e08:	18e3      	adds	r3, r4, r3
 8000e0a:	aa08      	add	r2, sp, #32
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	7817      	ldrb	r7, [r2, #0]
 8000e10:	9301      	str	r3, [sp, #4]
	for ( uint8_t i=0; i < width; i++ ) {
 8000e12:	9b01      	ldr	r3, [sp, #4]
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d100      	bne.n	8000e1a <graphic_draw_H_line_RAM+0x1a>
		fb_set_pixel_RAM( buffer, x + i, y, colorTmp );
#elif defined COLOR_MONO
		fb_set_pixel_RAM( buffer, x + i, y, color );
#endif
	}
}
 8000e18:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		fb_set_pixel_RAM( buffer, x + i, y, color );
 8000e1a:	b221      	sxth	r1, r4
 8000e1c:	0032      	movs	r2, r6
 8000e1e:	0028      	movs	r0, r5
 8000e20:	1c3b      	adds	r3, r7, #0
 8000e22:	3401      	adds	r4, #1
 8000e24:	f7ff ffac 	bl	8000d80 <fb_set_pixel_RAM>
	for ( uint8_t i=0; i < width; i++ ) {
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	e7f2      	b.n	8000e12 <graphic_draw_H_line_RAM+0x12>

08000e2c <graphic_fill_rectangle_RAM>:
}
/***************************************************************************************/

/***************************************************************************************/
void graphic_fill_rectangle_RAM( volatile T_DISPLAY *buffer, int16_t xPos, int16_t yPos, uint8_t width,
								 uint8_t height, const T_COLOR color, const T_GAMMA *gamma ) {
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	0005      	movs	r5, r0
 8000e32:	4668      	mov	r0, sp
 8000e34:	001f      	movs	r7, r3
 8000e36:	ab0a      	add	r3, sp, #40	; 0x28
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	000e      	movs	r6, r1
	for ( uint8_t i=0; i < height; i++ ) {
 8000e3c:	b294      	uxth	r4, r2
								 uint8_t height, const T_COLOR color, const T_GAMMA *gamma ) {
 8000e3e:	a90b      	add	r1, sp, #44	; 0x2c
 8000e40:	7809      	ldrb	r1, [r1, #0]
 8000e42:	18e3      	adds	r3, r4, r3
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	73c1      	strb	r1, [r0, #15]
 8000e48:	9302      	str	r3, [sp, #8]
	for ( uint8_t i=0; i < height; i++ ) {
 8000e4a:	9b02      	ldr	r3, [sp, #8]
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	d101      	bne.n	8000e54 <graphic_fill_rectangle_RAM+0x28>
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
	}
}
 8000e50:	b005      	add	sp, #20
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
 8000e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000e56:	b222      	sxth	r2, r4
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	466b      	mov	r3, sp
 8000e5c:	7bd9      	ldrb	r1, [r3, #15]
 8000e5e:	0028      	movs	r0, r5
 8000e60:	7019      	strb	r1, [r3, #0]
 8000e62:	3401      	adds	r4, #1
 8000e64:	003b      	movs	r3, r7
 8000e66:	0031      	movs	r1, r6
 8000e68:	f7ff ffca 	bl	8000e00 <graphic_draw_H_line_RAM>
	for ( uint8_t i=0; i < height; i++ ) {
 8000e6c:	b2a4      	uxth	r4, r4
 8000e6e:	e7ec      	b.n	8000e4a <graphic_fill_rectangle_RAM+0x1e>

08000e70 <graphic_set_string>:


/******* Ustalamy parametru bloku tekstowego ************************************************/
void graphic_set_string( T_STRING *string, int16_t x, int16_t y, const FONT_INFO *fontPtrPGM ) {
	string->x 			= x;
	string->y 			= y;
 8000e70:	8042      	strh	r2, [r0, #2]
	string->lastPosX 	= x;
	string->lastPosY 	= y;
 8000e72:	80c2      	strh	r2, [r0, #6]

	string->stringLength = 0;
 8000e74:	2200      	movs	r2, #0
	string->x 			= x;
 8000e76:	8001      	strh	r1, [r0, #0]
	string->lastPosX 	= x;
 8000e78:	8081      	strh	r1, [r0, #4]
	string->stringLength = 0;
 8000e7a:	8102      	strh	r2, [r0, #8]
	string->fontPtrPGM 	 = (FONT_INFO *)fontPtrPGM;
 8000e7c:	6103      	str	r3, [r0, #16]
	string->onChange 	 = 0;
 8000e7e:	7282      	strb	r2, [r0, #10]
}
 8000e80:	4770      	bx	lr
	...

08000e84 <graphic_puts_RAM>:
#endif
/***************************************************************************************/


/******************************** Draw the string in RAM (buffer)	 *********************************/
uint16_t graphic_puts_RAM( volatile T_DISPLAY *buffer, T_STRING *string, uint8_t textSize, T_COLOR color, T_COLOR bg, const T_GAMMA *gamma ) {
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	b095      	sub	sp, #84	; 0x54
 8000e88:	000f      	movs	r7, r1
 8000e8a:	466a      	mov	r2, sp
 8000e8c:	214e      	movs	r1, #78	; 0x4e
 8000e8e:	1852      	adds	r2, r2, r1
 8000e90:	7013      	strb	r3, [r2, #0]
 8000e92:	ab1a      	add	r3, sp, #104	; 0x68
 8000e94:	224f      	movs	r2, #79	; 0x4f
 8000e96:	0004      	movs	r4, r0
 8000e98:	7818      	ldrb	r0, [r3, #0]
 8000e9a:	466b      	mov	r3, sp
 8000e9c:	189b      	adds	r3, r3, r2
 8000e9e:	7018      	strb	r0, [r3, #0]
	int16_t cursorX = string->x;
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	5ebb      	ldrsh	r3, [r7, r2]
 8000ea4:	9306      	str	r3, [sp, #24]
	int16_t cursorY = string->y;
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	5ebb      	ldrsh	r3, [r7, r2]
 8000eaa:	930c      	str	r3, [sp, #48]	; 0x30
	uint8_t charWidth = 0;
	uint8_t strLength = 0;

	textSize = FONTx1;	// Unnecessary??

	if ( string->onChange ) {
 8000eac:	7abb      	ldrb	r3, [r7, #10]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d010      	beq.n	8000ed4 <graphic_puts_RAM+0x50>
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 8000eb2:	2106      	movs	r1, #6
 8000eb4:	5e7a      	ldrsh	r2, [r7, r1]
 8000eb6:	2504      	movs	r5, #4
 8000eb8:	5f79      	ldrsh	r1, [r7, r5]
 8000eba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8000ebc:	7a3b      	ldrb	r3, [r7, #8]
 8000ebe:	9502      	str	r5, [sp, #8]
 8000ec0:	ad01      	add	r5, sp, #4
 8000ec2:	7028      	strb	r0, [r5, #0]
 8000ec4:	6938      	ldr	r0, [r7, #16]
 8000ec6:	7800      	ldrb	r0, [r0, #0]
 8000ec8:	9000      	str	r0, [sp, #0]
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f7ff ffae 	bl	8000e2c <graphic_fill_rectangle_RAM>
									string->fontPtrPGM->heightPixels, bg, gamma );
		string->onChange = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	72bb      	strb	r3, [r7, #10]
	}
	string->lastPosX = string->x;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	607b      	str	r3, [r7, #4]
	string->lastPosY = string->y;
	CHAR * str 		 = string->str;

	while ( *str ) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t strLength = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	930e      	str	r3, [sp, #56]	; 0x38
	while ( *str ) {
 8000ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <graphic_puts_RAM+0x6c>
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, str++, color, bg, textSize, string->fontPtrPGM, gamma );
		cursorX  += textSize * (charWidth + string->fontPtrPGM->interspacePixels);
		strLength += charWidth + string->fontPtrPGM->interspacePixels;
	}
//	return  string->stringLength = cursorX - string->x;
	return strLength;
 8000ee8:	466b      	mov	r3, sp
 8000eea:	8f18      	ldrh	r0, [r3, #56]	; 0x38
}
 8000eec:	b015      	add	sp, #84	; 0x54
 8000eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, str++, color, bg, textSize, string->fontPtrPGM, gamma );
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	224e      	movs	r2, #78	; 0x4e
 8000ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ef6:	466b      	mov	r3, sp
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
	uint8_t	transCode = polish_letters_UTF8( charCode );
 8000efc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000efe:	9305      	str	r3, [sp, #20]
 8000f00:	f7ff ff5c 	bl	8000dbc <polish_letters_UTF8>
	if ( transCode == UTF8_HIGH_BYTE ) return 0;
 8000f04:	2500      	movs	r5, #0
 8000f06:	2814      	cmp	r0, #20
 8000f08:	d027      	beq.n	8000f5a <graphic_puts_RAM+0xd6>
	uint8_t	 charHeight		  = fontPtrPGM->heightPixels;
 8000f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		charWidthBits  	= fontPtrPGM->charInfo[ *charCode - charAddressStart ].widthBits;
 8000f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
	uint8_t	 charHeight		  = fontPtrPGM->heightPixels;
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	930f      	str	r3, [sp, #60]	; 0x3c
	if ( transCode == ASCII ) {
 8000f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2813      	cmp	r0, #19
 8000f1c:	d12c      	bne.n	8000f78 <graphic_puts_RAM+0xf4>
		charWidthBits  	= fontPtrPGM->charInfo[ *charCode - charAddressStart ].widthBits;
 8000f1e:	6849      	ldr	r1, [r1, #4]
 8000f20:	9107      	str	r1, [sp, #28]
 8000f22:	4669      	mov	r1, sp
 8000f24:	7f09      	ldrb	r1, [r1, #28]
 8000f26:	1a51      	subs	r1, r2, r1
 8000f28:	0089      	lsls	r1, r1, #2
 8000f2a:	1858      	adds	r0, r3, r1
 8000f2c:	5c5d      	ldrb	r5, [r3, r1]
		charOffset 		= fontPtrPGM->charInfo[ *charCode - charAddressStart ].offset;
 8000f2e:	8843      	ldrh	r3, [r0, #2]
		charOffset		= fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8000f30:	9311      	str	r3, [sp, #68]	; 0x44
	if ( *charCode == SPACE ) {
 8000f32:	2a20      	cmp	r2, #32
 8000f34:	d128      	bne.n	8000f88 <graphic_puts_RAM+0x104>
		graphic_fill_rectangle_RAM( buffer, x , y, charWidthBits*size, charHeight*size, bg, NULL );
 8000f36:	2300      	movs	r3, #0
 8000f38:	214f      	movs	r1, #79	; 0x4f
 8000f3a:	466a      	mov	r2, sp
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	1852      	adds	r2, r2, r1
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	ab01      	add	r3, sp, #4
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000f48:	0020      	movs	r0, r4
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000f4e:	002b      	movs	r3, r5
 8000f50:	9906      	ldr	r1, [sp, #24]
 8000f52:	f7ff ff6b 	bl	8000e2c <graphic_fill_rectangle_RAM>
		return charWidthBits = fontPtrPGM->spacePixels;
 8000f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f58:	7a5d      	ldrb	r5, [r3, #9]
		cursorX  += textSize * (charWidth + string->fontPtrPGM->interspacePixels);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	7a18      	ldrb	r0, [r3, #8]
 8000f5e:	9b06      	ldr	r3, [sp, #24]
 8000f60:	182d      	adds	r5, r5, r0
 8000f62:	18eb      	adds	r3, r5, r3
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	9306      	str	r3, [sp, #24]
		strLength += charWidth + string->fontPtrPGM->interspacePixels;
 8000f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f6a:	195d      	adds	r5, r3, r5
 8000f6c:	b2eb      	uxtb	r3, r5
 8000f6e:	930e      	str	r3, [sp, #56]	; 0x38
 8000f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f72:	3301      	adds	r3, #1
 8000f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8000f76:	e7b3      	b.n	8000ee0 <graphic_puts_RAM+0x5c>
		charWidthBits   = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8000f78:	8a89      	ldrh	r1, [r1, #20]
		                 (PL_CHARACTERS_COUNT - transCode) ].widthBits;
 8000f7a:	1840      	adds	r0, r0, r1
		charWidthBits   = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8000f7c:	3812      	subs	r0, #18
 8000f7e:	0080      	lsls	r0, r0, #2
 8000f80:	1819      	adds	r1, r3, r0
 8000f82:	5c1d      	ldrb	r5, [r3, r0]
		charOffset		= fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8000f84:	884b      	ldrh	r3, [r1, #2]
 8000f86:	e7d3      	b.n	8000f30 <graphic_puts_RAM+0xac>
	if((x >= _width) ||	((x + charWidthBits  * size - 1) < 0) ||	// Clip left and right
 8000f88:	9b06      	ldr	r3, [sp, #24]
 8000f8a:	2b1f      	cmp	r3, #31
 8000f8c:	dce5      	bgt.n	8000f5a <graphic_puts_RAM+0xd6>
 8000f8e:	195b      	adds	r3, r3, r5
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dde2      	ble.n	8000f5a <graphic_puts_RAM+0xd6>
 8000f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	dcdf      	bgt.n	8000f5a <graphic_puts_RAM+0xd6>
	   (y >= _height)||	((y + charHeight	 * size - 1) < 0)) {	// Clip top and bottom
 8000f9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000f9c:	189b      	adds	r3, r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	dddb      	ble.n	8000f5a <graphic_puts_RAM+0xd6>
	uint8_t horByteNum = (charWidthBits - 1)/8 + 1; // How many bytes take in one horizontal line
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	1e6a      	subs	r2, r5, #1
 8000fa6:	17d3      	asrs	r3, r2, #31
 8000fa8:	400b      	ands	r3, r1
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	10db      	asrs	r3, r3, #3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	9312      	str	r3, [sp, #72]	; 0x48
	for ( uint8_t iY = 0; iY < charHeight; iY++ ) {		// Next horizontal line
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8000fba:	466b      	mov	r3, sp
 8000fbc:	189b      	adds	r3, r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d9c9      	bls.n	8000f5a <graphic_puts_RAM+0xd6>
 8000fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000fca:	4694      	mov	ip, r2
 8000fcc:	4463      	add	r3, ip
 8000fce:	930d      	str	r3, [sp, #52]	; 0x34
		for ( uint8_t jX = 0; jX < horByteNum; jX++ ) {	// Next column
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9310      	str	r3, [sp, #64]	; 0x40
 8000fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000fd6:	189e      	adds	r6, r3, r2
 8000fd8:	b236      	sxth	r6, r6
			byte = fontPtrPGM->data[ charOffset + (iY + drawLine)*(jX + 1) ];
 8000fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	5c9a      	ldrb	r2, [r3, r2]
 8000fe2:	9207      	str	r2, [sp, #28]
	if ( 0x80 & byte ) fb_set_pixel_RAM( buffer, x + 0, y, color );
 8000fe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fe6:	569b      	ldrsb	r3, [r3, r2]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da7d      	bge.n	80010e8 <graphic_puts_RAM+0x264>
 8000fec:	466b      	mov	r3, sp
 8000fee:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 0, y, BlackColor );
 8000ff0:	0032      	movs	r2, r6
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	9906      	ldr	r1, [sp, #24]
 8000ff6:	f7ff fec3 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 1 ) return;
 8000ffa:	466b      	mov	r3, sp
 8000ffc:	8b1b      	ldrh	r3, [r3, #24]
 8000ffe:	9308      	str	r3, [sp, #32]
 8001000:	2d01      	cmp	r5, #1
 8001002:	d060      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x40 & byte ) fb_set_pixel_RAM( buffer, x + 1, y, color );
 8001004:	2240      	movs	r2, #64	; 0x40
 8001006:	1c59      	adds	r1, r3, #1
 8001008:	9b07      	ldr	r3, [sp, #28]
 800100a:	b209      	sxth	r1, r1
 800100c:	4213      	tst	r3, r2
 800100e:	d06e      	beq.n	80010ee <graphic_puts_RAM+0x26a>
 8001010:	466b      	mov	r3, sp
 8001012:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 1, y, BlackColor );
 8001014:	0032      	movs	r2, r6
 8001016:	0020      	movs	r0, r4
 8001018:	f7ff feb2 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 2 ) return;
 800101c:	2d02      	cmp	r5, #2
 800101e:	d052      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x20 & byte ) fb_set_pixel_RAM( buffer, x + 2, y, color );
 8001020:	2220      	movs	r2, #32
 8001022:	9b08      	ldr	r3, [sp, #32]
 8001024:	1c99      	adds	r1, r3, #2
 8001026:	9b07      	ldr	r3, [sp, #28]
 8001028:	b209      	sxth	r1, r1
 800102a:	4213      	tst	r3, r2
 800102c:	d062      	beq.n	80010f4 <graphic_puts_RAM+0x270>
 800102e:	466b      	mov	r3, sp
 8001030:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 2, y, BlackColor );
 8001032:	0032      	movs	r2, r6
 8001034:	0020      	movs	r0, r4
 8001036:	f7ff fea3 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 3 ) return;
 800103a:	2d03      	cmp	r5, #3
 800103c:	d043      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x10 & byte ) fb_set_pixel_RAM( buffer, x + 3, y, color );
 800103e:	9b08      	ldr	r3, [sp, #32]
 8001040:	1cd9      	adds	r1, r3, #3
 8001042:	9b07      	ldr	r3, [sp, #28]
 8001044:	b209      	sxth	r1, r1
 8001046:	06db      	lsls	r3, r3, #27
 8001048:	d557      	bpl.n	80010fa <graphic_puts_RAM+0x276>
 800104a:	466b      	mov	r3, sp
 800104c:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 3, y, BlackColor );
 800104e:	0032      	movs	r2, r6
 8001050:	0020      	movs	r0, r4
 8001052:	f7ff fe95 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 4 ) return;
 8001056:	2d04      	cmp	r5, #4
 8001058:	d035      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x08 & byte ) fb_set_pixel_RAM( buffer, x + 4, y, color );
 800105a:	9b08      	ldr	r3, [sp, #32]
 800105c:	1d19      	adds	r1, r3, #4
 800105e:	9b07      	ldr	r3, [sp, #28]
 8001060:	b209      	sxth	r1, r1
 8001062:	071b      	lsls	r3, r3, #28
 8001064:	d54c      	bpl.n	8001100 <graphic_puts_RAM+0x27c>
 8001066:	466b      	mov	r3, sp
 8001068:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 4, y, BlackColor );
 800106a:	0032      	movs	r2, r6
 800106c:	0020      	movs	r0, r4
 800106e:	f7ff fe87 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 5 ) return;
 8001072:	2d05      	cmp	r5, #5
 8001074:	d027      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x04 & byte ) fb_set_pixel_RAM( buffer, x + 5, y, color );
 8001076:	9b08      	ldr	r3, [sp, #32]
 8001078:	1d59      	adds	r1, r3, #5
 800107a:	9b07      	ldr	r3, [sp, #28]
 800107c:	b209      	sxth	r1, r1
 800107e:	075b      	lsls	r3, r3, #29
 8001080:	d541      	bpl.n	8001106 <graphic_puts_RAM+0x282>
 8001082:	466b      	mov	r3, sp
 8001084:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 5, y, BlackColor );
 8001086:	0032      	movs	r2, r6
 8001088:	0020      	movs	r0, r4
 800108a:	f7ff fe79 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 6 ) return;
 800108e:	2d06      	cmp	r5, #6
 8001090:	d019      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x02 & byte ) fb_set_pixel_RAM( buffer, x + 6, y, color );
 8001092:	9b08      	ldr	r3, [sp, #32]
 8001094:	1d99      	adds	r1, r3, #6
 8001096:	9b07      	ldr	r3, [sp, #28]
 8001098:	b209      	sxth	r1, r1
 800109a:	079b      	lsls	r3, r3, #30
 800109c:	d536      	bpl.n	800110c <graphic_puts_RAM+0x288>
 800109e:	466b      	mov	r3, sp
 80010a0:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 6, y, BlackColor );
 80010a2:	0032      	movs	r2, r6
 80010a4:	0020      	movs	r0, r4
 80010a6:	f7ff fe6b 	bl	8000d80 <fb_set_pixel_RAM>
	if ( width == 7 ) return;
 80010aa:	2d07      	cmp	r5, #7
 80010ac:	d00b      	beq.n	80010c6 <graphic_puts_RAM+0x242>
	if ( 0x01 & byte ) fb_set_pixel_RAM( buffer, x + 7, y, color );
 80010ae:	9908      	ldr	r1, [sp, #32]
 80010b0:	9b07      	ldr	r3, [sp, #28]
 80010b2:	3107      	adds	r1, #7
 80010b4:	b209      	sxth	r1, r1
 80010b6:	07db      	lsls	r3, r3, #31
 80010b8:	d52b      	bpl.n	8001112 <graphic_puts_RAM+0x28e>
 80010ba:	466b      	mov	r3, sp
 80010bc:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 7, y, BlackColor );
 80010be:	0032      	movs	r2, r6
 80010c0:	0020      	movs	r0, r4
 80010c2:	f7ff fe5d 	bl	8000d80 <fb_set_pixel_RAM>
		for ( uint8_t jX = 0; jX < horByteNum; jX++ ) {	// Next column
 80010c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80010ca:	4694      	mov	ip, r2
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	9310      	str	r3, [sp, #64]	; 0x40
 80010d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80010d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010d6:	4463      	add	r3, ip
 80010d8:	930d      	str	r3, [sp, #52]	; 0x34
 80010da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80010dc:	4293      	cmp	r3, r2
 80010de:	d900      	bls.n	80010e2 <graphic_puts_RAM+0x25e>
 80010e0:	e77b      	b.n	8000fda <graphic_puts_RAM+0x156>
	for ( uint8_t iY = 0; iY < charHeight; iY++ ) {		// Next horizontal line
 80010e2:	4663      	mov	r3, ip
 80010e4:	3301      	adds	r3, #1
 80010e6:	e766      	b.n	8000fb6 <graphic_puts_RAM+0x132>
	else			   fb_set_pixel_RAM( buffer, x + 0, y, BlackColor );
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <graphic_puts_RAM+0x294>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	e780      	b.n	8000ff0 <graphic_puts_RAM+0x16c>
	else			   fb_set_pixel_RAM( buffer, x + 1, y, BlackColor );
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <graphic_puts_RAM+0x294>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	e78f      	b.n	8001014 <graphic_puts_RAM+0x190>
	else			   fb_set_pixel_RAM( buffer, x + 2, y, BlackColor );
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <graphic_puts_RAM+0x294>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	e79b      	b.n	8001032 <graphic_puts_RAM+0x1ae>
	else			   fb_set_pixel_RAM( buffer, x + 3, y, BlackColor );
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <graphic_puts_RAM+0x294>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	e7a6      	b.n	800104e <graphic_puts_RAM+0x1ca>
	else			   fb_set_pixel_RAM( buffer, x + 4, y, BlackColor );
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <graphic_puts_RAM+0x294>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	e7b1      	b.n	800106a <graphic_puts_RAM+0x1e6>
	else			   fb_set_pixel_RAM( buffer, x + 5, y, BlackColor );
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <graphic_puts_RAM+0x294>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	e7bc      	b.n	8001086 <graphic_puts_RAM+0x202>
	else			   fb_set_pixel_RAM( buffer, x + 6, y, BlackColor );
 800110c:	4b02      	ldr	r3, [pc, #8]	; (8001118 <graphic_puts_RAM+0x294>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	e7c7      	b.n	80010a2 <graphic_puts_RAM+0x21e>
	else			   fb_set_pixel_RAM( buffer, x + 7, y, BlackColor );
 8001112:	4b01      	ldr	r3, [pc, #4]	; (8001118 <graphic_puts_RAM+0x294>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	e7d2      	b.n	80010be <graphic_puts_RAM+0x23a>
 8001118:	08002a6e 	.word	0x08002a6e

0800111c <graphic_puts_int_RAM>:
}
/*******************************************************************************************/
#endif
/********************* Draw the numbers on screen ******************************************/
uint16_t graphic_puts_int_RAM( volatile T_DISPLAY *buffer, T_STRING *string, int data, uint8_t textSize,
						   	   T_COLOR color, T_COLOR bg, const T_GAMMA *gamma ) {
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	001e      	movs	r6, r3
 8001122:	ab0e      	add	r3, sp, #56	; 0x38
 8001124:	781b      	ldrb	r3, [r3, #0]
	char bufer1[16];
	itoa( data, bufer1, 10 );
 8001126:	af04      	add	r7, sp, #16
						   	   T_COLOR color, T_COLOR bg, const T_GAMMA *gamma ) {
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	ab0f      	add	r3, sp, #60	; 0x3c
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	000c      	movs	r4, r1
 8001130:	0005      	movs	r5, r0
	itoa( data, bufer1, 10 );
 8001132:	0039      	movs	r1, r7
						   	   T_COLOR color, T_COLOR bg, const T_GAMMA *gamma ) {
 8001134:	0010      	movs	r0, r2
	itoa( data, bufer1, 10 );
 8001136:	220a      	movs	r2, #10
						   	   T_COLOR color, T_COLOR bg, const T_GAMMA *gamma ) {
 8001138:	9303      	str	r3, [sp, #12]
	itoa( data, bufer1, 10 );
 800113a:	f001 f803 	bl	8002144 <itoa>
	string->str = bufer2;
	(void)graphic_char_to_wide( bufer2, bufer1 );
#else
	string->str = bufer1;
#endif
	return string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 800113e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001140:	9a03      	ldr	r2, [sp, #12]
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	466b      	mov	r3, sp
	string->str = bufer1;
 8001146:	60e7      	str	r7, [r4, #12]
	return string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 8001148:	0021      	movs	r1, r4
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	0028      	movs	r0, r5
 800114e:	0032      	movs	r2, r6
 8001150:	7a1b      	ldrb	r3, [r3, #8]
 8001152:	f7ff fe97 	bl	8000e84 <graphic_puts_RAM>
 8001156:	8120      	strh	r0, [r4, #8]
}
 8001158:	b009      	add	sp, #36	; 0x24
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800115c <irmp_store_bit>:
// verhindert, dass irmp_store_bit() inline compiliert wird:
// static void irmp_store_bit (uint_fast8_t) __attribute__ ((noinline));

static void
irmp_store_bit (uint_fast8_t value)
{
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
        first_bit = value;
    }
    else
#endif

    if (irmp_bit >= irmp_param.address_offset && irmp_bit < irmp_param.address_end)
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <irmp_store_bit+0xa8>)
 8001160:	4c29      	ldr	r4, [pc, #164]	; (8001208 <irmp_store_bit+0xac>)
 8001162:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	429d      	cmp	r5, r3
 8001168:	d803      	bhi.n	8001172 <irmp_store_bit+0x16>
 800116a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800116c:	4e27      	ldr	r6, [pc, #156]	; (800120c <irmp_store_bit+0xb0>)
 800116e:	428b      	cmp	r3, r1
 8001170:	d306      	bcc.n	8001180 <irmp_store_bit+0x24>
        {
            irmp_tmp_address <<= 1;
            irmp_tmp_address |= value;
        }
    }
    else if (irmp_bit >= irmp_param.command_offset && irmp_bit < irmp_param.command_end)
 8001172:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001174:	42ab      	cmp	r3, r5
 8001176:	d30c      	bcc.n	8001192 <irmp_store_bit+0x36>
 8001178:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800117a:	428b      	cmp	r3, r1
 800117c:	d209      	bcs.n	8001192 <irmp_store_bit+0x36>
    {
        if (irmp_param.lsb_first)
 800117e:	4e24      	ldr	r6, [pc, #144]	; (8001210 <irmp_store_bit+0xb4>)
 8001180:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 8001182:	6831      	ldr	r1, [r6, #0]
 8001184:	2f00      	cmp	r7, #0
 8001186:	d013      	beq.n	80011b0 <irmp_store_bit+0x54>
                irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - 32));   // CV wants cast
            }
            else
#endif
            {
                irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - irmp_param.command_offset));   // CV wants cast
 8001188:	0007      	movs	r7, r0
 800118a:	1b5d      	subs	r5, r3, r5
 800118c:	40af      	lsls	r7, r5
 800118e:	4339      	orrs	r1, r7
            }
        }
        else
        {
            irmp_tmp_command <<= 1;
            irmp_tmp_command |= value;
 8001190:	6031      	str	r1, [r6, #0]
    }
    else
#endif

#if IRMP_SUPPORT_SAMSUNG_PROTOCOL == 1
    if (irmp_param.protocol == IRMP_SAMSUNG_PROTOCOL && irmp_bit >= SAMSUNG_ID_OFFSET && irmp_bit < SAMSUNG_ID_OFFSET + SAMSUNG_ID_LEN)
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	2a03      	cmp	r2, #3
 8001196:	d10e      	bne.n	80011b6 <irmp_store_bit+0x5a>
 8001198:	0019      	movs	r1, r3
 800119a:	3911      	subs	r1, #17
 800119c:	2903      	cmp	r1, #3
 800119e:	d804      	bhi.n	80011aa <irmp_store_bit+0x4e>
    {
        irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - SAMSUNG_ID_OFFSET));                    // store with LSB first
 80011a0:	4088      	lsls	r0, r1
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <irmp_store_bit+0xb8>)
 80011a4:	6811      	ldr	r1, [r2, #0]
 80011a6:	4308      	orrs	r0, r1
 80011a8:	6010      	str	r0, [r2, #0]
#endif // IRMP_SUPPORT_MITSU_HEAVY_PROTOCOL
    {
        ;
    }

    irmp_bit++;
 80011aa:	3301      	adds	r3, #1
 80011ac:	6023      	str	r3, [r4, #0]
}
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            irmp_tmp_command <<= 1;
 80011b0:	0049      	lsls	r1, r1, #1
            irmp_tmp_command |= value;
 80011b2:	4301      	orrs	r1, r0
 80011b4:	e7ec      	b.n	8001190 <irmp_store_bit+0x34>
    if (irmp_param.protocol == IRMP_KASEIKYO_PROTOCOL)
 80011b6:	2a05      	cmp	r2, #5
 80011b8:	d1f7      	bne.n	80011aa <irmp_store_bit+0x4e>
        if (irmp_bit >= 20 && irmp_bit < 24)
 80011ba:	001a      	movs	r2, r3
 80011bc:	3a14      	subs	r2, #20
 80011be:	2a03      	cmp	r2, #3
 80011c0:	d814      	bhi.n	80011ec <irmp_store_bit+0x90>
            irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - 8));      // store 4 system bits (genre 1) in upper nibble with LSB first
 80011c2:	4913      	ldr	r1, [pc, #76]	; (8001210 <irmp_store_bit+0xb4>)
 80011c4:	320c      	adds	r2, #12
            genre2 |= (((uint_fast8_t) (value)) << (irmp_bit - 20));                // store 4 system bits (genre 2) in upper nibble with LSB first
 80011c6:	0005      	movs	r5, r0
 80011c8:	4095      	lsls	r5, r2
 80011ca:	002a      	movs	r2, r5
 80011cc:	680d      	ldr	r5, [r1, #0]
 80011ce:	432a      	orrs	r2, r5
 80011d0:	600a      	str	r2, [r1, #0]
            if (value)
 80011d2:	2207      	movs	r2, #7
 80011d4:	2101      	movs	r1, #1
 80011d6:	401a      	ands	r2, r3
 80011d8:	4091      	lsls	r1, r2
 80011da:	4e0f      	ldr	r6, [pc, #60]	; (8001218 <irmp_store_bit+0xbc>)
 80011dc:	08dd      	lsrs	r5, r3, #3
 80011de:	5777      	ldrsb	r7, [r6, r5]
 80011e0:	b24a      	sxtb	r2, r1
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d00b      	beq.n	80011fe <irmp_store_bit+0xa2>
                xor_check[irmp_bit / 8] |= 1 << (irmp_bit % 8);
 80011e6:	433a      	orrs	r2, r7
 80011e8:	5572      	strb	r2, [r6, r5]
 80011ea:	e7de      	b.n	80011aa <irmp_store_bit+0x4e>
        else if (irmp_bit >= 24 && irmp_bit < 28)
 80011ec:	0019      	movs	r1, r3
 80011ee:	3918      	subs	r1, #24
 80011f0:	2903      	cmp	r1, #3
 80011f2:	d801      	bhi.n	80011f8 <irmp_store_bit+0x9c>
            genre2 |= (((uint_fast8_t) (value)) << (irmp_bit - 20));                // store 4 system bits (genre 2) in upper nibble with LSB first
 80011f4:	4909      	ldr	r1, [pc, #36]	; (800121c <irmp_store_bit+0xc0>)
 80011f6:	e7e6      	b.n	80011c6 <irmp_store_bit+0x6a>
        if (irmp_bit < KASEIKYO_COMPLETE_DATA_LEN)
 80011f8:	2b2f      	cmp	r3, #47	; 0x2f
 80011fa:	d8d6      	bhi.n	80011aa <irmp_store_bit+0x4e>
 80011fc:	e7e9      	b.n	80011d2 <irmp_store_bit+0x76>
                xor_check[irmp_bit / 8] &= ~(1 << (irmp_bit % 8));
 80011fe:	4397      	bics	r7, r2
 8001200:	5577      	strb	r7, [r6, r5]
 8001202:	e7d2      	b.n	80011aa <irmp_store_bit+0x4e>
 8001204:	20000204 	.word	0x20000204
 8001208:	200001f0 	.word	0x200001f0
 800120c:	20000258 	.word	0x20000258
 8001210:	2000025c 	.word	0x2000025c
 8001214:	20000260 	.word	0x20000260
 8001218:	20000274 	.word	0x20000274
 800121c:	200001e8 	.word	0x200001e8

08001220 <irmp_ISR>:
/*---------------------------------------------------------------------------------------------------------------------------------------------------
 *  ISR routine
 *  @details  ISR routine, called 10000 times per second
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint_fast8_t irmp_ISR (void) {
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
extern void RCC_gpio_init( void );
extern void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num );

static inline uint8_t gpio_pin_READ( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
//	if ( (port->IDR & pin) ) return 1;
	if ( !(port->IDR & pin) ) return 1;
 8001222:	4bbc      	ldr	r3, [pc, #752]	; (8001514 <irmp_ISR+0x2f4>)
 8001224:	691a      	ldr	r2, [r3, #16]
    }
#endif // IRMP_USE_CALLBACK == 1

    irmp_log(irmp_input);                                                       // log ir signal, if IRMP_LOGGING defined

    if (! irmp_ir_detected)                                                     // ir code already detected?
 8001226:	4bbc      	ldr	r3, [pc, #752]	; (8001518 <irmp_ISR+0x2f8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <irmp_ISR+0x28>
 800122e:	2380      	movs	r3, #128	; 0x80
    {                                                                           // no...
        if (! irmp_start_bit_detected)                                          // start bit detected?
 8001230:	4cba      	ldr	r4, [pc, #744]	; (800151c <irmp_ISR+0x2fc>)
 8001232:	01db      	lsls	r3, r3, #7
 8001234:	401a      	ands	r2, r3
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d126      	bne.n	800128a <irmp_ISR+0x6a>
        {                                                                       // no...
            if (! irmp_input)                                                   // receiving burst?
 800123c:	48b8      	ldr	r0, [pc, #736]	; (8001520 <irmp_ISR+0x300>)
 800123e:	6801      	ldr	r1, [r0, #0]
 8001240:	2a00      	cmp	r2, #0
 8001242:	d104      	bne.n	800124e <irmp_ISR+0x2e>
                if (! irmp_pulse_time)
                {
                    ANALYZE_PRINTF("%8.3fms [starting pulse]\n", (double) (time_counter * 1000) / F_INTERRUPTS);
                }
#endif // ANALYZE
                irmp_pulse_time++;                                              // increment counter
 8001244:	3101      	adds	r1, #1
 8001246:	6001      	str	r1, [r0, #0]
#if defined(STELLARIS_ARM_CORTEX_M4)
    // Clear the timer interrupt
    TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);
#endif

    return (irmp_ir_detected);
 8001248:	4bb3      	ldr	r3, [pc, #716]	; (8001518 <irmp_ISR+0x2f8>)
 800124a:	6818      	ldr	r0, [r3, #0]
}
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (irmp_pulse_time)                                            // it's dark....
 800124e:	2900      	cmp	r1, #0
 8001250:	d013      	beq.n	800127a <irmp_ISR+0x5a>
                    irmp_start_bit_detected = 1;
 8001252:	2201      	movs	r2, #1
                    wait_for_start_space    = 1;
 8001254:	49b3      	ldr	r1, [pc, #716]	; (8001524 <irmp_ISR+0x304>)
                    irmp_start_bit_detected = 1;
 8001256:	6022      	str	r2, [r4, #0]
                    wait_for_start_space    = 1;
 8001258:	600a      	str	r2, [r1, #0]
                    wait_for_space          = 0;
 800125a:	49b3      	ldr	r1, [pc, #716]	; (8001528 <irmp_ISR+0x308>)
 800125c:	600b      	str	r3, [r1, #0]
                    irmp_tmp_command        = 0;
 800125e:	49b3      	ldr	r1, [pc, #716]	; (800152c <irmp_ISR+0x30c>)
 8001260:	600b      	str	r3, [r1, #0]
                    irmp_tmp_address        = 0;
 8001262:	49b3      	ldr	r1, [pc, #716]	; (8001530 <irmp_ISR+0x310>)
 8001264:	600b      	str	r3, [r1, #0]
                    genre2                  = 0;
 8001266:	49b3      	ldr	r1, [pc, #716]	; (8001534 <irmp_ISR+0x314>)
 8001268:	600b      	str	r3, [r1, #0]
                    irmp_tmp_id = 0;
 800126a:	49b3      	ldr	r1, [pc, #716]	; (8001538 <irmp_ISR+0x318>)
 800126c:	600b      	str	r3, [r1, #0]
                    irmp_bit                = 0xff;
 800126e:	21ff      	movs	r1, #255	; 0xff
 8001270:	4bb2      	ldr	r3, [pc, #712]	; (800153c <irmp_ISR+0x31c>)
 8001272:	6019      	str	r1, [r3, #0]
                    irmp_pause_time         = 1;                                // 1st pause: set to 1, not to 0!
 8001274:	4bb2      	ldr	r3, [pc, #712]	; (8001540 <irmp_ISR+0x320>)
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e7e6      	b.n	8001248 <irmp_ISR+0x28>
                    if (key_repetition_len < 0xFFFF)                            // avoid overflow of counter
 800127a:	4ab2      	ldr	r2, [pc, #712]	; (8001544 <irmp_ISR+0x324>)
 800127c:	49b2      	ldr	r1, [pc, #712]	; (8001548 <irmp_ISR+0x328>)
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	428b      	cmp	r3, r1
 8001282:	d8e1      	bhi.n	8001248 <irmp_ISR+0x28>
                        key_repetition_len++;
 8001284:	3301      	adds	r3, #1
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e7de      	b.n	8001248 <irmp_ISR+0x28>
            if (wait_for_start_space)                                           // we have received start bit...
 800128a:	4ea6      	ldr	r6, [pc, #664]	; (8001524 <irmp_ISR+0x304>)
 800128c:	6831      	ldr	r1, [r6, #0]
 800128e:	2900      	cmp	r1, #0
 8001290:	d050      	beq.n	8001334 <irmp_ISR+0x114>
                if (irmp_input)                                                 // still dark?
 8001292:	4dab      	ldr	r5, [pc, #684]	; (8001540 <irmp_ISR+0x320>)
 8001294:	2a00      	cmp	r2, #0
 8001296:	d00c      	beq.n	80012b2 <irmp_ISR+0x92>
                    irmp_pause_time++;                                          // increment counter
 8001298:	782b      	ldrb	r3, [r5, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	702b      	strb	r3, [r5, #0]
                    if (irmp_pause_time > IRMP_TIMEOUT_LEN)                     // timeout?
 80012a0:	2b9b      	cmp	r3, #155	; 0x9b
 80012a2:	d961      	bls.n	8001368 <irmp_ISR+0x148>
                        irmp_start_bit_detected = 0;                            // reset flags, let's wait for another start bit
 80012a4:	2300      	movs	r3, #0
 80012a6:	6023      	str	r3, [r4, #0]
                irmp_pulse_time         = 0;
 80012a8:	4a9d      	ldr	r2, [pc, #628]	; (8001520 <irmp_ISR+0x300>)
 80012aa:	6013      	str	r3, [r2, #0]
                irmp_pause_time         = 0;
 80012ac:	4aa4      	ldr	r2, [pc, #656]	; (8001540 <irmp_ISR+0x320>)
 80012ae:	7013      	strb	r3, [r2, #0]
 80012b0:	e7ca      	b.n	8001248 <irmp_ISR+0x28>
                    if (irmp_pulse_time >= SIRCS_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SIRCS_START_BIT_PULSE_LEN_MAX &&
 80012b2:	4f9b      	ldr	r7, [pc, #620]	; (8001520 <irmp_ISR+0x300>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	001a      	movs	r2, r3
 80012b8:	3a15      	subs	r2, #21
 80012ba:	2a06      	cmp	r2, #6
 80012bc:	d80d      	bhi.n	80012da <irmp_ISR+0xba>
 80012be:	782a      	ldrb	r2, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &sircs_param;
 80012c0:	49a2      	ldr	r1, [pc, #648]	; (800154c <irmp_ISR+0x32c>)
                    if (irmp_pulse_time >= SIRCS_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SIRCS_START_BIT_PULSE_LEN_MAX &&
 80012c2:	3a04      	subs	r2, #4
 80012c4:	2a03      	cmp	r2, #3
 80012c6:	d922      	bls.n	800130e <irmp_ISR+0xee>
                    if (irmp_pulse_time >= KASEIKYO_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= KASEIKYO_START_BIT_PULSE_LEN_MAX &&
 80012c8:	3b1a      	subs	r3, #26
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d813      	bhi.n	80012f6 <irmp_ISR+0xd6>
 80012ce:	782b      	ldrb	r3, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &kaseikyo_param;
 80012d0:	499f      	ldr	r1, [pc, #636]	; (8001550 <irmp_ISR+0x330>)
                    if (irmp_pulse_time >= KASEIKYO_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= KASEIKYO_START_BIT_PULSE_LEN_MAX &&
 80012d2:	3b0d      	subs	r3, #13
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d91a      	bls.n	800130e <irmp_ISR+0xee>
 80012d8:	e00d      	b.n	80012f6 <irmp_ISR+0xd6>
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 80012da:	001a      	movs	r2, r3
 80012dc:	3a3e      	subs	r2, #62	; 0x3e
 80012de:	2a38      	cmp	r2, #56	; 0x38
 80012e0:	d80c      	bhi.n	80012fc <irmp_ISR+0xdc>
                        irmp_pause_time >= NEC_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= NEC_START_BIT_PAUSE_LEN_MAX)
 80012e2:	782b      	ldrb	r3, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &nec_param;
 80012e4:	499b      	ldr	r1, [pc, #620]	; (8001554 <irmp_ISR+0x334>)
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 80012e6:	001a      	movs	r2, r3
 80012e8:	3a1e      	subs	r2, #30
 80012ea:	2a1e      	cmp	r2, #30
 80012ec:	d90f      	bls.n	800130e <irmp_ISR+0xee>
                    else if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN        && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 80012ee:	3b0f      	subs	r3, #15
                            irmp_param_p = (IRMP_PARAMETER *) &nec_rep_param;
 80012f0:	4999      	ldr	r1, [pc, #612]	; (8001558 <irmp_ISR+0x338>)
                    else if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN        && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	d90b      	bls.n	800130e <irmp_ISR+0xee>
                        irmp_start_bit_detected = 0;                            // wait for another start bit...
 80012f6:	2100      	movs	r1, #0
 80012f8:	6021      	str	r1, [r4, #0]
 80012fa:	e008      	b.n	800130e <irmp_ISR+0xee>
                    if (irmp_pulse_time >= SAMSUNG_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_START_BIT_PULSE_LEN_MAX &&
 80012fc:	001a      	movs	r2, r3
 80012fe:	3a28      	subs	r2, #40	; 0x28
 8001300:	2a0b      	cmp	r2, #11
 8001302:	d8e1      	bhi.n	80012c8 <irmp_ISR+0xa8>
 8001304:	782a      	ldrb	r2, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &samsung_param;
 8001306:	4995      	ldr	r1, [pc, #596]	; (800155c <irmp_ISR+0x33c>)
                    if (irmp_pulse_time >= SAMSUNG_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_START_BIT_PULSE_LEN_MAX &&
 8001308:	3a28      	subs	r2, #40	; 0x28
 800130a:	2a0b      	cmp	r2, #11
 800130c:	d8dc      	bhi.n	80012c8 <irmp_ISR+0xa8>
                    if (irmp_start_bit_detected)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <irmp_ISR+0xfc>
                        memcpy_P (&irmp_param, irmp_param_p, sizeof (IRMP_PARAMETER));
 8001314:	2244      	movs	r2, #68	; 0x44
 8001316:	4892      	ldr	r0, [pc, #584]	; (8001560 <irmp_ISR+0x340>)
 8001318:	f000 ff18 	bl	800214c <memcpy>
                    irmp_bit = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	4a87      	ldr	r2, [pc, #540]	; (800153c <irmp_ISR+0x31c>)
                    irmp_pause_time = 0;
 8001320:	702b      	strb	r3, [r5, #0]
                    irmp_bit = 0;
 8001322:	6013      	str	r3, [r2, #0]
                    irmp_pulse_time = 1;                                        // set counter to 1, not 0
 8001324:	2201      	movs	r2, #1
                    wait_for_start_space = 0;
 8001326:	6033      	str	r3, [r6, #0]
                    irmp_pulse_time = 1;                                        // set counter to 1, not 0
 8001328:	603a      	str	r2, [r7, #0]
            if (irmp_start_bit_detected && irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 0)    // enough bits received?
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <irmp_ISR+0x112>
 8001330:	e78a      	b.n	8001248 <irmp_ISR+0x28>
 8001332:	e019      	b.n	8001368 <irmp_ISR+0x148>
            else if (wait_for_space)                                            // the data section....
 8001334:	4d7c      	ldr	r5, [pc, #496]	; (8001528 <irmp_ISR+0x308>)
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d100      	bne.n	800133e <irmp_ISR+0x11e>
 800133c:	e131      	b.n	80015a2 <irmp_ISR+0x382>
                if (irmp_input)                                                 // still dark?
 800133e:	4b88      	ldr	r3, [pc, #544]	; (8001560 <irmp_ISR+0x340>)
 8001340:	2a00      	cmp	r2, #0
 8001342:	d100      	bne.n	8001346 <irmp_ISR+0x126>
 8001344:	e0cc      	b.n	80014e0 <irmp_ISR+0x2c0>
                    if (irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 1)
 8001346:	4a7d      	ldr	r2, [pc, #500]	; (800153c <irmp_ISR+0x31c>)
 8001348:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4296      	cmp	r6, r2
 800134e:	d153      	bne.n	80013f8 <irmp_ISR+0x1d8>
 8001350:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001352:	2801      	cmp	r0, #1
 8001354:	d150      	bne.n	80013f8 <irmp_ISR+0x1d8>
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 8001356:	4a72      	ldr	r2, [pc, #456]	; (8001520 <irmp_ISR+0x300>)
                        if (
 8001358:	6958      	ldr	r0, [r3, #20]
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 800135a:	6812      	ldr	r2, [r2, #0]
                        if (
 800135c:	4290      	cmp	r0, r2
 800135e:	d8a1      	bhi.n	80012a4 <irmp_ISR+0x84>
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 8001360:	6998      	ldr	r0, [r3, #24]
 8001362:	4282      	cmp	r2, r0
 8001364:	d89e      	bhi.n	80012a4 <irmp_ISR+0x84>
                            irmp_param.stop_bit = 0;
 8001366:	6399      	str	r1, [r3, #56]	; 0x38
            if (irmp_start_bit_detected && irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 0)    // enough bits received?
 8001368:	4b74      	ldr	r3, [pc, #464]	; (800153c <irmp_ISR+0x31c>)
 800136a:	4a7d      	ldr	r2, [pc, #500]	; (8001560 <irmp_ISR+0x340>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001370:	4283      	cmp	r3, r0
 8001372:	d000      	beq.n	8001376 <irmp_ISR+0x156>
 8001374:	e768      	b.n	8001248 <irmp_ISR+0x28>
 8001376:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001378:	2b00      	cmp	r3, #0
 800137a:	d000      	beq.n	800137e <irmp_ISR+0x15e>
 800137c:	e764      	b.n	8001248 <irmp_ISR+0x28>
                if (last_irmp_command == irmp_tmp_command && key_repetition_len < AUTO_FRAME_REPETITION_LEN)
 800137e:	4979      	ldr	r1, [pc, #484]	; (8001564 <irmp_ISR+0x344>)
 8001380:	4c6a      	ldr	r4, [pc, #424]	; (800152c <irmp_ISR+0x30c>)
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6826      	ldr	r6, [r4, #0]
 8001386:	4d78      	ldr	r5, [pc, #480]	; (8001568 <irmp_ISR+0x348>)
 8001388:	42b1      	cmp	r1, r6
 800138a:	d107      	bne.n	800139c <irmp_ISR+0x17c>
 800138c:	26c8      	movs	r6, #200	; 0xc8
 800138e:	4f6d      	ldr	r7, [pc, #436]	; (8001544 <irmp_ISR+0x324>)
 8001390:	00b6      	lsls	r6, r6, #2
 8001392:	683f      	ldr	r7, [r7, #0]
 8001394:	42b7      	cmp	r7, r6
 8001396:	d201      	bcs.n	800139c <irmp_ISR+0x17c>
                    repetition_frame_number++;
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	3301      	adds	r3, #1
                if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL && (repetition_frame_number == 1 || repetition_frame_number == 2))
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	602b      	str	r3, [r5, #0]
 80013a0:	2a01      	cmp	r2, #1
 80013a2:	d000      	beq.n	80013a6 <irmp_ISR+0x186>
 80013a4:	e109      	b.n	80015ba <irmp_ISR+0x39a>
 80013a6:	3b01      	subs	r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d900      	bls.n	80013ae <irmp_ISR+0x18e>
 80013ac:	e105      	b.n	80015ba <irmp_ISR+0x39a>
                    key_repetition_len = 0;
 80013ae:	2200      	movs	r2, #0
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <irmp_ISR+0x324>)
                        irmp_id = irmp_tmp_id;
 80013b2:	601a      	str	r2, [r3, #0]
                if (irmp_ir_detected)
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <irmp_ISR+0x2f8>)
 80013b6:	4a5d      	ldr	r2, [pc, #372]	; (800152c <irmp_ISR+0x30c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d017      	beq.n	80013ee <irmp_ISR+0x1ce>
                    if (last_irmp_command == irmp_tmp_command &&
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <irmp_ISR+0x310>)
 80013c0:	6814      	ldr	r4, [r2, #0]
 80013c2:	681e      	ldr	r6, [r3, #0]
 80013c4:	485f      	ldr	r0, [pc, #380]	; (8001544 <irmp_ISR+0x324>)
 80013c6:	4d69      	ldr	r5, [pc, #420]	; (800156c <irmp_ISR+0x34c>)
 80013c8:	42a1      	cmp	r1, r4
 80013ca:	d10b      	bne.n	80013e4 <irmp_ISR+0x1c4>
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	42b3      	cmp	r3, r6
 80013d0:	d108      	bne.n	80013e4 <irmp_ISR+0x1c4>
                        last_irmp_address == irmp_tmp_address &&
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <irmp_ISR+0x350>)
 80013d4:	6801      	ldr	r1, [r0, #0]
 80013d6:	4299      	cmp	r1, r3
 80013d8:	d804      	bhi.n	80013e4 <irmp_ISR+0x1c4>
                        irmp_flags |= IRMP_FLAG_REPETITION;
 80013da:	2301      	movs	r3, #1
 80013dc:	4965      	ldr	r1, [pc, #404]	; (8001574 <irmp_ISR+0x354>)
 80013de:	680f      	ldr	r7, [r1, #0]
 80013e0:	433b      	orrs	r3, r7
 80013e2:	600b      	str	r3, [r1, #0]
                    last_irmp_command = irmp_tmp_command;                           // store as last command, too
 80013e4:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <irmp_ISR+0x344>)
                    last_irmp_address = irmp_tmp_address;                           // store as last address, too
 80013e6:	602e      	str	r6, [r5, #0]
                    last_irmp_command = irmp_tmp_command;                           // store as last command, too
 80013e8:	601c      	str	r4, [r3, #0]
                    key_repetition_len = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	6003      	str	r3, [r0, #0]
                irmp_start_bit_detected = 0;                                        // and wait for next start bit
 80013ee:	2300      	movs	r3, #0
 80013f0:	494a      	ldr	r1, [pc, #296]	; (800151c <irmp_ISR+0x2fc>)
                irmp_tmp_command        = 0;
 80013f2:	6013      	str	r3, [r2, #0]
                irmp_start_bit_detected = 0;                                        // and wait for next start bit
 80013f4:	600b      	str	r3, [r1, #0]
                irmp_tmp_command        = 0;
 80013f6:	e757      	b.n	80012a8 <irmp_ISR+0x88>
                        irmp_pause_time++;                                                          // increment counter
 80013f8:	4951      	ldr	r1, [pc, #324]	; (8001540 <irmp_ISR+0x320>)
 80013fa:	4851      	ldr	r0, [pc, #324]	; (8001540 <irmp_ISR+0x320>)
 80013fc:	7809      	ldrb	r1, [r1, #0]
 80013fe:	3101      	adds	r1, #1
 8001400:	b2c9      	uxtb	r1, r1
 8001402:	7001      	strb	r1, [r0, #0]
                        if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL &&                           // Sony has a variable number of bits:
 8001404:	4856      	ldr	r0, [pc, #344]	; (8001560 <irmp_ISR+0x340>)
 8001406:	6807      	ldr	r7, [r0, #0]
 8001408:	46bc      	mov	ip, r7
 800140a:	2f01      	cmp	r7, #1
 800140c:	d137      	bne.n	800147e <irmp_ISR+0x25e>
 800140e:	2908      	cmp	r1, #8
 8001410:	d9aa      	bls.n	8001368 <irmp_ISR+0x148>
                            irmp_pause_time > SIRCS_PAUSE_LEN_MAX &&                                // minimum is 12
 8001412:	2a0a      	cmp	r2, #10
 8001414:	d933      	bls.n	800147e <irmp_ISR+0x25e>
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 8001416:	4946      	ldr	r1, [pc, #280]	; (8001530 <irmp_ISR+0x310>)
                            irmp_param.complete_len = irmp_bit + 1;                                 // set new complete length
 8001418:	1c53      	adds	r3, r2, #1
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 800141a:	680e      	ldr	r6, [r1, #0]
                            irmp_param.complete_len = irmp_bit + 1;                                 // set new complete length
 800141c:	6343      	str	r3, [r0, #52]	; 0x34
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 800141e:	3b0c      	subs	r3, #12
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4333      	orrs	r3, r6
 8001424:	600b      	str	r3, [r1, #0]
                            irmp_param.command_end = irmp_param.command_offset + irmp_bit + 1;      // correct command length
 8001426:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001428:	18d2      	adds	r2, r2, r3
                            irmp_pause_time = SIRCS_PAUSE_LEN_MAX - 1;                              // correct pause length
 800142a:	2307      	movs	r3, #7
                            irmp_param.command_end = irmp_param.command_offset + irmp_bit + 1;      // correct command length
 800142c:	3201      	adds	r2, #1
 800142e:	6302      	str	r2, [r0, #48]	; 0x30
                            irmp_pause_time = SIRCS_PAUSE_LEN_MAX - 1;                              // correct pause length
 8001430:	4a43      	ldr	r2, [pc, #268]	; (8001540 <irmp_ISR+0x320>)
 8001432:	7013      	strb	r3, [r2, #0]
                    if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max &&
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <irmp_ISR+0x300>)
 8001436:	4942      	ldr	r1, [pc, #264]	; (8001540 <irmp_ISR+0x320>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <irmp_ISR+0x340>)
 800143c:	6858      	ldr	r0, [r3, #4]
 800143e:	4290      	cmp	r0, r2
 8001440:	d80a      	bhi.n	8001458 <irmp_ISR+0x238>
 8001442:	6898      	ldr	r0, [r3, #8]
 8001444:	4282      	cmp	r2, r0
 8001446:	d807      	bhi.n	8001458 <irmp_ISR+0x238>
                        irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 8001448:	7808      	ldrb	r0, [r1, #0]
                    if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max &&
 800144a:	68de      	ldr	r6, [r3, #12]
 800144c:	42b0      	cmp	r0, r6
 800144e:	d303      	bcc.n	8001458 <irmp_ISR+0x238>
                        irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 8001450:	691e      	ldr	r6, [r3, #16]
 8001452:	42b0      	cmp	r0, r6
 8001454:	d800      	bhi.n	8001458 <irmp_ISR+0x238>
 8001456:	e099      	b.n	800158c <irmp_ISR+0x36c>
                    else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max &&
 8001458:	6958      	ldr	r0, [r3, #20]
 800145a:	4282      	cmp	r2, r0
 800145c:	d200      	bcs.n	8001460 <irmp_ISR+0x240>
 800145e:	e09b      	b.n	8001598 <irmp_ISR+0x378>
 8001460:	6998      	ldr	r0, [r3, #24]
 8001462:	4282      	cmp	r2, r0
 8001464:	d900      	bls.n	8001468 <irmp_ISR+0x248>
 8001466:	e097      	b.n	8001598 <irmp_ISR+0x378>
                             irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max)
 8001468:	780a      	ldrb	r2, [r1, #0]
                    else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max &&
 800146a:	69d9      	ldr	r1, [r3, #28]
 800146c:	428a      	cmp	r2, r1
 800146e:	d200      	bcs.n	8001472 <irmp_ISR+0x252>
 8001470:	e092      	b.n	8001598 <irmp_ISR+0x378>
                             irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	429a      	cmp	r2, r3
 8001476:	d900      	bls.n	800147a <irmp_ISR+0x25a>
 8001478:	e08e      	b.n	8001598 <irmp_ISR+0x378>
                                irmp_store_bit (0);
 800147a:	2000      	movs	r0, #0
 800147c:	e087      	b.n	800158e <irmp_ISR+0x36e>
                        if (irmp_pause_time > IRMP_TIMEOUT_LEN)                 // timeout?
 800147e:	299b      	cmp	r1, #155	; 0x9b
 8001480:	d800      	bhi.n	8001484 <irmp_ISR+0x264>
 8001482:	e771      	b.n	8001368 <irmp_ISR+0x148>
                            if (irmp_bit == irmp_param.complete_len - 1 && irmp_param.stop_bit == 0)
 8001484:	1e71      	subs	r1, r6, #1
 8001486:	428a      	cmp	r2, r1
 8001488:	d105      	bne.n	8001496 <irmp_ISR+0x276>
 800148a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800148c:	2900      	cmp	r1, #0
 800148e:	d102      	bne.n	8001496 <irmp_ISR+0x276>
                                irmp_bit++;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <irmp_ISR+0x31c>)
 8001492:	601e      	str	r6, [r3, #0]
                if (got_light)
 8001494:	e768      	b.n	8001368 <irmp_ISR+0x148>
                            else if ((irmp_param.protocol == IRMP_NEC_PROTOCOL || irmp_param.protocol == IRMP_NEC42_PROTOCOL) && irmp_bit == 0)
 8001496:	4661      	mov	r1, ip
 8001498:	2902      	cmp	r1, #2
 800149a:	d002      	beq.n	80014a2 <irmp_ISR+0x282>
 800149c:	291c      	cmp	r1, #28
 800149e:	d000      	beq.n	80014a2 <irmp_ISR+0x282>
 80014a0:	e700      	b.n	80012a4 <irmp_ISR+0x84>
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d000      	beq.n	80014a8 <irmp_ISR+0x288>
 80014a6:	e6fd      	b.n	80012a4 <irmp_ISR+0x84>
                                if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX)
 80014a8:	2196      	movs	r1, #150	; 0x96
 80014aa:	4826      	ldr	r0, [pc, #152]	; (8001544 <irmp_ISR+0x324>)
 80014ac:	00c9      	lsls	r1, r1, #3
 80014ae:	6804      	ldr	r4, [r0, #0]
 80014b0:	428c      	cmp	r4, r1
 80014b2:	d212      	bcs.n	80014da <irmp_ISR+0x2ba>
                                    irmp_param.stop_bit     = TRUE;                         // set flag
 80014b4:	2101      	movs	r1, #1
                                    irmp_param.protocol     = IRMP_NEC_PROTOCOL;            // switch protocol
 80014b6:	2402      	movs	r4, #2
                                    irmp_param.stop_bit     = TRUE;                         // set flag
 80014b8:	6399      	str	r1, [r3, #56]	; 0x38
                                    irmp_param.protocol     = IRMP_NEC_PROTOCOL;            // switch protocol
 80014ba:	601c      	str	r4, [r3, #0]
                                    irmp_param.complete_len = irmp_bit;                     // patch length: 16 or 17
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
                                    irmp_tmp_address = last_irmp_address;                   // address is last address
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <irmp_ISR+0x34c>)
                                    key_repetition_len = 0;
 80014c0:	6002      	str	r2, [r0, #0]
                                    irmp_tmp_address = last_irmp_address;                   // address is last address
 80014c2:	681c      	ldr	r4, [r3, #0]
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <irmp_ISR+0x310>)
 80014c6:	601c      	str	r4, [r3, #0]
                                    irmp_tmp_command = last_irmp_command;                   // command is last command
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <irmp_ISR+0x344>)
 80014ca:	681c      	ldr	r4, [r3, #0]
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <irmp_ISR+0x30c>)
 80014ce:	601c      	str	r4, [r3, #0]
                                    irmp_flags |= IRMP_FLAG_REPETITION;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <irmp_ISR+0x354>)
 80014d2:	681c      	ldr	r4, [r3, #0]
 80014d4:	4321      	orrs	r1, r4
 80014d6:	6019      	str	r1, [r3, #0]
                if (got_light)
 80014d8:	e746      	b.n	8001368 <irmp_ISR+0x148>
                                    irmp_ir_detected = FALSE;
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <irmp_ISR+0x2f8>)
 80014dc:	601a      	str	r2, [r3, #0]
                if (got_light)
 80014de:	e743      	b.n	8001368 <irmp_ISR+0x148>
                    if (irmp_param.protocol == IRMP_SAMSUNG_PROTOCOL && irmp_bit == 16)       // Samsung: 16th bit
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	2903      	cmp	r1, #3
 80014e4:	d1a6      	bne.n	8001434 <irmp_ISR+0x214>
 80014e6:	4e15      	ldr	r6, [pc, #84]	; (800153c <irmp_ISR+0x31c>)
 80014e8:	6830      	ldr	r0, [r6, #0]
 80014ea:	2810      	cmp	r0, #16
 80014ec:	d1a2      	bne.n	8001434 <irmp_ISR+0x214>
                        if (irmp_pulse_time >= SAMSUNG_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_PULSE_LEN_MAX &&
 80014ee:	490c      	ldr	r1, [pc, #48]	; (8001520 <irmp_ISR+0x300>)
 80014f0:	6809      	ldr	r1, [r1, #0]
 80014f2:	3903      	subs	r1, #3
 80014f4:	2905      	cmp	r1, #5
 80014f6:	d84f      	bhi.n	8001598 <irmp_ISR+0x378>
                            irmp_pause_time >= SAMSUNG_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_START_BIT_PAUSE_LEN_MAX)
 80014f8:	4911      	ldr	r1, [pc, #68]	; (8001540 <irmp_ISR+0x320>)
 80014fa:	7809      	ldrb	r1, [r1, #0]
                        if (irmp_pulse_time >= SAMSUNG_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_PULSE_LEN_MAX &&
 80014fc:	000f      	movs	r7, r1
 80014fe:	3f28      	subs	r7, #40	; 0x28
 8001500:	2f0b      	cmp	r7, #11
 8001502:	d839      	bhi.n	8001578 <irmp_ISR+0x358>
                            irmp_bit++;
 8001504:	2311      	movs	r3, #17
                            wait_for_space = 0;
 8001506:	602a      	str	r2, [r5, #0]
                            irmp_bit++;
 8001508:	6033      	str	r3, [r6, #0]
                    irmp_pulse_time = 1;                                            // set counter to 1, not 0
 800150a:	2201      	movs	r2, #1
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <irmp_ISR+0x300>)
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e70b      	b.n	800132a <irmp_ISR+0x10a>
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	48000400 	.word	0x48000400
 8001518:	20000200 	.word	0x20000200
 800151c:	20000254 	.word	0x20000254
 8001520:	20000250 	.word	0x20000250
 8001524:	20000270 	.word	0x20000270
 8001528:	2000026c 	.word	0x2000026c
 800152c:	2000025c 	.word	0x2000025c
 8001530:	20000258 	.word	0x20000258
 8001534:	200001e8 	.word	0x200001e8
 8001538:	20000260 	.word	0x20000260
 800153c:	200001f0 	.word	0x200001f0
 8001540:	20000248 	.word	0x20000248
 8001544:	20000264 	.word	0x20000264
 8001548:	0000fffe 	.word	0x0000fffe
 800154c:	08002b80 	.word	0x08002b80
 8001550:	08002a70 	.word	0x08002a70
 8001554:	08002ab4 	.word	0x08002ab4
 8001558:	08002af8 	.word	0x08002af8
 800155c:	08002b3c 	.word	0x08002b3c
 8001560:	20000204 	.word	0x20000204
 8001564:	20000024 	.word	0x20000024
 8001568:	20000268 	.word	0x20000268
 800156c:	20000020 	.word	0x20000020
 8001570:	000005db 	.word	0x000005db
 8001574:	200001f8 	.word	0x200001f8
                            irmp_param.protocol         = IRMP_SAMSUNG32_PROTOCOL;
 8001578:	220a      	movs	r2, #10
                            if (irmp_pause_time >= SAMSUNG_1_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_1_PAUSE_LEN_MAX)
 800157a:	390a      	subs	r1, #10
                            irmp_param.protocol         = IRMP_SAMSUNG32_PROTOCOL;
 800157c:	601a      	str	r2, [r3, #0]
                            irmp_param.command_end      = SAMSUNG32_COMMAND_OFFSET + SAMSUNG32_COMMAND_LEN;
 800157e:	3216      	adds	r2, #22
                            irmp_param.command_offset   = SAMSUNG32_COMMAND_OFFSET;
 8001580:	62d8      	str	r0, [r3, #44]	; 0x2c
                            irmp_param.command_end      = SAMSUNG32_COMMAND_OFFSET + SAMSUNG32_COMMAND_LEN;
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
                            irmp_param.complete_len     = SAMSUNG32_COMPLETE_DATA_LEN;
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
                            if (irmp_pause_time >= SAMSUNG_1_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_1_PAUSE_LEN_MAX)
 8001586:	290b      	cmp	r1, #11
 8001588:	d900      	bls.n	800158c <irmp_ISR+0x36c>
 800158a:	e776      	b.n	800147a <irmp_ISR+0x25a>
                                irmp_store_bit (1);
 800158c:	2001      	movs	r0, #1
                                irmp_store_bit (0);
 800158e:	f7ff fde5 	bl	800115c <irmp_store_bit>
                                wait_for_space = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	e7b8      	b.n	800150a <irmp_ISR+0x2ea>
                            irmp_start_bit_detected = 0;                            // reset flags and wait for next start bit
 8001598:	2300      	movs	r3, #0
                            irmp_pause_time         = 0;
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <irmp_ISR+0x440>)
                            irmp_start_bit_detected = 0;                            // reset flags and wait for next start bit
 800159c:	6023      	str	r3, [r4, #0]
                            irmp_pause_time         = 0;
 800159e:	7013      	strb	r3, [r2, #0]
 80015a0:	e7b3      	b.n	800150a <irmp_ISR+0x2ea>
                if (! irmp_input)                                                   // still light?
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d104      	bne.n	80015b0 <irmp_ISR+0x390>
                    irmp_pulse_time++;                                              // increment counter
 80015a6:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <irmp_ISR+0x444>)
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e6db      	b.n	8001368 <irmp_ISR+0x148>
                    wait_for_space  = 1;                                            // let's count the time (see above)
 80015b0:	2301      	movs	r3, #1
                    irmp_pause_time = 1;                                            // set pause counter to 1, not 0
 80015b2:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <irmp_ISR+0x440>)
                    wait_for_space  = 1;                                            // let's count the time (see above)
 80015b4:	602b      	str	r3, [r5, #0]
                    irmp_pause_time = 1;                                            // set pause counter to 1, not 0
 80015b6:	7013      	strb	r3, [r2, #0]
 80015b8:	e6d6      	b.n	8001368 <irmp_ISR+0x148>
                    irmp_ir_detected = TRUE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	4d2a      	ldr	r5, [pc, #168]	; (8001668 <irmp_ISR+0x448>)
 80015be:	602b      	str	r3, [r5, #0]
                        if (irmp_param.protocol == IRMP_NEC_PROTOCOL && irmp_bit == 0)  // repetition frame
 80015c0:	2a02      	cmp	r2, #2
 80015c2:	d126      	bne.n	8001612 <irmp_ISR+0x3f2>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d10f      	bne.n	80015e8 <irmp_ISR+0x3c8>
                            if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX)
 80015c8:	2696      	movs	r6, #150	; 0x96
 80015ca:	4d28      	ldr	r5, [pc, #160]	; (800166c <irmp_ISR+0x44c>)
 80015cc:	00f6      	lsls	r6, r6, #3
 80015ce:	682f      	ldr	r7, [r5, #0]
 80015d0:	42b7      	cmp	r7, r6
 80015d2:	d21b      	bcs.n	800160c <irmp_ISR+0x3ec>
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 80015d4:	4e26      	ldr	r6, [pc, #152]	; (8001670 <irmp_ISR+0x450>)
                                irmp_tmp_command = last_irmp_command;                   // command is last command
 80015d6:	6021      	str	r1, [r4, #0]
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 80015d8:	6837      	ldr	r7, [r6, #0]
                                irmp_flags |= IRMP_FLAG_REPETITION;
 80015da:	4c26      	ldr	r4, [pc, #152]	; (8001674 <irmp_ISR+0x454>)
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 80015dc:	4e26      	ldr	r6, [pc, #152]	; (8001678 <irmp_ISR+0x458>)
                                key_repetition_len = 0;
 80015de:	6028      	str	r0, [r5, #0]
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 80015e0:	6037      	str	r7, [r6, #0]
                                irmp_flags |= IRMP_FLAG_REPETITION;
 80015e2:	6826      	ldr	r6, [r4, #0]
 80015e4:	4333      	orrs	r3, r6
 80015e6:	6023      	str	r3, [r4, #0]
                            irmp_protocol = irmp_param.protocol;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <irmp_ISR+0x45c>)
                        irmp_address = irmp_tmp_address;                            // store address
 80015ea:	4825      	ldr	r0, [pc, #148]	; (8001680 <irmp_ISR+0x460>)
                            irmp_protocol = irmp_param.protocol;
 80015ec:	601a      	str	r2, [r3, #0]
                        irmp_address = irmp_tmp_address;                            // store address
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <irmp_ISR+0x458>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6003      	str	r3, [r0, #0]
                        if (irmp_param.protocol == IRMP_NEC_PROTOCOL)
 80015f4:	2a02      	cmp	r2, #2
 80015f6:	d101      	bne.n	80015fc <irmp_ISR+0x3dc>
                            last_irmp_address = irmp_tmp_address;                   // store as last address, too
 80015f8:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <irmp_ISR+0x450>)
 80015fa:	6013      	str	r3, [r2, #0]
                        irmp_command = irmp_tmp_command;                            // store command
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <irmp_ISR+0x464>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <irmp_ISR+0x468>)
 8001602:	601a      	str	r2, [r3, #0]
                        irmp_id = irmp_tmp_id;
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <irmp_ISR+0x46c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <irmp_ISR+0x470>)
 800160a:	e6d2      	b.n	80013b2 <irmp_ISR+0x192>
                                irmp_ir_detected = FALSE;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <irmp_ISR+0x448>)
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	e7ea      	b.n	80015e8 <irmp_ISR+0x3c8>
                        if (irmp_param.protocol == IRMP_KASEIKYO_PROTOCOL)
 8001612:	2a05      	cmp	r2, #5
 8001614:	d1e8      	bne.n	80015e8 <irmp_ISR+0x3c8>
                            if (xor_value != (xor_check[2] & 0x0F))
 8001616:	250f      	movs	r5, #15
                            xor_value = (xor_check[0] & 0x0F) ^ ((xor_check[0] & 0xF0) >> 4) ^ (xor_check[1] & 0x0F) ^ ((xor_check[1] & 0xF0) >> 4);
 8001618:	4c1e      	ldr	r4, [pc, #120]	; (8001694 <irmp_ISR+0x474>)
 800161a:	7827      	ldrb	r7, [r4, #0]
 800161c:	7866      	ldrb	r6, [r4, #1]
 800161e:	093b      	lsrs	r3, r7, #4
                            if (xor_value != (xor_check[2] & 0x0F))
 8001620:	402f      	ands	r7, r5
 8001622:	407b      	eors	r3, r7
 8001624:	0037      	movs	r7, r6
 8001626:	78a0      	ldrb	r0, [r4, #2]
 8001628:	402f      	ands	r7, r5
 800162a:	407b      	eors	r3, r7
                            xor_value = (xor_check[0] & 0x0F) ^ ((xor_check[0] & 0xF0) >> 4) ^ (xor_check[1] & 0x0F) ^ ((xor_check[1] & 0xF0) >> 4);
 800162c:	0936      	lsrs	r6, r6, #4
                            if (xor_value != (xor_check[2] & 0x0F))
 800162e:	4073      	eors	r3, r6
 8001630:	4005      	ands	r5, r0
 8001632:	42ab      	cmp	r3, r5
 8001634:	d002      	beq.n	800163c <irmp_ISR+0x41c>
                                irmp_ir_detected = FALSE;
 8001636:	2300      	movs	r3, #0
 8001638:	4d0b      	ldr	r5, [pc, #44]	; (8001668 <irmp_ISR+0x448>)
 800163a:	602b      	str	r3, [r5, #0]
                            xor_value = xor_check[2] ^ xor_check[3] ^ xor_check[4];
 800163c:	78e3      	ldrb	r3, [r4, #3]
 800163e:	7925      	ldrb	r5, [r4, #4]
 8001640:	4043      	eors	r3, r0
                            if (xor_value != xor_check[5])
 8001642:	7960      	ldrb	r0, [r4, #5]
 8001644:	406b      	eors	r3, r5
 8001646:	4298      	cmp	r0, r3
 8001648:	d002      	beq.n	8001650 <irmp_ISR+0x430>
                                irmp_ir_detected = FALSE;
 800164a:	2300      	movs	r3, #0
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <irmp_ISR+0x448>)
 800164e:	6003      	str	r3, [r0, #0]
                            irmp_flags |= genre2;       // write the genre2 bits into MSB of the flag byte
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <irmp_ISR+0x454>)
 8001652:	4c11      	ldr	r4, [pc, #68]	; (8001698 <irmp_ISR+0x478>)
 8001654:	6803      	ldr	r3, [r0, #0]
 8001656:	6824      	ldr	r4, [r4, #0]
 8001658:	4323      	orrs	r3, r4
 800165a:	6003      	str	r3, [r0, #0]
 800165c:	e7c4      	b.n	80015e8 <irmp_ISR+0x3c8>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	20000248 	.word	0x20000248
 8001664:	20000250 	.word	0x20000250
 8001668:	20000200 	.word	0x20000200
 800166c:	20000264 	.word	0x20000264
 8001670:	20000020 	.word	0x20000020
 8001674:	200001f8 	.word	0x200001f8
 8001678:	20000258 	.word	0x20000258
 800167c:	2000024c 	.word	0x2000024c
 8001680:	200001ec 	.word	0x200001ec
 8001684:	2000025c 	.word	0x2000025c
 8001688:	200001f4 	.word	0x200001f4
 800168c:	20000260 	.word	0x20000260
 8001690:	200001fc 	.word	0x200001fc
 8001694:	20000274 	.word	0x20000274
 8001698:	200001e8 	.word	0x200001e8

0800169c <TIM14_IRQHandler>:

	TIM14->CR1 = TIM_CR1_CEN;		// Counter start
	NVIC_EnableIRQ( TIM14_IRQn );
}
void TIM14_IRQHandler(void) {	// Timer2 Interrupt Handler
	if ( TIM14->SR & TIM_SR_UIF ) {
 800169c:	2101      	movs	r1, #1
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <TIM14_IRQHandler+0x18>)
void TIM14_IRQHandler(void) {	// Timer2 Interrupt Handler
 80016a0:	b510      	push	{r4, lr}
	if ( TIM14->SR & TIM_SR_UIF ) {
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	420a      	tst	r2, r1
 80016a6:	d004      	beq.n	80016b2 <TIM14_IRQHandler+0x16>
		TIM14->SR &= ~TIM_SR_UIF;		// Update interrupt Flag
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	438a      	bics	r2, r1
 80016ac:	611a      	str	r2, [r3, #16]
		(void) irmp_ISR();				// call IRMP ISR
 80016ae:	f7ff fdb7 	bl	8001220 <irmp_ISR>
	}
}
 80016b2:	bd10      	pop	{r4, pc}
 80016b4:	40002000 	.word	0x40002000

080016b8 <keyboard_ptr>:
/************************************************************************/

/************************ Public functions ******************************/
KEYB_t * keyboard_ptr(void) {
	return &keyboard;
}
 80016b8:	4800      	ldr	r0, [pc, #0]	; (80016bc <keyboard_ptr+0x4>)
 80016ba:	4770      	bx	lr
 80016bc:	2000027b 	.word	0x2000027b

080016c0 <sw_keyboard_init>:

// ---------------------- Main init function -----------------------------
void sw_keyboard_init(void) {
 80016c0:	b510      	push	{r4, lr}
	for ( uint8_t i = 0; i<NUM_KEYS; i++ ) {
		gpio_pin_cfg(KeysTab[ i ].port, KeysTab[ i ].pin, gpio_mode_in_PU);
 80016c2:	2490      	movs	r4, #144	; 0x90
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	05e4      	lsls	r4, r4, #23
 80016c8:	0020      	movs	r0, r4
 80016ca:	2210      	movs	r2, #16
 80016cc:	00c9      	lsls	r1, r1, #3
 80016ce:	f7fe fecb 	bl	8000468 <gpio_pin_cfg>
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0020      	movs	r0, r4
 80016d6:	2210      	movs	r2, #16
 80016d8:	0109      	lsls	r1, r1, #4
 80016da:	f7fe fec5 	bl	8000468 <gpio_pin_cfg>
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	2210      	movs	r2, #16
 80016e2:	0020      	movs	r0, r4
 80016e4:	0149      	lsls	r1, r1, #5
 80016e6:	f7fe febf 	bl	8000468 <gpio_pin_cfg>
	}
}
 80016ea:	bd10      	pop	{r4, pc}

080016ec <SW_KEYBOARD_EVENT>:
// -----------------------------------------------------------------------

void SW_KEYBOARD_EVENT( void ) {
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
extern void RCC_gpio_init( void );
extern void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num );

static inline uint8_t gpio_pin_READ( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
//	if ( (port->IDR & pin) ) return 1;
	if ( !(port->IDR & pin) ) return 1;
 80016ee:	2390      	movs	r3, #144	; 0x90
 80016f0:	05db      	lsls	r3, r3, #23
 80016f2:	496d      	ldr	r1, [pc, #436]	; (80018a8 <SW_KEYBOARD_EVENT+0x1bc>)
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	780d      	ldrb	r5, [r1, #0]
 80016f8:	4e6c      	ldr	r6, [pc, #432]	; (80018ac <SW_KEYBOARD_EVENT+0x1c0>)
 80016fa:	0552      	lsls	r2, r2, #21
 80016fc:	d526      	bpl.n	800174c <SW_KEYBOARD_EVENT+0x60>
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	0512      	lsls	r2, r2, #20
 8001702:	d531      	bpl.n	8001768 <SW_KEYBOARD_EVENT+0x7c>
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	04db      	lsls	r3, r3, #19
 8001708:	d530      	bpl.n	800176c <SW_KEYBOARD_EVENT+0x80>
	else if (state == keyRELEASED && lastState == keyPRESSED)
 800170a:	2d01      	cmp	r5, #1
 800170c:	d130      	bne.n	8001770 <SW_KEYBOARD_EVENT+0x84>
			timeFallRise = millis() - timeFallRise;
 800170e:	f000 fcad 	bl	800206c <millis>
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <SW_KEYBOARD_EVENT+0x1c4>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	1a80      	subs	r0, r0, r2
			if ( speedPressCounter++ == (EDGE_COUNTER - 1) ) {
 8001718:	4a66      	ldr	r2, [pc, #408]	; (80018b4 <SW_KEYBOARD_EVENT+0x1c8>)
			timeFallRise = millis() - timeFallRise;
 800171a:	8018      	strh	r0, [r3, #0]
			if ( speedPressCounter++ == (EDGE_COUNTER - 1) ) {
 800171c:	7813      	ldrb	r3, [r2, #0]
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	7011      	strb	r1, [r2, #0]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d105      	bne.n	8001732 <SW_KEYBOARD_EVENT+0x46>
				timeFall2Rise = millis() - timeFall2Rise;
 8001726:	f000 fca1 	bl	800206c <millis>
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <SW_KEYBOARD_EVENT+0x1cc>)
 800172c:	881a      	ldrh	r2, [r3, #0]
 800172e:	1a80      	subs	r0, r0, r2
 8001730:	8018      	strh	r0, [r3, #0]
	if ( keyAction == action_check || keyAction == action_repeat ) {
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <SW_KEYBOARD_EVENT+0x1d0>)
 8001734:	22fd      	movs	r2, #253	; 0xfd
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3b02      	subs	r3, #2
 800173a:	001c      	movs	r4, r3
 800173c:	4014      	ands	r4, r2
 800173e:	4213      	tst	r3, r2
 8001740:	d118      	bne.n	8001774 <SW_KEYBOARD_EVENT+0x88>
		debounceTimer = DEBOUNCE_TIME;
 8001742:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
 8001744:	3af3      	subs	r2, #243	; 0xf3
 8001746:	0025      	movs	r5, r4
 8001748:	801a      	strh	r2, [r3, #0]
 800174a:	e040      	b.n	80017ce <SW_KEYBOARD_EVENT+0xe2>
#	define learn_key3_pressed()	gpio_pin_READ( BTN3_PORT, BTN3_PIN )

/********************************* Obsługa kilku klawiszy  *******************************/
static inline uint8_t sw_get_keys_simple( void ) {
	if ( learn_key1_pressed() )
		return 1;									// Przycisk 1 wciśnięty
 800174c:	2301      	movs	r3, #1
		keyboard.keyCoded = pressKeyCheck;
 800174e:	4f5b      	ldr	r7, [pc, #364]	; (80018bc <SW_KEYBOARD_EVENT+0x1d0>)
 8001750:	7073      	strb	r3, [r6, #1]
	if 		(state == keyPRESSED  && lastState == keyRELEASED)
 8001752:	2d01      	cmp	r5, #1
 8001754:	d125      	bne.n	80017a2 <SW_KEYBOARD_EVENT+0xb6>
	switch ( keyAction ) {
 8001756:	783c      	ldrb	r4, [r7, #0]
 8001758:	2c02      	cmp	r4, #2
 800175a:	d04f      	beq.n	80017fc <SW_KEYBOARD_EVENT+0x110>
 800175c:	2c04      	cmp	r4, #4
 800175e:	d05f      	beq.n	8001820 <SW_KEYBOARD_EVENT+0x134>
 8001760:	2c01      	cmp	r4, #1
 8001762:	d03b      	beq.n	80017dc <SW_KEYBOARD_EVENT+0xf0>
			KEY_EVENT_t keyEvent  = NO_EVENT;
 8001764:	2400      	movs	r4, #0
 8001766:	e032      	b.n	80017ce <SW_KEYBOARD_EVENT+0xe2>
	else
	if ( learn_key2_pressed() )
		return 2;
 8001768:	2302      	movs	r3, #2
 800176a:	e7f0      	b.n	800174e <SW_KEYBOARD_EVENT+0x62>
	else
	if ( learn_key3_pressed() )
		return 3;
 800176c:	2303      	movs	r3, #3
 800176e:	e7ee      	b.n	800174e <SW_KEYBOARD_EVENT+0x62>
	else if (state == keyRELEASED && lastState == keyRELEASED)
 8001770:	2d00      	cmp	r5, #0
 8001772:	d001      	beq.n	8001778 <SW_KEYBOARD_EVENT+0x8c>
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001774:	2500      	movs	r5, #0
 8001776:	e7f5      	b.n	8001764 <SW_KEYBOARD_EVENT+0x78>
	switch ( keyAction ) {
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <SW_KEYBOARD_EVENT+0x1d0>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	2a02      	cmp	r2, #2
 800177e:	d065      	beq.n	800184c <SW_KEYBOARD_EVENT+0x160>
 8001780:	2a04      	cmp	r2, #4
 8001782:	d1ef      	bne.n	8001764 <SW_KEYBOARD_EVENT+0x78>
			if ( debounceTimer == 0 ) {
 8001784:	4a4e      	ldr	r2, [pc, #312]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001786:	002c      	movs	r4, r5
			if ( debounceTimer == 0 ) {
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	2a00      	cmp	r2, #0
 800178c:	d107      	bne.n	800179e <SW_KEYBOARD_EVENT+0xb2>
				if ( repeatCounter == 0 ) {
 800178e:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <SW_KEYBOARD_EVENT+0x1d8>)
				keyAction = action_idle;
 8001790:	701d      	strb	r5, [r3, #0]
				if ( repeatCounter == 0 ) {
 8001792:	7814      	ldrb	r4, [r2, #0]
					keyEvent = MEDIUM_PRESS;
 8001794:	4262      	negs	r2, r4
 8001796:	4154      	adcs	r4, r2
				speedPressCounter = 0;
 8001798:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <SW_KEYBOARD_EVENT+0x1c8>)
					keyEvent = MEDIUM_PRESS;
 800179a:	0064      	lsls	r4, r4, #1
				speedPressCounter = 0;
 800179c:	7015      	strb	r5, [r2, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 5 );
 800179e:	2205      	movs	r2, #5
 80017a0:	e063      	b.n	800186a <SW_KEYBOARD_EVENT+0x17e>
			timeFallRise = millis();
 80017a2:	f000 fc63 	bl	800206c <millis>
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <SW_KEYBOARD_EVENT+0x1c4>)
			if (speedPressCounter++ == 0) {
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <SW_KEYBOARD_EVENT+0x1c8>)
			timeFallRise = millis();
 80017aa:	8018      	strh	r0, [r3, #0]
			if (speedPressCounter++ == 0) {
 80017ac:	7813      	ldrb	r3, [r2, #0]
 80017ae:	1c59      	adds	r1, r3, #1
 80017b0:	7011      	strb	r1, [r2, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <SW_KEYBOARD_EVENT+0xd2>
				timeFall2Rise = millis();
 80017b6:	f000 fc59 	bl	800206c <millis>
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <SW_KEYBOARD_EVENT+0x1cc>)
 80017bc:	8018      	strh	r0, [r3, #0]
	if ( keyAction == action_idle ) {
 80017be:	783c      	ldrb	r4, [r7, #0]
 80017c0:	2501      	movs	r5, #1
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d1ce      	bne.n	8001764 <SW_KEYBOARD_EVENT+0x78>
		debounceTimer = DEBOUNCE_TIME;
 80017c6:	220a      	movs	r2, #10
 80017c8:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
		keyAction 	  = action_debounce;
 80017ca:	703d      	strb	r5, [r7, #0]
		debounceTimer = DEBOUNCE_TIME;
 80017cc:	801a      	strh	r2, [r3, #0]
	lastState = pressKeyCheck;
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <SW_KEYBOARD_EVENT+0x1bc>)
 80017d0:	701d      	strb	r5, [r3, #0]
	if (keyboard.keyCoded)return keyEvent;
 80017d2:	7873      	ldrb	r3, [r6, #1]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d157      	bne.n	8001888 <SW_KEYBOARD_EVENT+0x19c>
	keyboard.keyEvent = key_pressed();
 80017d8:	7033      	strb	r3, [r6, #0]
		if( KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback ) {
			KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback();
			machine_state_reset();
		}
	}
}
 80017da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ( debounceTimer == 0 ) {
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d104      	bne.n	80017ee <SW_KEYBOARD_EVENT+0x102>
				keyAction 	  = action_check;
 80017e4:	3202      	adds	r2, #2
 80017e6:	703a      	strb	r2, [r7, #0]
				debounceTimer = SHORT_MAX_TIME;
 80017e8:	328f      	adds	r2, #143	; 0x8f
 80017ea:	32ff      	adds	r2, #255	; 0xff
 80017ec:	801a      	strh	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT1, DEBUG_PIN1, 1 );
 80017ee:	2201      	movs	r2, #1
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	4835      	ldr	r0, [pc, #212]	; (80018c8 <SW_KEYBOARD_EVENT+0x1dc>)
 80017f4:	f7fe fe28 	bl	8000448 <gpio_pin_IMPULSES>
			break;
 80017f8:	0025      	movs	r5, r4
 80017fa:	e7b3      	b.n	8001764 <SW_KEYBOARD_EVENT+0x78>
			if ( debounceTimer == 0 ) {
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
 80017fe:	881a      	ldrh	r2, [r3, #0]
 8001800:	b291      	uxth	r1, r2
 8001802:	2a00      	cmp	r2, #0
 8001804:	d106      	bne.n	8001814 <SW_KEYBOARD_EVENT+0x128>
				keyAction 	  = action_repeat;
 8001806:	3204      	adds	r2, #4
 8001808:	703a      	strb	r2, [r7, #0]
				debounceTimer = MEDIUM_MAX_TIME;
 800180a:	32f1      	adds	r2, #241	; 0xf1
 800180c:	32ff      	adds	r2, #255	; 0xff
 800180e:	801a      	strh	r2, [r3, #0]
				repeatCounter = 0;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <SW_KEYBOARD_EVENT+0x1d8>)
 8001812:	7019      	strb	r1, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT1, DEBUG_PIN1, 2 );
 8001814:	2202      	movs	r2, #2
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	482b      	ldr	r0, [pc, #172]	; (80018c8 <SW_KEYBOARD_EVENT+0x1dc>)
 800181a:	f7fe fe15 	bl	8000448 <gpio_pin_IMPULSES>
			break;
 800181e:	e7a1      	b.n	8001764 <SW_KEYBOARD_EVENT+0x78>
			if ( debounceTimer == 0 ) {
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	2a00      	cmp	r2, #0
 8001826:	d10f      	bne.n	8001848 <SW_KEYBOARD_EVENT+0x15c>
				debounceTimer = REPEAT_TIME;
 8001828:	3264      	adds	r2, #100	; 0x64
 800182a:	801a      	strh	r2, [r3, #0]
				repeatCounter++;
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <SW_KEYBOARD_EVENT+0x1d8>)
 800182e:	7813      	ldrb	r3, [r2, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	7013      	strb	r3, [r2, #0]
				if ( repeatCounter == VLONG_TIME_CNT ) {
 8001836:	2b14      	cmp	r3, #20
 8001838:	d000      	beq.n	800183c <SW_KEYBOARD_EVENT+0x150>
					keyEvent = KEY_REPEAT;
 800183a:	2406      	movs	r4, #6
			gpio_pin_IMPULSES( DEBUG_PORT1, DEBUG_PIN1, 3 );
 800183c:	2203      	movs	r2, #3
 800183e:	2180      	movs	r1, #128	; 0x80
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 5 );
 8001840:	4821      	ldr	r0, [pc, #132]	; (80018c8 <SW_KEYBOARD_EVENT+0x1dc>)
 8001842:	f7fe fe01 	bl	8000448 <gpio_pin_IMPULSES>
			break;
 8001846:	e7c2      	b.n	80017ce <SW_KEYBOARD_EVENT+0xe2>
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001848:	2400      	movs	r4, #0
 800184a:	e7f7      	b.n	800183c <SW_KEYBOARD_EVENT+0x150>
			if ( debounceTimer == 0 ) {
 800184c:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <SW_KEYBOARD_EVENT+0x1d4>)
	KEY_EVENT_t keyEvent = NO_EVENT;
 800184e:	002c      	movs	r4, r5
			if ( debounceTimer == 0 ) {
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	2a00      	cmp	r2, #0
 8001854:	d108      	bne.n	8001868 <SW_KEYBOARD_EVENT+0x17c>
				if ( timeFallRise > SHORT_MIN_TIME ) {
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <SW_KEYBOARD_EVENT+0x1c4>)
 8001858:	8811      	ldrh	r1, [r2, #0]
 800185a:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <SW_KEYBOARD_EVENT+0x1c8>)
 800185c:	2964      	cmp	r1, #100	; 0x64
 800185e:	d906      	bls.n	800186e <SW_KEYBOARD_EVENT+0x182>
					keyEvent = SHORT_PRESS;
 8001860:	2401      	movs	r4, #1
					speedPressCounter = 0;
 8001862:	7015      	strb	r5, [r2, #0]
				keyAction = action_idle;
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 4 );
 8001868:	2204      	movs	r2, #4
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 5 );
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	e7e8      	b.n	8001840 <SW_KEYBOARD_EVENT+0x154>
					if ( speedPressCounter == EDGE_COUNTER ) {
 800186e:	7811      	ldrb	r1, [r2, #0]
 8001870:	2904      	cmp	r1, #4
 8001872:	d1f7      	bne.n	8001864 <SW_KEYBOARD_EVENT+0x178>
						if ( timeFall2Rise < MULTI_PRESS_TIME ) {
 8001874:	20fa      	movs	r0, #250	; 0xfa
 8001876:	4910      	ldr	r1, [pc, #64]	; (80018b8 <SW_KEYBOARD_EVENT+0x1cc>)
 8001878:	0040      	lsls	r0, r0, #1
 800187a:	880f      	ldrh	r7, [r1, #0]
 800187c:	0029      	movs	r1, r5
 800187e:	4287      	cmp	r7, r0
 8001880:	d200      	bcs.n	8001884 <SW_KEYBOARD_EVENT+0x198>
							keyEvent = DOUBLE_PRESS;
 8001882:	2405      	movs	r4, #5
						speedPressCounter = 0;
 8001884:	7011      	strb	r1, [r2, #0]
 8001886:	e7ed      	b.n	8001864 <SW_KEYBOARD_EVENT+0x178>
	keyboard.keyEvent = key_pressed();
 8001888:	7034      	strb	r4, [r6, #0]
	if ( keyboard.keyEvent != NO_EVENT ) {
 800188a:	2c00      	cmp	r4, #0
 800188c:	d0a5      	beq.n	80017da <SW_KEYBOARD_EVENT+0xee>
		if( KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback ) {
 800188e:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <SW_KEYBOARD_EVENT+0x1e0>)
 8001890:	3b01      	subs	r3, #1
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	18d3      	adds	r3, r2, r3
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d09e      	beq.n	80017da <SW_KEYBOARD_EVENT+0xee>
			KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback();
 800189c:	4798      	blx	r3
	keyboard.keyEvent = NO_EVENT;
 800189e:	2300      	movs	r3, #0
 80018a0:	7033      	strb	r3, [r6, #0]
	keyboard.keyCoded = NO_KEY;
 80018a2:	7073      	strb	r3, [r6, #1]
}
 80018a4:	e799      	b.n	80017da <SW_KEYBOARD_EVENT+0xee>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	2000027d 	.word	0x2000027d
 80018ac:	2000027b 	.word	0x2000027b
 80018b0:	20000282 	.word	0x20000282
 80018b4:	2000027f 	.word	0x2000027f
 80018b8:	20000280 	.word	0x20000280
 80018bc:	2000027a 	.word	0x2000027a
 80018c0:	200002ac 	.word	0x200002ac
 80018c4:	2000027e 	.word	0x2000027e
 80018c8:	48000400 	.word	0x48000400
 80018cc:	08002bc4 	.word	0x08002bc4

080018d0 <ds3231_get_datetime>:
}
/*************************************************************************/

/************************* Read from DS3231 ******************************/
void ds3231_get_datetime( void ) {
	i2cRxBuff.memAddress = DS3231_TIME_ADDR; 	// memory address to read
 80018d0:	2300      	movs	r3, #0
void ds3231_get_datetime( void ) {
 80018d2:	b510      	push	{r4, lr}
	i2cRxBuff.memAddress = DS3231_TIME_ADDR; 	// memory address to read
 80018d4:	4903      	ldr	r1, [pc, #12]	; (80018e4 <ds3231_get_datetime+0x14>)
	sw_i2c_dma_get_buff( DS3231_I2C_ADDR, (uint8_t *)&i2cRxBuff,
 80018d6:	2207      	movs	r2, #7
	i2cRxBuff.memAddress = DS3231_TIME_ADDR; 	// memory address to read
 80018d8:	700b      	strb	r3, [r1, #0]
	sw_i2c_dma_get_buff( DS3231_I2C_ADDR, (uint8_t *)&i2cRxBuff,
 80018da:	2068      	movs	r0, #104	; 0x68
 80018dc:	3301      	adds	r3, #1
 80018de:	f000 f95b 	bl	8001b98 <sw_i2c_dma_get_buff>
						 7, I2C_ADDRESS_BYTE );
}
 80018e2:	bd10      	pop	{r4, pc}
 80018e4:	20000284 	.word	0x20000284

080018e8 <EXTI2_3_IRQHandler>:
	if (EXTI->PR & EXTI_PR_PR3) {
 80018e8:	2208      	movs	r2, #8
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <EXTI2_3_IRQHandler+0x14>)
void EXTI2_3_IRQHandler(void) {
 80018ec:	b510      	push	{r4, lr}
	if (EXTI->PR & EXTI_PR_PR3) {
 80018ee:	6959      	ldr	r1, [r3, #20]
 80018f0:	4211      	tst	r1, r2
 80018f2:	d002      	beq.n	80018fa <EXTI2_3_IRQHandler+0x12>
		EXTI->PR = EXTI_PR_PR3;
 80018f4:	615a      	str	r2, [r3, #20]
		ds3231_get_datetime();
 80018f6:	f7ff ffeb 	bl	80018d0 <ds3231_get_datetime>
}
 80018fa:	bd10      	pop	{r4, pc}
 80018fc:	40010400 	.word	0x40010400

08001900 <STM32F051_Rtc_init_on>:
	RTC->WPR 	= 0x64; 									/* (9) */
}

/*********************** Base functions *******************************/
static void STM32F051_Rtc_init_on(void) {
	RTC->ISR |= RTC_ISR_INIT;		// enter initialization mode.
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <STM32F051_Rtc_init_on+0x14>)
 8001904:	68d9      	ldr	r1, [r3, #12]
 8001906:	430a      	orrs	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
	while ( (RTC->ISR & RTC_ISR_INITF ) != RTC_ISR_INITF) {}
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	68d9      	ldr	r1, [r3, #12]
 800190e:	4211      	tst	r1, r2
 8001910:	d0fc      	beq.n	800190c <STM32F051_Rtc_init_on+0xc>
}
 8001912:	4770      	bx	lr
 8001914:	40002800 	.word	0x40002800

08001918 <STM32F051_Rtc_protect_off>:
static void STM32F051_Rtc_init_off(void) {
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
}

static void STM32F051_Rtc_protect_off(void) {
	PWR->CR	|= PWR_CR_DBP;			// Write protection OFF
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <STM32F051_Rtc_protect_off+0x18>)
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	6811      	ldr	r1, [r2, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	6013      	str	r3, [r2, #0]
	RTC->WPR = WPR_KEY1;			// Unlock the write protection
 8001924:	22ca      	movs	r2, #202	; 0xca
 8001926:	4b03      	ldr	r3, [pc, #12]	; (8001934 <STM32F051_Rtc_protect_off+0x1c>)
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = WPR_KEY2;			// on all the RTC registers
 800192a:	3a77      	subs	r2, #119	; 0x77
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800192e:	4770      	bx	lr
 8001930:	40007000 	.word	0x40007000
 8001934:	40002800 	.word	0x40002800

08001938 <STM32F051_Rtc_protect_on>:
static void STM32F051_Rtc_protect_on(void) {
	PWR->CR	 &= ~PWR_CR_DBP;		// Write protection ON
 8001938:	4a02      	ldr	r2, [pc, #8]	; (8001944 <STM32F051_Rtc_protect_on+0xc>)
 800193a:	4903      	ldr	r1, [pc, #12]	; (8001948 <STM32F051_Rtc_protect_on+0x10>)
 800193c:	6813      	ldr	r3, [r2, #0]
 800193e:	400b      	ands	r3, r1
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	4770      	bx	lr
 8001944:	40007000 	.word	0x40007000
 8001948:	fffffeff 	.word	0xfffffeff

0800194c <STM32F051_Rtc_Clock_Config>:
/**********************************************************************/

/**********************************************************************/
void STM32F051_Rtc_Clock_Config( void ) {
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800194c:	2380      	movs	r3, #128	; 0x80
void STM32F051_Rtc_Clock_Config( void ) {
 800194e:	b510      	push	{r4, lr}
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001950:	4c11      	ldr	r4, [pc, #68]	; (8001998 <STM32F051_Rtc_Clock_Config+0x4c>)
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	69e2      	ldr	r2, [r4, #28]
 8001956:	4313      	orrs	r3, r2
 8001958:	61e3      	str	r3, [r4, #28]

	STM32F051_Rtc_protect_off();
 800195a:	f7ff ffdd 	bl	8001918 <STM32F051_Rtc_protect_off>

	RCC->BDCR &= ~RCC_BDCR_RTCEN;	// RTC clock enabled
 800195e:	6a23      	ldr	r3, [r4, #32]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <STM32F051_Rtc_Clock_Config+0x50>)
 8001962:	4013      	ands	r3, r2
 8001964:	6223      	str	r3, [r4, #32]

#if RTC_CLOCK == LSI_CLOCK
	RCC->CSR |= RCC_CSR_LSION;
	while ( (RCC->CSR & RCC_CSR_LSIRDY) == 0 ) {}
#elif RTC_CLOCK == LSE_CLOCK
	RCC->BDCR |= RCC_BDCR_LSEON;	// LSE 32kHz clock enabled
 8001966:	2301      	movs	r3, #1
 8001968:	6a22      	ldr	r2, [r4, #32]
 800196a:	4313      	orrs	r3, r2
 800196c:	6223      	str	r3, [r4, #32]
	while ( (RCC->BDCR & RCC_BDCR_LSERDY) == 0 ) {}
 800196e:	2302      	movs	r3, #2
 8001970:	6a22      	ldr	r2, [r4, #32]
 8001972:	421a      	tst	r2, r3
 8001974:	d0fc      	beq.n	8001970 <STM32F051_Rtc_Clock_Config+0x24>
#endif

	RCC->BDCR &= ~RCC_BDCR_RTCSEL;		// Reset oscillator selection
 8001976:	6a23      	ldr	r3, [r4, #32]
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <STM32F051_Rtc_Clock_Config+0x54>)
 800197a:	4013      	ands	r3, r2
 800197c:	6223      	str	r3, [r4, #32]

#if RTC_CLOCK == LSI_CLOCK
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSI;	// Internal 40KHz oscillator clock
#elif RTC_CLOCK == LSE_CLOCK
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;	// External 32KHz oscillator clock
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	6a22      	ldr	r2, [r4, #32]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4313      	orrs	r3, r2
 8001986:	6223      	str	r3, [r4, #32]
#endif
	RCC->BDCR |= RCC_BDCR_RTCEN;		// RTC clock enabled
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	6a22      	ldr	r2, [r4, #32]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	4313      	orrs	r3, r2
 8001990:	6223      	str	r3, [r4, #32]

	STM32F051_Rtc_protect_on();
 8001992:	f7ff ffd1 	bl	8001938 <STM32F051_Rtc_protect_on>

	// Activate the watchdog
	// Be sure reset watchdog unless 1s
//	configure_IWDG();
}
 8001996:	bd10      	pop	{r4, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	ffff7fff 	.word	0xffff7fff
 80019a0:	fffffcff 	.word	0xfffffcff

080019a4 <STM32F051_Rtc_Config>:
/*************************************************************************/

/*************************************************************************/
uint8_t  STM32F051_Rtc_Config( uint8_t resetRtcDomain ) {
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	4c0e      	ldr	r4, [pc, #56]	; (80019e0 <STM32F051_Rtc_Config+0x3c>)
 80019a8:	4d0e      	ldr	r5, [pc, #56]	; (80019e4 <STM32F051_Rtc_Config+0x40>)

	if ( resetRtcDomain == 1) {
 80019aa:	2801      	cmp	r0, #1
 80019ac:	d003      	beq.n	80019b6 <STM32F051_Rtc_Config+0x12>

	}
	else
	if ( NO_POWER_CHECK == RTC->BKP4R ) {
 80019ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
		return RTC_CONFIG_NOT_RESET;
 80019b0:	2000      	movs	r0, #0
	if ( NO_POWER_CHECK == RTC->BKP4R ) {
 80019b2:	42ab      	cmp	r3, r5
 80019b4:	d012      	beq.n	80019dc <STM32F051_Rtc_Config+0x38>
	}
	STM32F051_Rtc_protect_off();
 80019b6:	f7ff ffaf 	bl	8001918 <STM32F051_Rtc_protect_off>
	STM32F051_Rtc_init_on();
 80019ba:	f7ff ffa1 	bl	8001900 <STM32F051_Rtc_init_on>
	// 40KHz/320/256 = 1Hz
	RTC->PRER = (128-1) << RTC_PRER_PREDIV_A_Pos |	// The asynchronous prescaler division factor is set to 128
				(320-1) << RTC_PRER_PREDIV_S_Pos;	// and the synchronous division factor to 256
#else
	// 32KHz/128/256 = 1Hz
	RTC->PRER = (128-1) << RTC_PRER_PREDIV_A_Pos |	// The asynchronous prescaler division factor is set to 128
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <STM32F051_Rtc_Config+0x44>)
 80019c0:	6123      	str	r3, [r4, #16]
				(256-1) << RTC_PRER_PREDIV_S_Pos;	// and the synchronous division factor to 256
#endif

//	RTC->CR |= RTC_CR_FMT;		// 12 hours format: AM/PM
	RTC->CR	|= RTC_CR_ADD1H;	// Add 1 hour (summer time change)
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	68a2      	ldr	r2, [r4, #8]
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	4313      	orrs	r3, r2
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 80019ca:	2280      	movs	r2, #128	; 0x80
	RTC->CR	|= RTC_CR_ADD1H;	// Add 1 hour (summer time change)
 80019cc:	60a3      	str	r3, [r4, #8]


	RTC->BKP4R = NO_POWER_CHECK;// Set magic number to backup register
 80019ce:	6625      	str	r5, [r4, #96]	; 0x60
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 80019d0:	68e3      	ldr	r3, [r4, #12]
 80019d2:	4393      	bics	r3, r2
 80019d4:	60e3      	str	r3, [r4, #12]

	STM32F051_Rtc_init_off();
	STM32F051_Rtc_protect_on();
 80019d6:	f7ff ffaf 	bl	8001938 <STM32F051_Rtc_protect_on>

//	RTC->CR |= RTC_CR_TSIE;
//	NVIC_EnableIRQ( RTC_IRQn );

	return RTC_CONFIG_RESET;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40002800 	.word	0x40002800
 80019e4:	0000aaaa 	.word	0x0000aaaa
 80019e8:	007f00ff 	.word	0x007f00ff

080019ec <STM32F051_Rtc_Get_Time>:
/*************************************************************************/
//void RTC_IRQHandler( void ) {
//
//}
/**************************************** Get time from RTC *************************************/
void STM32F051_Rtc_Get_Time( uint8_t * bufferPTR ) {
 80019ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = RTC->TR & (RTC_TR_ST_Msk | RTC_TR_SU_Msk);
 80019ee:	267f      	movs	r6, #127	; 0x7f
 80019f0:	4d09      	ldr	r5, [pc, #36]	; (8001a18 <STM32F051_Rtc_Get_Time+0x2c>)
void STM32F051_Rtc_Get_Time( uint8_t * bufferPTR ) {
 80019f2:	0004      	movs	r4, r0
	uint32_t tmp = RTC->TR & (RTC_TR_ST_Msk | RTC_TR_SU_Msk);
 80019f4:	6828      	ldr	r0, [r5, #0]
	*(bufferPTR + 0) = sw_bcd2dec( (uint8_t) tmp );							// Seconds
 80019f6:	4030      	ands	r0, r6
 80019f8:	f000 f88a 	bl	8001b10 <sw_bcd2dec>
 80019fc:	7020      	strb	r0, [r4, #0]

	tmp = RTC->TR & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk);
 80019fe:	6828      	ldr	r0, [r5, #0]
	*(bufferPTR + 1) = sw_bcd2dec( (uint8_t) (tmp >> RTC_TR_MNU_Pos ) );	// Minutes
 8001a00:	0a00      	lsrs	r0, r0, #8
 8001a02:	4030      	ands	r0, r6
 8001a04:	f000 f884 	bl	8001b10 <sw_bcd2dec>
 8001a08:	7060      	strb	r0, [r4, #1]

	tmp = RTC->TR & (RTC_TR_HT_Msk | RTC_TR_HU_Msk);
 8001a0a:	6828      	ldr	r0, [r5, #0]
	*(bufferPTR + 2) = sw_bcd2dec( (uint8_t) (tmp >> RTC_TR_HU_Pos) );		// Hours
 8001a0c:	0280      	lsls	r0, r0, #10
 8001a0e:	0e80      	lsrs	r0, r0, #26
 8001a10:	f000 f87e 	bl	8001b10 <sw_bcd2dec>
 8001a14:	70a0      	strb	r0, [r4, #2]
}
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	40002800 	.word	0x40002800

08001a1c <STM32F051_Rtc_Get_Date>:
/*************************************************************************************************/
/**************************************** Get date from RTC *************************************/
void STM32F051_Rtc_Get_Date( uint8_t * bufferPTR ) {
 8001a1c:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = RTC->DR & (RTC_DR_WDU_Msk);
 8001a1e:	4d0d      	ldr	r5, [pc, #52]	; (8001a54 <STM32F051_Rtc_Get_Date+0x38>)
void STM32F051_Rtc_Get_Date( uint8_t * bufferPTR ) {
 8001a20:	0004      	movs	r4, r0
	uint32_t tmp = RTC->DR & (RTC_DR_WDU_Msk);
 8001a22:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 3) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_WDU_Pos) );		// Days of week
 8001a24:	0400      	lsls	r0, r0, #16
 8001a26:	0f40      	lsrs	r0, r0, #29
 8001a28:	f000 f872 	bl	8001b10 <sw_bcd2dec>

	tmp = RTC->DR & (RTC_DR_DT_Msk | RTC_DR_DU_Msk);
	*(bufferPTR + 4) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_DU_Pos) );		// Days
 8001a2c:	233f      	movs	r3, #63	; 0x3f
	*(bufferPTR + 3) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_WDU_Pos) );		// Days of week
 8001a2e:	70e0      	strb	r0, [r4, #3]
	tmp = RTC->DR & (RTC_DR_DT_Msk | RTC_DR_DU_Msk);
 8001a30:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 4) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_DU_Pos) );		// Days
 8001a32:	4018      	ands	r0, r3
 8001a34:	f000 f86c 	bl	8001b10 <sw_bcd2dec>
 8001a38:	7120      	strb	r0, [r4, #4]

	tmp = RTC->DR & (RTC_DR_MT_Msk | RTC_DR_MU_Msk);
 8001a3a:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 5) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_MU_Pos) );		// Months
 8001a3c:	04c0      	lsls	r0, r0, #19
 8001a3e:	0ec0      	lsrs	r0, r0, #27
 8001a40:	f000 f866 	bl	8001b10 <sw_bcd2dec>
 8001a44:	7160      	strb	r0, [r4, #5]

	tmp = RTC->DR & (RTC_DR_YT_Msk | RTC_DR_YU_Msk);
 8001a46:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 6) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_YU_Pos) );		// Years
 8001a48:	0c00      	lsrs	r0, r0, #16
 8001a4a:	b2c0      	uxtb	r0, r0
 8001a4c:	f000 f860 	bl	8001b10 <sw_bcd2dec>
 8001a50:	71a0      	strb	r0, [r4, #6]
}
 8001a52:	bd70      	pop	{r4, r5, r6, pc}
 8001a54:	40002800 	.word	0x40002800

08001a58 <STM32F051_Rtc_Set_Time>:
/*************************************************************************************************/

/**************************************** Upload time to RTC *************************************/
void STM32F051_Rtc_Set_Time( uint8_t * bufferPTR ) {
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	0006      	movs	r6, r0
	uint32_t tmp = 0;
	tmp =  (uint32_t)sw_dec2bcd( *(bufferPTR + 0) ) << RTC_TR_SU_Pos;		// Seconds
 8001a5c:	7800      	ldrb	r0, [r0, #0]
 8001a5e:	f000 f849 	bl	8001af4 <sw_dec2bcd>
 8001a62:	0005      	movs	r5, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 1) ) << RTC_TR_MNU_Pos;		// Minutes
 8001a64:	7870      	ldrb	r0, [r6, #1]
 8001a66:	f000 f845 	bl	8001af4 <sw_dec2bcd>
 8001a6a:	0004      	movs	r4, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 2) ) << RTC_TR_HU_Pos;		// Hours
 8001a6c:	78b0      	ldrb	r0, [r6, #2]
 8001a6e:	f000 f841 	bl	8001af4 <sw_dec2bcd>
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 1) ) << RTC_TR_MNU_Pos;		// Minutes
 8001a72:	0224      	lsls	r4, r4, #8
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 2) ) << RTC_TR_HU_Pos;		// Hours
 8001a74:	0400      	lsls	r0, r0, #16
 8001a76:	4304      	orrs	r4, r0

	STM32F051_Rtc_protect_off();
 8001a78:	f7ff ff4e 	bl	8001918 <STM32F051_Rtc_protect_off>
	STM32F051_Rtc_init_on();
 8001a7c:	f7ff ff40 	bl	8001900 <STM32F051_Rtc_init_on>
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001a80:	2180      	movs	r1, #128	; 0x80

	RTC->TR = tmp;															// Write time to RTC
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <STM32F051_Rtc_Set_Time+0x3c>)
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 2) ) << RTC_TR_HU_Pos;		// Hours
 8001a84:	432c      	orrs	r4, r5
	RTC->TR = tmp;															// Write time to RTC
 8001a86:	601c      	str	r4, [r3, #0]
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	438a      	bics	r2, r1
 8001a8c:	60da      	str	r2, [r3, #12]
	STM32F051_Rtc_init_off();
	STM32F051_Rtc_protect_on();
 8001a8e:	f7ff ff53 	bl	8001938 <STM32F051_Rtc_protect_on>
}
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	40002800 	.word	0x40002800

08001a98 <STM32F051_Rtc_Set_Date>:
/*************************************************************************************************/
/**************************************** Upload date to RTC *************************************/
void STM32F051_Rtc_Set_Date( uint8_t * bufferPTR ) {
 8001a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9a:	0006      	movs	r6, r0
	uint32_t tmp = 0;
	tmp =  (uint32_t)sw_dec2bcd( *(bufferPTR + 3) ) << RTC_DR_WDU_Pos;		// Days of week
 8001a9c:	78c0      	ldrb	r0, [r0, #3]
 8001a9e:	f000 f829 	bl	8001af4 <sw_dec2bcd>
 8001aa2:	0005      	movs	r5, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 4) ) << RTC_DR_DU_Pos;		// Days
 8001aa4:	7930      	ldrb	r0, [r6, #4]
 8001aa6:	f000 f825 	bl	8001af4 <sw_dec2bcd>
 8001aaa:	0007      	movs	r7, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 5) ) << RTC_DR_MU_Pos;		// Months
 8001aac:	7970      	ldrb	r0, [r6, #5]
 8001aae:	f000 f821 	bl	8001af4 <sw_dec2bcd>
 8001ab2:	0204      	lsls	r4, r0, #8
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 6) ) << RTC_DR_YU_Pos;		// Years
 8001ab4:	79b0      	ldrb	r0, [r6, #6]
 8001ab6:	f000 f81d 	bl	8001af4 <sw_dec2bcd>
	tmp =  (uint32_t)sw_dec2bcd( *(bufferPTR + 3) ) << RTC_DR_WDU_Pos;		// Days of week
 8001aba:	036d      	lsls	r5, r5, #13
 8001abc:	432c      	orrs	r4, r5
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 6) ) << RTC_DR_YU_Pos;		// Years
 8001abe:	0400      	lsls	r0, r0, #16
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 5) ) << RTC_DR_MU_Pos;		// Months
 8001ac0:	433c      	orrs	r4, r7
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 6) ) << RTC_DR_YU_Pos;		// Years
 8001ac2:	4304      	orrs	r4, r0

	STM32F051_Rtc_protect_off();
 8001ac4:	f7ff ff28 	bl	8001918 <STM32F051_Rtc_protect_off>
	STM32F051_Rtc_init_on();
 8001ac8:	f7ff ff1a 	bl	8001900 <STM32F051_Rtc_init_on>
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001acc:	2180      	movs	r1, #128	; 0x80
	RTC->DR = tmp;															// Write date to RTC
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <STM32F051_Rtc_Set_Date+0x48>)
 8001ad0:	605c      	str	r4, [r3, #4]
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
	STM32F051_Rtc_init_off();
	STM32F051_Rtc_protect_on();
 8001ad8:	f7ff ff2e 	bl	8001938 <STM32F051_Rtc_protect_on>
}
 8001adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	40002800 	.word	0x40002800

08001ae4 <RTC_IRQHandler>:
/*************************************************************************************************/

void RTC_IRQHandler( void ) {
	static uint8_t simon;
	simon++;
 8001ae4:	4a02      	ldr	r2, [pc, #8]	; (8001af0 <RTC_IRQHandler+0xc>)
 8001ae6:	7813      	ldrb	r3, [r2, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	7013      	strb	r3, [r2, #0]
}
 8001aec:	4770      	bx	lr
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	2000028c 	.word	0x2000028c

08001af4 <sw_dec2bcd>:


#include "sw_mcu_conf.h"


uint8_t sw_dec2bcd( uint8_t dec ) {
 8001af4:	b570      	push	{r4, r5, r6, lr}
	return ( (dec/10)<<4 ) | (dec % 10);
 8001af6:	210a      	movs	r1, #10
uint8_t sw_dec2bcd( uint8_t dec ) {
 8001af8:	0005      	movs	r5, r0
	return ( (dec/10)<<4 ) | (dec % 10);
 8001afa:	f7fe fb05 	bl	8000108 <__udivsi3>
 8001afe:	210a      	movs	r1, #10
 8001b00:	b2c4      	uxtb	r4, r0
 8001b02:	0028      	movs	r0, r5
 8001b04:	f7fe fb86 	bl	8000214 <__aeabi_uidivmod>
 8001b08:	0124      	lsls	r4, r4, #4
 8001b0a:	430c      	orrs	r4, r1
 8001b0c:	b2e0      	uxtb	r0, r4
}
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}

08001b10 <sw_bcd2dec>:
uint8_t sw_bcd2dec( uint8_t bcd ) {
	return (( ((bcd) >> 4) & 0x0F) * 10) + +((bcd) & 0x0F);
 8001b10:	0902      	lsrs	r2, r0, #4
uint8_t sw_bcd2dec( uint8_t bcd ) {
 8001b12:	0003      	movs	r3, r0
	return (( ((bcd) >> 4) & 0x0F) * 10) + +((bcd) & 0x0F);
 8001b14:	200a      	movs	r0, #10
 8001b16:	4350      	muls	r0, r2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	b2c0      	uxtb	r0, r0
}
 8001b20:	4770      	bx	lr
	...

08001b24 <sw_i2c_dma_send_buff>:
	}
}
/************************************************************************/

/*********************************************************************************/
void sw_i2c_dma_send_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff ) {
 8001b24:	b530      	push	{r4, r5, lr}
	if (i2cErrorOcurred) return;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <sw_i2c_dma_send_buff+0x5c>)
void sw_i2c_dma_send_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff ) {
 8001b28:	0004      	movs	r4, r0
	if (i2cErrorOcurred) return;
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d122      	bne.n	8001b76 <sw_i2c_dma_send_buff+0x52>
	i2c->CR2 = (i2c->CR2 &											// Clear actual values
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <sw_i2c_dma_send_buff+0x60>)
 8001b32:	4d15      	ldr	r5, [pc, #84]	; (8001b88 <sw_i2c_dma_send_buff+0x64>)
 8001b34:	6858      	ldr	r0, [r3, #4]
			  |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS				// Set slave address
 8001b36:	0064      	lsls	r4, r4, #1
	i2c->CR2 = (i2c->CR2 &											// Clear actual values
 8001b38:	4028      	ands	r0, r5
			  |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS				// Set slave address
 8001b3a:	4320      	orrs	r0, r4
			  |(uint32_t)sizeBuff  << I2C_CR2_NBYTES_Pos			// Bytes to send
 8001b3c:	b2d4      	uxtb	r4, r2
 8001b3e:	0424      	lsls	r4, r4, #16
			  |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS				// Set slave address
 8001b40:	4320      	orrs	r0, r4
	i2c->CR2 = (i2c->CR2 &											// Clear actual values
 8001b42:	6058      	str	r0, [r3, #4]

	sw_i2c_master_transmit_mode( i2c, slaveAddr, sizeBuff );
	if (i2cAutoEnd == 1)
 8001b44:	4811      	ldr	r0, [pc, #68]	; (8001b8c <sw_i2c_dma_send_buff+0x68>)
 8001b46:	7800      	ldrb	r0, [r0, #0]
 8001b48:	2801      	cmp	r0, #1
 8001b4a:	d115      	bne.n	8001b78 <sw_i2c_dma_send_buff+0x54>
		i2c->CR2 |= I2C_CR2_AUTOEND;						// Auto STOP at the end of frame
 8001b4c:	2080      	movs	r0, #128	; 0x80
 8001b4e:	685c      	ldr	r4, [r3, #4]
 8001b50:	0480      	lsls	r0, r0, #18
 8001b52:	4320      	orrs	r0, r4
	else
		i2c->CR2 &= ~I2C_CR2_AUTOEND;						// No STOP at the end of frame
 8001b54:	6058      	str	r0, [r3, #4]


	DMA1_Channel6->CMAR	 = (uint32_t)( (uint8_t *)buffPtr );
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <sw_i2c_dma_send_buff+0x6c>)
 8001b58:	60c1      	str	r1, [r0, #12]
	DMA1_Channel6->CNDTR = sizeBuff;
 8001b5a:	6042      	str	r2, [r0, #4]

//	TX transfer start
	i2c->CR2 |= ( sizeBuff << I2C_CR2_NBYTES_Pos);
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	0412      	lsls	r2, r2, #16
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]

	DMA1_Channel6->CCR  |= DMA_CCR_EN;
 8001b64:	2201      	movs	r2, #1
 8001b66:	6801      	ldr	r1, [r0, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	6002      	str	r2, [r0, #0]
	i2c->CR2 			|= I2C_CR2_START;
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	0192      	lsls	r2, r2, #6
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]
}
 8001b76:	bd30      	pop	{r4, r5, pc}
		i2c->CR2 &= ~I2C_CR2_AUTOEND;						// No STOP at the end of frame
 8001b78:	6858      	ldr	r0, [r3, #4]
 8001b7a:	4c06      	ldr	r4, [pc, #24]	; (8001b94 <sw_i2c_dma_send_buff+0x70>)
 8001b7c:	4020      	ands	r0, r4
 8001b7e:	e7e9      	b.n	8001b54 <sw_i2c_dma_send_buff+0x30>
 8001b80:	2000028d 	.word	0x2000028d
 8001b84:	40005400 	.word	0x40005400
 8001b88:	ff00f800 	.word	0xff00f800
 8001b8c:	20000028 	.word	0x20000028
 8001b90:	4002006c 	.word	0x4002006c
 8001b94:	fdffffff 	.word	0xfdffffff

08001b98 <sw_i2c_dma_get_buff>:
/*********************************************************************************/

/*********************************************************************************/
void sw_i2c_dma_get_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff, uint8_t wordLength ) {
 8001b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (i2cErrorOcurred) return;
 8001b9a:	4f1a      	ldr	r7, [pc, #104]	; (8001c04 <sw_i2c_dma_get_buff+0x6c>)
void sw_i2c_dma_get_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff, uint8_t wordLength ) {
 8001b9c:	9301      	str	r3, [sp, #4]
	if (i2cErrorOcurred) return;
 8001b9e:	783b      	ldrb	r3, [r7, #0]
void sw_i2c_dma_get_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff, uint8_t wordLength ) {
 8001ba0:	0004      	movs	r4, r0
 8001ba2:	000d      	movs	r5, r1
 8001ba4:	9200      	str	r2, [sp, #0]
	if (i2cErrorOcurred) return;
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d12a      	bne.n	8001c00 <sw_i2c_dma_get_buff+0x68>

// Send address to slave -------------------
	i2cAutoEnd = 0;
 8001baa:	4e17      	ldr	r6, [pc, #92]	; (8001c08 <sw_i2c_dma_get_buff+0x70>)
 8001bac:	7033      	strb	r3, [r6, #0]
	sw_i2c_dma_send_buff( slaveAddr, buffPtr, wordLength );
 8001bae:	466b      	mov	r3, sp
 8001bb0:	889a      	ldrh	r2, [r3, #4]
 8001bb2:	f7ff ffb7 	bl	8001b24 <sw_i2c_dma_send_buff>
	i2cAutoEnd = 1;
 8001bb6:	2301      	movs	r3, #1
// -----------------------------------------
	uint32_t delay = 10000;
	while( (i2c->ISR & I2C_ISR_TC) == 0 ) {
 8001bb8:	2140      	movs	r1, #64	; 0x40
	i2cAutoEnd = 1;
 8001bba:	7033      	strb	r3, [r6, #0]
	while( (i2c->ISR & I2C_ISR_TC) == 0 ) {
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <sw_i2c_dma_get_buff+0x74>)
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <sw_i2c_dma_get_buff+0x78>)
 8001bc0:	6998      	ldr	r0, [r3, #24]
 8001bc2:	4208      	tst	r0, r1
 8001bc4:	d017      	beq.n	8001bf6 <sw_i2c_dma_get_buff+0x5e>
			i2cErrorOcurred = 1;
			return;
		}
	}

	DMA1_Channel7->CNDTR = (uint32_t)sizeBuff;
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <sw_i2c_dma_get_buff+0x7c>)
 8001bc8:	9900      	ldr	r1, [sp, #0]
 8001bca:	6051      	str	r1, [r2, #4]
	DMA1_Channel7->CMAR	 = (uint32_t)( (uint8_t *)buffPtr + wordLength );
 8001bcc:	9901      	ldr	r1, [sp, #4]
 8001bce:	186d      	adds	r5, r5, r1
	DMA1_Channel7->CCR  |= DMA_CCR_EN;
 8001bd0:	2101      	movs	r1, #1
			 |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS		// Set slave address
 8001bd2:	408c      	lsls	r4, r1
	DMA1_Channel7->CMAR	 = (uint32_t)( (uint8_t *)buffPtr + wordLength );
 8001bd4:	60d5      	str	r5, [r2, #12]
	DMA1_Channel7->CCR  |= DMA_CCR_EN;
 8001bd6:	6810      	ldr	r0, [r2, #0]
 8001bd8:	4308      	orrs	r0, r1
 8001bda:	6010      	str	r0, [r2, #0]
	i2c->CR2 = (i2c->CR2 & 									// Clear actual values
 8001bdc:	685a      	ldr	r2, [r3, #4]
			 |I2C_CR2_RD_WRN								// Receive mode
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <sw_i2c_dma_get_buff+0x80>)
 8001be0:	4002      	ands	r2, r0
			 |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS		// Set slave address
 8001be2:	4314      	orrs	r4, r2
			 |(uint32_t)sizeBuff  << I2C_CR2_NBYTES_Pos		// Bytes to send
 8001be4:	466a      	mov	r2, sp
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	0412      	lsls	r2, r2, #16
			 |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS		// Set slave address
 8001bea:	4314      	orrs	r4, r2
			 |I2C_CR2_START
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <sw_i2c_dma_get_buff+0x84>)
 8001bee:	4314      	orrs	r4, r2
	i2c->CR2 = (i2c->CR2 & 									// Clear actual values
 8001bf0:	605c      	str	r4, [r3, #4]
	i2cAutoEnd = 1;
 8001bf2:	7031      	strb	r1, [r6, #0]
}
 8001bf4:	e004      	b.n	8001c00 <sw_i2c_dma_get_buff+0x68>
		if (delay-- == 0 ) 	{
 8001bf6:	3a01      	subs	r2, #1
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d1e1      	bne.n	8001bc0 <sw_i2c_dma_get_buff+0x28>
			i2cErrorOcurred = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	703b      	strb	r3, [r7, #0]

	sw_i2c_master_receive_mode( i2c, slaveAddr, sizeBuff );
}
 8001c00:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	2000028d 	.word	0x2000028d
 8001c08:	20000028 	.word	0x20000028
 8001c0c:	00002711 	.word	0x00002711
 8001c10:	40005400 	.word	0x40005400
 8001c14:	40020080 	.word	0x40020080
 8001c18:	ff00f800 	.word	0xff00f800
 8001c1c:	02002400 	.word	0x02002400

08001c20 <Rtc_Set_Time>:
	*day 		= ShowDateTime.day;
	*month 		= ShowDateTime.month;
	*year 		= ShowDateTime.year;
}

void Rtc_Set_Time( uint8_t hh, uint8_t mm, uint8_t ss ) {
 8001c20:	b510      	push	{r4, lr}
	SetDateTime.hh = hh;
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <Rtc_Set_Time+0x14>)
 8001c24:	7098      	strb	r0, [r3, #2]
	SetDateTime.mm = mm;
	SetDateTime.ss = ss;
	STM32F051_Rtc_Set_Time( (uint8_t *)&SetDateTime );
 8001c26:	0018      	movs	r0, r3
	SetDateTime.mm = mm;
 8001c28:	7059      	strb	r1, [r3, #1]
	SetDateTime.ss = ss;
 8001c2a:	701a      	strb	r2, [r3, #0]
	STM32F051_Rtc_Set_Time( (uint8_t *)&SetDateTime );
 8001c2c:	f7ff ff14 	bl	8001a58 <STM32F051_Rtc_Set_Time>
}
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	2000029c 	.word	0x2000029c

08001c38 <Rtc_Set_Date>:

void Rtc_Set_Date( uint8_t year, uint8_t month, uint8_t day, uint8_t dayOfWeek ) {
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	0004      	movs	r4, r0
	SetDateTime.year		= year;
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <Rtc_Set_Date+0x14>)
 8001c3e:	7184      	strb	r4, [r0, #6]
	SetDateTime.month		= month;
 8001c40:	7141      	strb	r1, [r0, #5]
	SetDateTime.day			= day;
 8001c42:	7102      	strb	r2, [r0, #4]
	SetDateTime.dayofweek	= dayOfWeek;
 8001c44:	70c3      	strb	r3, [r0, #3]

	STM32F051_Rtc_Set_Date( (uint8_t *)&SetDateTime );
 8001c46:	f7ff ff27 	bl	8001a98 <STM32F051_Rtc_Set_Date>
}
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	2000029c 	.word	0x2000029c

08001c50 <clock_init>:
/*************************************************************************/

/******** Zbiorcza funkcja do inicjalizacji zegara i peryferiów **********/
uint8_t clock_init( bool resetRtcDomain ) {
 8001c50:	b510      	push	{r4, lr}
 8001c52:	0004      	movs	r4, r0
//	i2cRtcExist = ds3231_init();
//	if (i2cRtcExist == TRUE) return FALSE;

	STM32F051_Rtc_Clock_Config();
 8001c54:	f7ff fe7a 	bl	800194c <STM32F051_Rtc_Clock_Config>
	if ( STM32F051_Rtc_Config( resetRtcDomain ) == RTC_CONFIG_RESET || resetRtcDomain == TRUE ) {
 8001c58:	0020      	movs	r0, r4
 8001c5a:	f7ff fea3 	bl	80019a4 <STM32F051_Rtc_Config>
 8001c5e:	2801      	cmp	r0, #1
 8001c60:	d002      	beq.n	8001c68 <clock_init+0x18>
		Rtc_Set_Time( 23, 59, 50 );		// 23:59:50, default time
		Rtc_Set_Date( 10, 1, 1, 5 );	// 2010.07.01 Friday, default date
		return TRUE;
	}
	return FALSE;
 8001c62:	2000      	movs	r0, #0
	if ( STM32F051_Rtc_Config( resetRtcDomain ) == RTC_CONFIG_RESET || resetRtcDomain == TRUE ) {
 8001c64:	2c01      	cmp	r4, #1
 8001c66:	d10b      	bne.n	8001c80 <clock_init+0x30>
		Rtc_Set_Time( 23, 59, 50 );		// 23:59:50, default time
 8001c68:	2232      	movs	r2, #50	; 0x32
 8001c6a:	213b      	movs	r1, #59	; 0x3b
 8001c6c:	2017      	movs	r0, #23
 8001c6e:	f7ff ffd7 	bl	8001c20 <Rtc_Set_Time>
		Rtc_Set_Date( 10, 1, 1, 5 );	// 2010.07.01 Friday, default date
 8001c72:	2201      	movs	r2, #1
 8001c74:	200a      	movs	r0, #10
 8001c76:	2305      	movs	r3, #5
 8001c78:	0011      	movs	r1, r2
 8001c7a:	f7ff ffdd 	bl	8001c38 <Rtc_Set_Date>
		return TRUE;
 8001c7e:	2001      	movs	r0, #1
	softTimer1 = 0;
}
 8001c80:	bd10      	pop	{r4, pc}
	...

08001c84 <rtc_get_date_time>:
/*************************************************************************/

/*************************************************************************/
void rtc_get_date_time( void ) {
 8001c84:	b510      	push	{r4, lr}
	STM32F051_Rtc_Get_Time( (uint8_t *)&ShowDateTime );
 8001c86:	4c04      	ldr	r4, [pc, #16]	; (8001c98 <rtc_get_date_time+0x14>)
 8001c88:	0020      	movs	r0, r4
 8001c8a:	f7ff feaf 	bl	80019ec <STM32F051_Rtc_Get_Time>
	STM32F051_Rtc_Get_Date( (uint8_t *)&ShowDateTime );
 8001c8e:	0020      	movs	r0, r4
 8001c90:	f7ff fec4 	bl	8001a1c <STM32F051_Rtc_Get_Date>
}
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	200002a3 	.word	0x200002a3

08001c9c <register_datetime_event_callback>:
/**************************************************************************/

/****************** Funkcje callback'owe i zdarzeniowe ********************/
void register_datetime_event_callback( void (*callback)( void ) ) {
	datetime_event_callback = callback;
 8001c9c:	4b01      	ldr	r3, [pc, #4]	; (8001ca4 <register_datetime_event_callback+0x8>)
 8001c9e:	6018      	str	r0, [r3, #0]
}
 8001ca0:	4770      	bx	lr
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	20000290 	.word	0x20000290

08001ca8 <SW_DATETIME_EVENT>:
void SW_DATETIME_EVENT( void ) {
	if ( softTimer1 == 0 ) {
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SW_DATETIME_EVENT+0x1c>)
void SW_DATETIME_EVENT( void ) {
 8001caa:	b510      	push	{r4, lr}
	if ( softTimer1 == 0 ) {
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d106      	bne.n	8001cc0 <SW_DATETIME_EVENT+0x18>
		softTimer1 = 250;
 8001cb2:	32fa      	adds	r2, #250	; 0xfa
 8001cb4:	801a      	strh	r2, [r3, #0]
		if( datetime_event_callback ) {
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SW_DATETIME_EVENT+0x20>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d000      	beq.n	8001cc0 <SW_DATETIME_EVENT+0x18>
			datetime_event_callback();
 8001cbe:	4798      	blx	r3
		}
	}
}
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	200002d4 	.word	0x200002d4
 8001cc8:	20000290 	.word	0x20000290

08001ccc <SystemClock_Config>:


/**********************************************************************/
static INLINE void rcc_FlashLatency_set( uint32_t latency ) {
	// Select flash latency
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <SystemClock_Config+0x78>)
#endif
}
/**********************************************************************/

/**********************************************************************/
void SystemClock_Config(void) {
 8001cd0:	b510      	push	{r4, lr}
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	4399      	bics	r1, r3
 8001cd6:	4319      	orrs	r1, r3
 8001cd8:	6011      	str	r1, [r2, #0]
	while ( (FLASH->ACR & FLASH_ACR_LATENCY) == 0 ) {}
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	4219      	tst	r1, r3
 8001cde:	d0fc      	beq.n	8001cda <SystemClock_Config+0xe>
	SET_BIT( RCC->CR, reg );
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <SystemClock_Config+0x7c>)
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <SystemClock_Config+0x80>)
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
	while ( (RCC->CR & checkClock ) == 0 ) {}
 8001cea:	2202      	movs	r2, #2
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	4211      	tst	r1, r2
 8001cf0:	d0fc      	beq.n	8001cec <SystemClock_Config+0x20>
	MODIFY_REG( RCC->CFGR,
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <SystemClock_Config+0x84>)
 8001cf6:	4011      	ands	r1, r2
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	0352      	lsls	r2, r2, #13
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
	SET_BIT( RCC->CFGR, source );
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
	SET_BIT( RCC->CR, RCC_CR_PLLON);
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	0452      	lsls	r2, r2, #17
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
	while (((RCC->CR) & RCC_CR_PLLRDY) == 0) {}
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0492      	lsls	r2, r2, #18
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	4211      	tst	r1, r2
 8001d1c:	d0fc      	beq.n	8001d18 <SystemClock_Config+0x4c>
	MODIFY_REG( RCC->CFGR,
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <SystemClock_Config+0x88>)
 8001d22:	400a      	ands	r2, r1
	MODIFY_REG( RCC->CFGR2,
 8001d24:	210f      	movs	r1, #15
	MODIFY_REG( RCC->CFGR,
 8001d26:	605a      	str	r2, [r3, #4]
	MODIFY_REG( RCC->CFGR2,
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT( RCC->CFGR, pllSource);
 8001d2e:	2202      	movs	r2, #2
 8001d30:	6859      	ldr	r1, [r3, #4]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
	while ( (RCC->CFGR & sourceCheck) == 0 ) {}
 8001d36:	2208      	movs	r2, #8
 8001d38:	6859      	ldr	r1, [r3, #4]
 8001d3a:	4211      	tst	r1, r2
 8001d3c:	d0fc      	beq.n	8001d38 <SystemClock_Config+0x6c>

	rcc_SystemClock_bus_presscaler();

	rcc_SystemClockMux_switch( RCC_CFGR_SW_PLL );

	SystemCoreClockUpdate();
 8001d3e:	f7fe fb2d 	bl	800039c <SystemCoreClockUpdate>
}
 8001d42:	bd10      	pop	{r4, pc}
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	00080001 	.word	0x00080001
 8001d50:	ffc3ffff 	.word	0xffc3ffff
 8001d54:	fffff80f 	.word	0xfffff80f

08001d58 <sw_spi_hw_init>:
}
#endif
/*************************************************************************************/

/* 8. ********************************************************************************/
void sw_spi_hw_init( const SPI_param_t * param ) {
 8001d58:	b570      	push	{r4, r5, r6, lr}
	if (hSPI->SPI == SPI1)
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
	if (hSPI->SPI == SPI2)
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001d5a:	2480      	movs	r4, #128	; 0x80
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <sw_spi_hw_init+0xb8>)
 8001d5e:	01e4      	lsls	r4, r4, #7
 8001d60:	69d3      	ldr	r3, [r2, #28]

	gpio_pin_cfg( hSPI->sck_port,  hSPI->sck_pin,  hSPI->alternateFun );
 8001d62:	2180      	movs	r1, #128	; 0x80
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001d64:	4323      	orrs	r3, r4
 8001d66:	61d3      	str	r3, [r2, #28]
	gpio_pin_cfg( hSPI->sck_port,  hSPI->sck_pin,  hSPI->alternateFun );
 8001d68:	2288      	movs	r2, #136	; 0x88
void sw_spi_hw_init( const SPI_param_t * param ) {
 8001d6a:	0005      	movs	r5, r0
	gpio_pin_cfg( hSPI->sck_port,  hSPI->sck_pin,  hSPI->alternateFun );
 8001d6c:	00d2      	lsls	r2, r2, #3
 8001d6e:	4829      	ldr	r0, [pc, #164]	; (8001e14 <sw_spi_hw_init+0xbc>)
 8001d70:	0189      	lsls	r1, r1, #6
 8001d72:	f7fe fb79 	bl	8000468 <gpio_pin_cfg>
	gpio_pin_cfg( hSPI->miso_port, hSPI->miso_pin, hSPI->alternateFun );
 8001d76:	2288      	movs	r2, #136	; 0x88
 8001d78:	0021      	movs	r1, r4
 8001d7a:	4826      	ldr	r0, [pc, #152]	; (8001e14 <sw_spi_hw_init+0xbc>)
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	f7fe fb73 	bl	8000468 <gpio_pin_cfg>
	gpio_pin_cfg( hSPI->mosi_port, hSPI->mosi_pin, hSPI->alternateFun );
 8001d82:	2288      	movs	r2, #136	; 0x88
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	4823      	ldr	r0, [pc, #140]	; (8001e14 <sw_spi_hw_init+0xbc>)
 8001d88:	00d2      	lsls	r2, r2, #3
 8001d8a:	0209      	lsls	r1, r1, #8
 8001d8c:	f7fe fb6c 	bl	8000468 <gpio_pin_cfg>
	SET_BIT( hSPI->SPI->CR1,
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	4c21      	ldr	r4, [pc, #132]	; (8001e18 <sw_spi_hw_init+0xc0>)
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	6822      	ldr	r2, [r4, #0]
	gpio_pin_cfg( SOFT_NSS_PORT, SOFT_NSS_PIN, gpio_mode_output_PP_HS );
 8001d98:	2180      	movs	r1, #128	; 0x80
	SET_BIT( hSPI->SPI->CR1,
 8001d9a:	4313      	orrs	r3, r2
	gpio_pin_cfg( SOFT_NSS_PORT, SOFT_NSS_PIN, gpio_mode_output_PP_HS );
 8001d9c:	2090      	movs	r0, #144	; 0x90
 8001d9e:	22b0      	movs	r2, #176	; 0xb0
	SET_BIT( hSPI->SPI->CR1,
 8001da0:	6023      	str	r3, [r4, #0]
	gpio_pin_cfg( SOFT_NSS_PORT, SOFT_NSS_PIN, gpio_mode_output_PP_HS );
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	0089      	lsls	r1, r1, #2
 8001da6:	05c0      	lsls	r0, r0, #23
 8001da8:	f7fe fb5e 	bl	8000468 <gpio_pin_cfg>
static inline void NSS_HI(void) { gpio_pin_HI( SOFT_NSS_PORT, SOFT_NSS_PIN ); }
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	2090      	movs	r0, #144	; 0x90
 8001db0:	0089      	lsls	r1, r1, #2
 8001db2:	05c0      	lsls	r0, r0, #23
 8001db4:	f7fe fb39 	bl	800042a <gpio_pin_HI>
	sw_spi_nss_mode();
#ifdef SPI_DMA
	spi_dma_init();
	hSPI->SPI->CR2 |= SPI_CR2_TXDMAEN;
#endif
	hSPI->SPI->CR1 |= SPI_CR1_MSTR					// Master Selection
 8001db8:	2314      	movs	r3, #20
 8001dba:	6822      	ldr	r2, [r4, #0]
			  	  | (spiFclk_8 << SPI_CR1_BR_Pos);

	if (param->msblsb == LSBFIRST) {
 8001dbc:	7829      	ldrb	r1, [r5, #0]
	hSPI->SPI->CR1 |= SPI_CR1_MSTR					// Master Selection
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	6023      	str	r3, [r4, #0]
	if (param->msblsb == LSBFIRST) {
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	2901      	cmp	r1, #1
 8001dc6:	d117      	bne.n	8001df8 <sw_spi_hw_init+0xa0>
		hSPI->SPI->CR1 |= SPI_CR1_LSBFIRST;
 8001dc8:	6821      	ldr	r1, [r4, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	6022      	str	r2, [r4, #0]
	} else {
		hSPI->SPI->CR1 &= ~SPI_CR1_LSBFIRST;
	}
	if (param->cpol == CPOL_HIGH) {
 8001dce:	7869      	ldrb	r1, [r5, #1]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	2901      	cmp	r1, #1
 8001dd4:	d114      	bne.n	8001e00 <sw_spi_hw_init+0xa8>
		hSPI->SPI->CR1 |= SPI_CR1_CPOL;
 8001dd6:	6821      	ldr	r1, [r4, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	6022      	str	r2, [r4, #0]
	} else {
		hSPI->SPI->CR1 &= ~SPI_CR1_CPOL;
	}
	if (param->cpha == CPHA_LEADING) {
 8001ddc:	78a9      	ldrb	r1, [r5, #2]
 8001dde:	2201      	movs	r2, #1
 8001de0:	2900      	cmp	r1, #0
 8001de2:	d111      	bne.n	8001e08 <sw_spi_hw_init+0xb0>
		hSPI->SPI->CR1 |= SPI_CR1_CPHA;
 8001de4:	6821      	ldr	r1, [r4, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	6022      	str	r2, [r4, #0]
	}

#ifdef SPI_IRQ
	hSPI->SPI->CR2 |= SPI_CR2_TXEIE;			// Tx buffer Empty Interrupt Enable
#endif
	hSPI->SPI->SR = 0;
 8001dea:	2200      	movs	r2, #0
 8001dec:	60a2      	str	r2, [r4, #8]
	hSPI->SPI->CR1 |= SPI_CR1_SPE;
 8001dee:	6821      	ldr	r1, [r4, #0]
 8001df0:	3240      	adds	r2, #64	; 0x40
 8001df2:	430a      	orrs	r2, r1
 8001df4:	6022      	str	r2, [r4, #0]
}
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
		hSPI->SPI->CR1 &= ~SPI_CR1_LSBFIRST;
 8001df8:	6821      	ldr	r1, [r4, #0]
 8001dfa:	4391      	bics	r1, r2
 8001dfc:	6021      	str	r1, [r4, #0]
 8001dfe:	e7e6      	b.n	8001dce <sw_spi_hw_init+0x76>
		hSPI->SPI->CR1 &= ~SPI_CR1_CPOL;
 8001e00:	6821      	ldr	r1, [r4, #0]
 8001e02:	4391      	bics	r1, r2
 8001e04:	6021      	str	r1, [r4, #0]
 8001e06:	e7e9      	b.n	8001ddc <sw_spi_hw_init+0x84>
		hSPI->SPI->CR1 &= ~SPI_CR1_CPHA;
 8001e08:	6821      	ldr	r1, [r4, #0]
 8001e0a:	4391      	bics	r1, r2
 8001e0c:	6021      	str	r1, [r4, #0]
 8001e0e:	e7ec      	b.n	8001dea <sw_spi_hw_init+0x92>
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	40003800 	.word	0x40003800

08001e1c <sw_spi_hw_send_buff8>:
	while ( hSPI->SPI->SR & SPI_SR_BSY ) {}
#ifdef SOFT_NSS
	NSS_HI();
#endif
}
void sw_spi_hw_send_buff8( uint8_t * buffer, uint8_t buffSize, uint8_t bitSize ){
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <sw_spi_hw_send_buff8+0x44>)
	if ( dataSizeBits < 4 ) return;				// Data size from 4 - 16 bit
 8001e20:	2a03      	cmp	r2, #3
 8001e22:	d90d      	bls.n	8001e40 <sw_spi_hw_send_buff8+0x24>
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001e24:	2440      	movs	r4, #64	; 0x40
 8001e26:	681d      	ldr	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001e28:	4e0e      	ldr	r6, [pc, #56]	; (8001e64 <sw_spi_hw_send_buff8+0x48>)
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001e2a:	43a5      	bics	r5, r4
 8001e2c:	601d      	str	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001e2e:	685d      	ldr	r5, [r3, #4]
	uint32_t tmp = ( (uint32_t)dataSizeBits - 1 ) << SPI_CR2_DS_Pos;
 8001e30:	3a01      	subs	r2, #1
 8001e32:	0212      	lsls	r2, r2, #8
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001e34:	4035      	ands	r5, r6
 8001e36:	432a      	orrs	r2, r5
 8001e38:	605a      	str	r2, [r3, #4]
	SET_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4314      	orrs	r4, r2
 8001e3e:	601c      	str	r4, [r3, #0]
	sw_spi_data_size( bitSize );

	for ( uint8_t i=0; i < buffSize; i++ ) {
		*(uint8_t *)&(hSPI->SPI->DR) = *(buffer + i);
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 8001e40:	2202      	movs	r2, #2
 8001e42:	1841      	adds	r1, r0, r1
	for ( uint8_t i=0; i < buffSize; i++ ) {
 8001e44:	4281      	cmp	r1, r0
 8001e46:	d104      	bne.n	8001e52 <sw_spi_hw_send_buff8+0x36>
	}
	while( (hSPI->SPI->SR & SPI_SR_BSY) != 0 ) {}	// Wait to clock stop
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	4211      	tst	r1, r2
 8001e4e:	d1fc      	bne.n	8001e4a <sw_spi_hw_send_buff8+0x2e>
}
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)&(hSPI->SPI->DR) = *(buffer + i);
 8001e52:	7804      	ldrb	r4, [r0, #0]
 8001e54:	731c      	strb	r4, [r3, #12]
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 8001e56:	689c      	ldr	r4, [r3, #8]
 8001e58:	4214      	tst	r4, r2
 8001e5a:	d0fc      	beq.n	8001e56 <sw_spi_hw_send_buff8+0x3a>
	for ( uint8_t i=0; i < buffSize; i++ ) {
 8001e5c:	3001      	adds	r0, #1
 8001e5e:	e7f1      	b.n	8001e44 <sw_spi_hw_send_buff8+0x28>
 8001e60:	40003800 	.word	0x40003800
 8001e64:	fffff0ff 	.word	0xfffff0ff

08001e68 <sw_spi_hw_send_buff16>:
void sw_spi_hw_send_buff16( uint16_t * buffer, uint8_t buffSize, uint8_t bitSize ){
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <sw_spi_hw_send_buff16+0x48>)
	if ( dataSizeBits < 4 ) return;				// Data size from 4 - 16 bit
 8001e6c:	2a03      	cmp	r2, #3
 8001e6e:	d90d      	bls.n	8001e8c <sw_spi_hw_send_buff16+0x24>
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001e70:	2440      	movs	r4, #64	; 0x40
 8001e72:	681d      	ldr	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001e74:	4e0f      	ldr	r6, [pc, #60]	; (8001eb4 <sw_spi_hw_send_buff16+0x4c>)
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001e76:	43a5      	bics	r5, r4
 8001e78:	601d      	str	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001e7a:	685d      	ldr	r5, [r3, #4]
	uint32_t tmp = ( (uint32_t)dataSizeBits - 1 ) << SPI_CR2_DS_Pos;
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	0212      	lsls	r2, r2, #8
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001e80:	4035      	ands	r5, r6
 8001e82:	432a      	orrs	r2, r5
 8001e84:	605a      	str	r2, [r3, #4]
	SET_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4314      	orrs	r4, r2
 8001e8a:	601c      	str	r4, [r3, #0]
	sw_spi_data_size( bitSize );

	for ( uint8_t i=0; i < buffSize; i++ ) {
		hSPI->SPI->DR = *(buffer + i);
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	0049      	lsls	r1, r1, #1
 8001e90:	1841      	adds	r1, r0, r1
	for ( uint8_t i=0; i < buffSize; i++ ) {
 8001e92:	4281      	cmp	r1, r0
 8001e94:	d104      	bne.n	8001ea0 <sw_spi_hw_send_buff16+0x38>
	}
	while( (hSPI->SPI->SR & SPI_SR_BSY) != 0 ) {}	// Wait to clock stop
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	4211      	tst	r1, r2
 8001e9c:	d1fc      	bne.n	8001e98 <sw_spi_hw_send_buff16+0x30>
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
		hSPI->SPI->DR = *(buffer + i);
 8001ea0:	8804      	ldrh	r4, [r0, #0]
 8001ea2:	60dc      	str	r4, [r3, #12]
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 8001ea4:	689c      	ldr	r4, [r3, #8]
 8001ea6:	4214      	tst	r4, r2
 8001ea8:	d0fc      	beq.n	8001ea4 <sw_spi_hw_send_buff16+0x3c>
	for ( uint8_t i=0; i < buffSize; i++ ) {
 8001eaa:	3002      	adds	r0, #2
 8001eac:	e7f1      	b.n	8001e92 <sw_spi_hw_send_buff16+0x2a>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40003800 	.word	0x40003800
 8001eb4:	fffff0ff 	.word	0xfffff0ff

08001eb8 <sw_spi_hw_write_read>:
/*************************************************************************************/

/* 10. *******************************************************************************/
uint16_t sw_spi_hw_write_read( uint16_t data, uint32_t bitSize ) {
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	0006      	movs	r6, r0
 8001ebc:	000d      	movs	r5, r1
 8001ebe:	4c1b      	ldr	r4, [pc, #108]	; (8001f2c <sw_spi_hw_write_read+0x74>)
	if ( dataSizeBits < 4 ) return;				// Data size from 4 - 16 bit
 8001ec0:	2903      	cmp	r1, #3
 8001ec2:	d90d      	bls.n	8001ee0 <sw_spi_hw_write_read+0x28>
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	6823      	ldr	r3, [r4, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001ec8:	4819      	ldr	r0, [pc, #100]	; (8001f30 <sw_spi_hw_write_read+0x78>)
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001eca:	4393      	bics	r3, r2
 8001ecc:	6023      	str	r3, [r4, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001ece:	6861      	ldr	r1, [r4, #4]
	uint32_t tmp = ( (uint32_t)dataSizeBits - 1 ) << SPI_CR2_DS_Pos;
 8001ed0:	1e6b      	subs	r3, r5, #1
 8001ed2:	021b      	lsls	r3, r3, #8
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8001ed4:	4001      	ands	r1, r0
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6063      	str	r3, [r4, #4]
	SET_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	6022      	str	r2, [r4, #0]
static inline void NSS_LO(void) { gpio_pin_LO( SOFT_NSS_PORT, SOFT_NSS_PIN ); }
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	2090      	movs	r0, #144	; 0x90
 8001ee4:	0089      	lsls	r1, r1, #2
 8001ee6:	05c0      	lsls	r0, r0, #23
 8001ee8:	f7fe fa90 	bl	800040c <gpio_pin_LO>
	sw_spi_data_size( bitSize );
	uint16_t dataLoc = 0;
#ifdef SOFT_NSS
	NSS_LO();
#endif
	while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE ) {}
 8001eec:	2302      	movs	r3, #2
 8001eee:	68a2      	ldr	r2, [r4, #8]
 8001ef0:	421a      	tst	r2, r3
 8001ef2:	d0fc      	beq.n	8001eee <sw_spi_hw_write_read+0x36>
	if ( bitSize < 9 ) *(uint8_t *)&hSPI->SPI->DR = data;
 8001ef4:	2d08      	cmp	r5, #8
 8001ef6:	d813      	bhi.n	8001f20 <sw_spi_hw_write_read+0x68>
 8001ef8:	7326      	strb	r6, [r4, #12]
	else						  	hSPI->SPI->DR = data;

	while ( (hSPI->SPI->SR & SPI_SR_RXNE) != SPI_SR_RXNE ) {}
 8001efa:	2301      	movs	r3, #1
 8001efc:	68a2      	ldr	r2, [r4, #8]
 8001efe:	421a      	tst	r2, r3
 8001f00:	d0fc      	beq.n	8001efc <sw_spi_hw_write_read+0x44>
	if ( bitSize<9 )dataLoc = *(uint8_t  *)&hSPI->SPI->DR;
 8001f02:	2d08      	cmp	r5, #8
 8001f04:	d80e      	bhi.n	8001f24 <sw_spi_hw_write_read+0x6c>
 8001f06:	7b25      	ldrb	r5, [r4, #12]
	else			dataLoc = 				hSPI->SPI->DR;
	while ( hSPI->SPI->SR & SPI_SR_BSY ) {}
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	68a2      	ldr	r2, [r4, #8]
 8001f0c:	421a      	tst	r2, r3
 8001f0e:	d1fc      	bne.n	8001f0a <sw_spi_hw_write_read+0x52>
static inline void NSS_HI(void) { gpio_pin_HI( SOFT_NSS_PORT, SOFT_NSS_PIN ); }
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	2090      	movs	r0, #144	; 0x90
 8001f14:	0089      	lsls	r1, r1, #2
 8001f16:	05c0      	lsls	r0, r0, #23
 8001f18:	f7fe fa87 	bl	800042a <gpio_pin_HI>
#ifdef SOFT_NSS
	NSS_HI();
#endif
	return (uint16_t)dataLoc;
}
 8001f1c:	0028      	movs	r0, r5
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
	else						  	hSPI->SPI->DR = data;
 8001f20:	60e6      	str	r6, [r4, #12]
 8001f22:	e7ea      	b.n	8001efa <sw_spi_hw_write_read+0x42>
	else			dataLoc = 				hSPI->SPI->DR;
 8001f24:	68e5      	ldr	r5, [r4, #12]
 8001f26:	b2ad      	uxth	r5, r5
 8001f28:	e7ee      	b.n	8001f08 <sw_spi_hw_write_read+0x50>
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40003800 	.word	0x40003800
 8001f30:	fffff0ff 	.word	0xfffff0ff

08001f34 <nvic_priority>:
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <nvic_priority+0x48>)
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	0019      	movs	r1, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f3a:	20c4      	movs	r0, #196	; 0xc4
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f3c:	31fc      	adds	r1, #252	; 0xfc
 8001f3e:	0312      	lsls	r2, r2, #12
}
/************************************************************************/


/************************ Interrupt priority*******************************/
void nvic_priority(void) {
 8001f40:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f42:	0080      	lsls	r0, r0, #2
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f44:	604a      	str	r2, [r1, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f46:	581a      	ldr	r2, [r3, r0]
 8001f48:	24c1      	movs	r4, #193	; 0xc1
 8001f4a:	0212      	lsls	r2, r2, #8
 8001f4c:	0a12      	lsrs	r2, r2, #8
 8001f4e:	501a      	str	r2, [r3, r0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f50:	2280      	movs	r2, #128	; 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f52:	2080      	movs	r0, #128	; 0x80
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f54:	604a      	str	r2, [r1, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f56:	00a4      	lsls	r4, r4, #2
 8001f58:	591a      	ldr	r2, [r3, r4]
 8001f5a:	05c0      	lsls	r0, r0, #23
 8001f5c:	0212      	lsls	r2, r2, #8
 8001f5e:	0a12      	lsrs	r2, r2, #8
 8001f60:	4302      	orrs	r2, r0
 8001f62:	511a      	str	r2, [r3, r4]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f64:	2380      	movs	r3, #128	; 0x80
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f66:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <nvic_priority+0x4c>)
 8001f6e:	0612      	lsls	r2, r2, #24
 8001f70:	6a0b      	ldr	r3, [r1, #32]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	4313      	orrs	r3, r2
 8001f78:	620b      	str	r3, [r1, #32]
//	NVIC_SetPendingIRQ( TIM3_IRQn );		// Display refresh IRQ priority
//	NVIC_SetPriority  ( TIM3_IRQn, 1 );
	NVIC_SetPendingIRQ( SysTick_IRQn );		// Systick IRQ priority
	NVIC_SetPriority  ( SysTick_IRQn, 3 );	//

}
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <SysTick_Handler>:
volatile uint16_t softTimer1, softTimer2, softTimer5, softTimer3, whileTimer ;

volatile static uint16_t delayTimer;
volatile static uint32_t milis = 0;
void SysTick_Handler( void ) {
	milis++;
 8001f84:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <SysTick_Handler+0xbc>)
void SysTick_Handler( void ) {
 8001f86:	b510      	push	{r4, lr}
	milis++;
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	6013      	str	r3, [r2, #0]
	if (pressTimer) 	pressTimer--;
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <SysTick_Handler+0xc0>)
 8001f90:	8813      	ldrh	r3, [r2, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <SysTick_Handler+0x1a>
 8001f96:	8813      	ldrh	r3, [r2, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	8013      	strh	r3, [r2, #0]
	if (debounceTimer)	debounceTimer--;
 8001f9e:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <SysTick_Handler+0xc4>)
 8001fa0:	8813      	ldrh	r3, [r2, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <SysTick_Handler+0x2a>
 8001fa6:	8813      	ldrh	r3, [r2, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	8013      	strh	r3, [r2, #0]
	if (repeatTimer)	repeatTimer--;
 8001fae:	4a27      	ldr	r2, [pc, #156]	; (800204c <SysTick_Handler+0xc8>)
 8001fb0:	8813      	ldrh	r3, [r2, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <SysTick_Handler+0x3a>
 8001fb6:	8813      	ldrh	r3, [r2, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8013      	strh	r3, [r2, #0]
	if (delayTimer)		delayTimer--;
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <SysTick_Handler+0xcc>)
 8001fc0:	8813      	ldrh	r3, [r2, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <SysTick_Handler+0x4a>
 8001fc6:	8813      	ldrh	r3, [r2, #0]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	8013      	strh	r3, [r2, #0]
	if (showMenuTimer) 	showMenuTimer--;
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <SysTick_Handler+0xd0>)
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d003      	beq.n	8001fde <SysTick_Handler+0x5a>
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	3a01      	subs	r2, #1
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	801a      	strh	r2, [r3, #0]
	if (softTimer1) 	softTimer1--;
 8001fde:	491e      	ldr	r1, [pc, #120]	; (8002058 <SysTick_Handler+0xd4>)
 8001fe0:	880a      	ldrh	r2, [r1, #0]
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d003      	beq.n	8001fee <SysTick_Handler+0x6a>
 8001fe6:	880a      	ldrh	r2, [r1, #0]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	b292      	uxth	r2, r2
 8001fec:	800a      	strh	r2, [r1, #0]
	if (softTimer2) 	softTimer2--;
 8001fee:	491b      	ldr	r1, [pc, #108]	; (800205c <SysTick_Handler+0xd8>)
 8001ff0:	880a      	ldrh	r2, [r1, #0]
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d003      	beq.n	8001ffe <SysTick_Handler+0x7a>
 8001ff6:	880a      	ldrh	r2, [r1, #0]
 8001ff8:	3a01      	subs	r2, #1
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	800a      	strh	r2, [r1, #0]
	if (softTimer3) 	softTimer3--;
 8001ffe:	4918      	ldr	r1, [pc, #96]	; (8002060 <SysTick_Handler+0xdc>)
 8002000:	880a      	ldrh	r2, [r1, #0]
 8002002:	2a00      	cmp	r2, #0
 8002004:	d003      	beq.n	800200e <SysTick_Handler+0x8a>
 8002006:	880a      	ldrh	r2, [r1, #0]
 8002008:	3a01      	subs	r2, #1
 800200a:	b292      	uxth	r2, r2
 800200c:	800a      	strh	r2, [r1, #0]
	if (softTimer5) 	softTimer5--;
 800200e:	4915      	ldr	r1, [pc, #84]	; (8002064 <SysTick_Handler+0xe0>)
 8002010:	880a      	ldrh	r2, [r1, #0]
 8002012:	2a00      	cmp	r2, #0
 8002014:	d003      	beq.n	800201e <SysTick_Handler+0x9a>
 8002016:	880a      	ldrh	r2, [r1, #0]
 8002018:	3a01      	subs	r2, #1
 800201a:	b292      	uxth	r2, r2
 800201c:	800a      	strh	r2, [r1, #0]
	if (whileTimer) 	whileTimer--;
 800201e:	4912      	ldr	r1, [pc, #72]	; (8002068 <SysTick_Handler+0xe4>)
 8002020:	880a      	ldrh	r2, [r1, #0]
 8002022:	2a00      	cmp	r2, #0
 8002024:	d003      	beq.n	800202e <SysTick_Handler+0xaa>
 8002026:	880a      	ldrh	r2, [r1, #0]
 8002028:	3a01      	subs	r2, #1
 800202a:	b292      	uxth	r2, r2
 800202c:	800a      	strh	r2, [r1, #0]

	if (showMenuTimer == 0) {
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	2a00      	cmp	r2, #0
 8002032:	d103      	bne.n	800203c <SysTick_Handler+0xb8>
		showMenuTimer = 10;
 8002034:	320a      	adds	r2, #10
 8002036:	801a      	strh	r2, [r3, #0]
		SW_KEYBOARD_EVENT();
 8002038:	f7ff fb58 	bl	80016ec <SW_KEYBOARD_EVENT>
	}
}
 800203c:	bd10      	pop	{r4, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	20000298 	.word	0x20000298
 8002044:	200002b8 	.word	0x200002b8
 8002048:	200002ac 	.word	0x200002ac
 800204c:	200002ae 	.word	0x200002ae
 8002050:	20000294 	.word	0x20000294
 8002054:	200002c4 	.word	0x200002c4
 8002058:	200002d4 	.word	0x200002d4
 800205c:	200002b2 	.word	0x200002b2
 8002060:	200002c6 	.word	0x200002c6
 8002064:	200002c8 	.word	0x200002c8
 8002068:	200002b0 	.word	0x200002b0

0800206c <millis>:
	while ( softTimer5 ) {}
}
/*********************************************************/

uint32_t millis(void) {
	return milis;
 800206c:	4b01      	ldr	r3, [pc, #4]	; (8002074 <millis+0x8>)
 800206e:	6818      	ldr	r0, [r3, #0]
}
 8002070:	4770      	bx	lr
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	20000298 	.word	0x20000298

08002078 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800207a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800207e:	490e      	ldr	r1, [pc, #56]	; (80020b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <LoopForever+0xe>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002094:	4c0b      	ldr	r4, [pc, #44]	; (80020c4 <LoopForever+0x16>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020a2:	f7fe f94b 	bl	800033c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020a6:	f000 f811 	bl	80020cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020aa:	f7fe f8d9 	bl	8000260 <main>

080020ae <LoopForever>:

LoopForever:
    b LoopForever
 80020ae:	e7fe      	b.n	80020ae <LoopForever>
  ldr   r0, =_estack
 80020b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80020bc:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 80020c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80020c4:	200002d8 	.word	0x200002d8

080020c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_COMP_IRQHandler>
	...

080020cc <__libc_init_array>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	2600      	movs	r6, #0
 80020d0:	4d0c      	ldr	r5, [pc, #48]	; (8002104 <__libc_init_array+0x38>)
 80020d2:	4c0d      	ldr	r4, [pc, #52]	; (8002108 <__libc_init_array+0x3c>)
 80020d4:	1b64      	subs	r4, r4, r5
 80020d6:	10a4      	asrs	r4, r4, #2
 80020d8:	42a6      	cmp	r6, r4
 80020da:	d109      	bne.n	80020f0 <__libc_init_array+0x24>
 80020dc:	2600      	movs	r6, #0
 80020de:	f000 f889 	bl	80021f4 <_init>
 80020e2:	4d0a      	ldr	r5, [pc, #40]	; (800210c <__libc_init_array+0x40>)
 80020e4:	4c0a      	ldr	r4, [pc, #40]	; (8002110 <__libc_init_array+0x44>)
 80020e6:	1b64      	subs	r4, r4, r5
 80020e8:	10a4      	asrs	r4, r4, #2
 80020ea:	42a6      	cmp	r6, r4
 80020ec:	d105      	bne.n	80020fa <__libc_init_array+0x2e>
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
 80020f0:	00b3      	lsls	r3, r6, #2
 80020f2:	58eb      	ldr	r3, [r5, r3]
 80020f4:	4798      	blx	r3
 80020f6:	3601      	adds	r6, #1
 80020f8:	e7ee      	b.n	80020d8 <__libc_init_array+0xc>
 80020fa:	00b3      	lsls	r3, r6, #2
 80020fc:	58eb      	ldr	r3, [r5, r3]
 80020fe:	4798      	blx	r3
 8002100:	3601      	adds	r6, #1
 8002102:	e7f2      	b.n	80020ea <__libc_init_array+0x1e>
 8002104:	08002c1c 	.word	0x08002c1c
 8002108:	08002c1c 	.word	0x08002c1c
 800210c:	08002c1c 	.word	0x08002c1c
 8002110:	08002c20 	.word	0x08002c20

08002114 <__itoa>:
 8002114:	1e93      	subs	r3, r2, #2
 8002116:	b510      	push	{r4, lr}
 8002118:	000c      	movs	r4, r1
 800211a:	2b22      	cmp	r3, #34	; 0x22
 800211c:	d904      	bls.n	8002128 <__itoa+0x14>
 800211e:	2300      	movs	r3, #0
 8002120:	001c      	movs	r4, r3
 8002122:	700b      	strb	r3, [r1, #0]
 8002124:	0020      	movs	r0, r4
 8002126:	bd10      	pop	{r4, pc}
 8002128:	2a0a      	cmp	r2, #10
 800212a:	d109      	bne.n	8002140 <__itoa+0x2c>
 800212c:	2800      	cmp	r0, #0
 800212e:	da07      	bge.n	8002140 <__itoa+0x2c>
 8002130:	232d      	movs	r3, #45	; 0x2d
 8002132:	700b      	strb	r3, [r1, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	4240      	negs	r0, r0
 8002138:	1861      	adds	r1, r4, r1
 800213a:	f000 f825 	bl	8002188 <__utoa>
 800213e:	e7f1      	b.n	8002124 <__itoa+0x10>
 8002140:	2100      	movs	r1, #0
 8002142:	e7f9      	b.n	8002138 <__itoa+0x24>

08002144 <itoa>:
 8002144:	b510      	push	{r4, lr}
 8002146:	f7ff ffe5 	bl	8002114 <__itoa>
 800214a:	bd10      	pop	{r4, pc}

0800214c <memcpy>:
 800214c:	2300      	movs	r3, #0
 800214e:	b510      	push	{r4, lr}
 8002150:	429a      	cmp	r2, r3
 8002152:	d100      	bne.n	8002156 <memcpy+0xa>
 8002154:	bd10      	pop	{r4, pc}
 8002156:	5ccc      	ldrb	r4, [r1, r3]
 8002158:	54c4      	strb	r4, [r0, r3]
 800215a:	3301      	adds	r3, #1
 800215c:	e7f8      	b.n	8002150 <memcpy+0x4>

0800215e <memset>:
 800215e:	0003      	movs	r3, r0
 8002160:	1882      	adds	r2, r0, r2
 8002162:	4293      	cmp	r3, r2
 8002164:	d100      	bne.n	8002168 <memset+0xa>
 8002166:	4770      	bx	lr
 8002168:	7019      	strb	r1, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	e7f9      	b.n	8002162 <memset+0x4>

0800216e <strcat>:
 800216e:	0002      	movs	r2, r0
 8002170:	b510      	push	{r4, lr}
 8002172:	7813      	ldrb	r3, [r2, #0]
 8002174:	0014      	movs	r4, r2
 8002176:	3201      	adds	r2, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1fa      	bne.n	8002172 <strcat+0x4>
 800217c:	5cca      	ldrb	r2, [r1, r3]
 800217e:	54e2      	strb	r2, [r4, r3]
 8002180:	3301      	adds	r3, #1
 8002182:	2a00      	cmp	r2, #0
 8002184:	d1fa      	bne.n	800217c <strcat+0xe>
 8002186:	bd10      	pop	{r4, pc}

08002188 <__utoa>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	0016      	movs	r6, r2
 800218c:	b08d      	sub	sp, #52	; 0x34
 800218e:	0007      	movs	r7, r0
 8002190:	000c      	movs	r4, r1
 8002192:	2225      	movs	r2, #37	; 0x25
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <__utoa+0x68>)
 8002196:	a802      	add	r0, sp, #8
 8002198:	f7ff ffd8 	bl	800214c <memcpy>
 800219c:	1eb3      	subs	r3, r6, #2
 800219e:	2500      	movs	r5, #0
 80021a0:	2b22      	cmp	r3, #34	; 0x22
 80021a2:	d820      	bhi.n	80021e6 <__utoa+0x5e>
 80021a4:	1e63      	subs	r3, r4, #1
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	ab02      	add	r3, sp, #8
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	0038      	movs	r0, r7
 80021ae:	0031      	movs	r1, r6
 80021b0:	f7fe f830 	bl	8000214 <__aeabi_uidivmod>
 80021b4:	000b      	movs	r3, r1
 80021b6:	9a01      	ldr	r2, [sp, #4]
 80021b8:	0029      	movs	r1, r5
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	9a00      	ldr	r2, [sp, #0]
 80021be:	3501      	adds	r5, #1
 80021c0:	5553      	strb	r3, [r2, r5]
 80021c2:	003b      	movs	r3, r7
 80021c4:	0007      	movs	r7, r0
 80021c6:	429e      	cmp	r6, r3
 80021c8:	d9f0      	bls.n	80021ac <__utoa+0x24>
 80021ca:	2300      	movs	r3, #0
 80021cc:	0022      	movs	r2, r4
 80021ce:	5563      	strb	r3, [r4, r5]
 80021d0:	000b      	movs	r3, r1
 80021d2:	1ac8      	subs	r0, r1, r3
 80021d4:	4283      	cmp	r3, r0
 80021d6:	dd08      	ble.n	80021ea <__utoa+0x62>
 80021d8:	7810      	ldrb	r0, [r2, #0]
 80021da:	5ce5      	ldrb	r5, [r4, r3]
 80021dc:	7015      	strb	r5, [r2, #0]
 80021de:	54e0      	strb	r0, [r4, r3]
 80021e0:	3201      	adds	r2, #1
 80021e2:	3b01      	subs	r3, #1
 80021e4:	e7f5      	b.n	80021d2 <__utoa+0x4a>
 80021e6:	7025      	strb	r5, [r4, #0]
 80021e8:	002c      	movs	r4, r5
 80021ea:	0020      	movs	r0, r4
 80021ec:	b00d      	add	sp, #52	; 0x34
 80021ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f0:	08002bf4 	.word	0x08002bf4

080021f4 <_init>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr

08002200 <_fini>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002206:	bc08      	pop	{r3}
 8002208:	469e      	mov	lr, r3
 800220a:	4770      	bx	lr
