
STM32F072C8Tx_CID_REG_MiniClock_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000222c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000034  20000000  08002cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b4  20000034  08002d24  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002e8  08002d24  000202e8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e119  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000486b  00000000  00000000  0003e175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00003a20  00000000  00000000  000429e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000738  00000000  00000000  00046400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bb0  00000000  00000000  00046b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017774  00000000  00000000  000476e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012d12  00000000  00000000  0005ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000744e1  00000000  00000000  00071b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000e604f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001030  00000000  00000000  000e60a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022d4 	.word	0x080022d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080022d4 	.word	0x080022d4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__ctzsi2>:
 8000234:	4241      	negs	r1, r0
 8000236:	4008      	ands	r0, r1
 8000238:	211c      	movs	r1, #28
 800023a:	2301      	movs	r3, #1
 800023c:	041b      	lsls	r3, r3, #16
 800023e:	4298      	cmp	r0, r3
 8000240:	d301      	bcc.n	8000246 <__ctzsi2+0x12>
 8000242:	0c00      	lsrs	r0, r0, #16
 8000244:	3910      	subs	r1, #16
 8000246:	0a1b      	lsrs	r3, r3, #8
 8000248:	4298      	cmp	r0, r3
 800024a:	d301      	bcc.n	8000250 <__ctzsi2+0x1c>
 800024c:	0a00      	lsrs	r0, r0, #8
 800024e:	3908      	subs	r1, #8
 8000250:	091b      	lsrs	r3, r3, #4
 8000252:	4298      	cmp	r0, r3
 8000254:	d301      	bcc.n	800025a <__ctzsi2+0x26>
 8000256:	0900      	lsrs	r0, r0, #4
 8000258:	3904      	subs	r1, #4
 800025a:	a202      	add	r2, pc, #8	; (adr r2, 8000264 <__ctzsi2+0x30>)
 800025c:	5c10      	ldrb	r0, [r2, r0]
 800025e:	1a40      	subs	r0, r0, r1
 8000260:	4770      	bx	lr
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	1d1d1c1b 	.word	0x1d1d1c1b
 8000268:	1e1e1e1e 	.word	0x1e1e1e1e
 800026c:	1f1f1f1f 	.word	0x1f1f1f1f
 8000270:	1f1f1f1f 	.word	0x1f1f1f1f

08000274 <main>:
				;
	NVIC_EnableIRQ( TIM2_IRQn );
}
/*******************************************************************************/

int main(void) {
 8000274:	b510      	push	{r4, lr}
	SystemClock_Config();
 8000276:	f000 f949 	bl	800050c <SystemClock_Config>

	nvic_priority();
 800027a:	f000 fa7b 	bl	8000774 <nvic_priority>

/********************************** Hardware layer *****************************************/
	RCC_gpio_init();
 800027e:	f000 f931 	bl	80004e4 <RCC_gpio_init>
	sw_led_debug_init();
 8000282:	f000 faab 	bl	80007dc <sw_led_debug_init>

	input_init();
 8000286:	f001 fcbd 	bl	8001c04 <input_init>

	HT1632C_init();
 800028a:	f000 fb51 	bl	8000930 <HT1632C_init>
	clock_init( FALSE );
 800028e:	2000      	movs	r0, #0
 8000290:	f001 feaa 	bl	8001fe8 <clock_init>

/*******************************************************************************************/
//	gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
//	gpio_pin_LO( DEBUG_PORT0, DEBUG_PIN0);
/********************************** Hardware abstraction layer ****************************/
	osd_init();
 8000294:	f000 fbb2 	bl	80009fc <osd_init>
	scroll_text_param( (FONT_INFO *)&Arial6pt8FontInfo_var );
 8000298:	4818      	ldr	r0, [pc, #96]	; (80002fc <main+0x88>)
 800029a:	f000 fc4d 	bl	8000b38 <scroll_text_param>

//	register_irDecoded_event_callback( osd_ir_manage );
	register_scroll_event_callback( scroll_text_display );
 800029e:	4818      	ldr	r0, [pc, #96]	; (8000300 <main+0x8c>)
 80002a0:	f000 fb92 	bl	80009c8 <register_scroll_event_callback>

	register_datetime_event_callback( rtc_get_date_time );
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <main+0x90>)
 80002a6:	f001 fec5 	bl	8002034 <register_datetime_event_callback>
	register_osd_event_callback( osd_manage_screens );
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <main+0x94>)
 80002ac:	f000 fbf4 	bl	8000a98 <register_osd_event_callback>

	SysTick_Config( (uint32_t)SystemCoreClock / 1000 );		// Systick on 1 ms
 80002b0:	21fa      	movs	r1, #250	; 0xfa
 80002b2:	4b16      	ldr	r3, [pc, #88]	; (800030c <main+0x98>)
 80002b4:	0089      	lsls	r1, r1, #2
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	f7ff ff30 	bl	800011c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	3801      	subs	r0, #1
 80002c0:	045b      	lsls	r3, r3, #17
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d20d      	bcs.n	80002e2 <main+0x6e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c6:	21c0      	movs	r1, #192	; 0xc0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <main+0x9c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ca:	0609      	lsls	r1, r1, #24
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002cc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ce:	4811      	ldr	r0, [pc, #68]	; (8000314 <main+0xa0>)
 80002d0:	6a03      	ldr	r3, [r0, #32]
 80002d2:	021b      	lsls	r3, r3, #8
 80002d4:	0a1b      	lsrs	r3, r3, #8
 80002d6:	430b      	orrs	r3, r1
 80002d8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002da:	2300      	movs	r3, #0
 80002dc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002de:	3307      	adds	r3, #7
 80002e0:	6013      	str	r3, [r2, #0]
	while (1) {
		SW_OSD_EVENT( 0 );
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 fbde 	bl	8000aa4 <SW_OSD_EVENT>
		SW_DATETIME_EVENT();
 80002e8:	f001 feaa 	bl	8002040 <SW_DATETIME_EVENT>

//		SW_IR_DECODED_EVENT();

		SW_SCROLL_EVENT( (uint16_t *)&softTimer1, TRUE );
 80002ec:	2101      	movs	r1, #1
 80002ee:	480a      	ldr	r0, [pc, #40]	; (8000318 <main+0xa4>)
 80002f0:	f000 fb70 	bl	80009d4 <SW_SCROLL_EVENT>

		if (softTimer2 == 0) {
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <main+0xa8>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
	while (1) {
 80002f8:	e7f3      	b.n	80002e2 <main+0x6e>
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	0800283c 	.word	0x0800283c
 8000300:	08000b4d 	.word	0x08000b4d
 8000304:	0800201d 	.word	0x0800201d
 8000308:	08000a21 	.word	0x08000a21
 800030c:	20000000 	.word	0x20000000
 8000310:	e000e010 	.word	0xe000e010
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	200002e4 	.word	0x200002e4
 800031c:	200002c2 	.word	0x200002c2

08000320 <TIM2_IRQHandler>:
		}
	}
}
/*******************************************************************************/
void TIM2_IRQHandler( void ) {
	if (TIM2->SR & TIM_SR_UIF ) { 		// Update interrupt Flag
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	691a      	ldr	r2, [r3, #16]
void TIM2_IRQHandler( void ) {
 8000326:	b510      	push	{r4, lr}
	if (TIM2->SR & TIM_SR_UIF ) { 		// Update interrupt Flag
 8000328:	07d2      	lsls	r2, r2, #31
 800032a:	d50a      	bpl.n	8000342 <TIM2_IRQHandler+0x22>
		TIM2->SR = ~TIM_SR_UIF;
 800032c:	2202      	movs	r2, #2
 800032e:	4252      	negs	r2, r2

		gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
 8000330:	2140      	movs	r1, #64	; 0x40
 8000332:	4804      	ldr	r0, [pc, #16]	; (8000344 <TIM2_IRQHandler+0x24>)
		TIM2->SR = ~TIM_SR_UIF;
 8000334:	611a      	str	r2, [r3, #16]
		gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
 8000336:	f000 f882 	bl	800043e <gpio_pin_HI>
		gpio_pin_LO( DEBUG_PORT0, DEBUG_PIN0);
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	4801      	ldr	r0, [pc, #4]	; (8000344 <TIM2_IRQHandler+0x24>)
 800033e:	f000 f86f 	bl	8000420 <gpio_pin_LO>
	}
}
 8000342:	bd10      	pop	{r4, pc}
 8000344:	48000400 	.word	0x48000400

08000348 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000348:	4770      	bx	lr

0800034a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler>

0800034c <SVC_Handler>:
 800034c:	4770      	bx	lr

0800034e <PendSV_Handler>:
 800034e:	4770      	bx	lr

08000350 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000350:	2101      	movs	r1, #1
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000354:	4811      	ldr	r0, [pc, #68]	; (800039c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	430a      	orrs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800035c:	685a      	ldr	r2, [r3, #4]
 800035e:	4002      	ands	r2, r0
 8000360:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <SystemInit+0x50>)
 8000366:	4002      	ands	r2, r0
 8000368:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <SystemInit+0x54>)
 800036e:	4002      	ands	r2, r0
 8000370:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <SystemInit+0x58>)
 8000376:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000378:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800037a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800037c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800037e:	4382      	bics	r2, r0
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8000382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000384:	4809      	ldr	r0, [pc, #36]	; (80003ac <SystemInit+0x5c>)
 8000386:	4002      	ands	r2, r0
 8000388:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800038a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800038c:	438a      	bics	r2, r1
 800038e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]

}
 8000394:	4770      	bx	lr
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	40021000 	.word	0x40021000
 800039c:	08ffb80c 	.word	0x08ffb80c
 80003a0:	fef6ffff 	.word	0xfef6ffff
 80003a4:	fffbffff 	.word	0xfffbffff
 80003a8:	ffc0ffff 	.word	0xffc0ffff
 80003ac:	fffcfe2c 	.word	0xfffcfe2c

080003b0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003b0:	220c      	movs	r2, #12
{
 80003b2:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003b4:	4d15      	ldr	r5, [pc, #84]	; (800040c <SystemCoreClockUpdate+0x5c>)
 80003b6:	4e16      	ldr	r6, [pc, #88]	; (8000410 <SystemCoreClockUpdate+0x60>)
 80003b8:	686b      	ldr	r3, [r5, #4]
 80003ba:	4013      	ands	r3, r2

  switch (tmp)
 80003bc:	2b08      	cmp	r3, #8
 80003be:	d00a      	beq.n	80003d6 <SystemCoreClockUpdate+0x26>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <SystemCoreClockUpdate+0x64>)
 80003c2:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003c4:	686b      	ldr	r3, [r5, #4]
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <SystemCoreClockUpdate+0x68>)
 80003c8:	061b      	lsls	r3, r3, #24
 80003ca:	0f1b      	lsrs	r3, r3, #28
 80003cc:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80003ce:	6832      	ldr	r2, [r6, #0]
 80003d0:	40da      	lsrs	r2, r3
 80003d2:	6032      	str	r2, [r6, #0]
}
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
      pllmull = ( pllmull >> 18) + 2;
 80003d6:	200f      	movs	r0, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80003d8:	686c      	ldr	r4, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003da:	686b      	ldr	r3, [r5, #4]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80003dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003de:	22c0      	movs	r2, #192	; 0xc0
      pllmull = ( pllmull >> 18) + 2;
 80003e0:	0ca4      	lsrs	r4, r4, #18
 80003e2:	4004      	ands	r4, r0
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80003e4:	4001      	ands	r1, r0
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80003e6:	2080      	movs	r0, #128	; 0x80
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003e8:	0252      	lsls	r2, r2, #9
 80003ea:	4013      	ands	r3, r2
      pllmull = ( pllmull >> 18) + 2;
 80003ec:	3402      	adds	r4, #2
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80003ee:	3101      	adds	r1, #1
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80003f0:	0240      	lsls	r0, r0, #9
 80003f2:	4283      	cmp	r3, r0
 80003f4:	d101      	bne.n	80003fa <SystemCoreClockUpdate+0x4a>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <SystemCoreClockUpdate+0x64>)
 80003f8:	e002      	b.n	8000400 <SystemCoreClockUpdate+0x50>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d1fb      	bne.n	80003f6 <SystemCoreClockUpdate+0x46>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <SystemCoreClockUpdate+0x6c>)
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8000400:	f7ff fe8c 	bl	800011c <__udivsi3>
 8000404:	4344      	muls	r4, r0
 8000406:	6034      	str	r4, [r6, #0]
 8000408:	e7dc      	b.n	80003c4 <SystemCoreClockUpdate+0x14>
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	40021000 	.word	0x40021000
 8000410:	20000000 	.word	0x20000000
 8000414:	007a1200 	.word	0x007a1200
 8000418:	080022ec 	.word	0x080022ec
 800041c:	02dc6c00 	.word	0x02dc6c00

08000420 <gpio_pin_LO>:
#endif
}
#endif

#ifdef BSRR_REG
	OPTIMISE("O0") inline void gpio_pin_LO(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	000a      	movs	r2, r1
 800042a:	1cbb      	adds	r3, r7, #2
 800042c:	801a      	strh	r2, [r3, #0]
		port->BRR = pin;
 800042e:	1cbb      	adds	r3, r7, #2
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}

0800043e <gpio_pin_HI>:
	OPTIMISE("O0") inline void gpio_pin_HI(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	000a      	movs	r2, r1
 8000448:	1cbb      	adds	r3, r7, #2
 800044a:	801a      	strh	r2, [r3, #0]
		port->BSRR = pin;
 800044c:	1cbb      	adds	r3, r7, #2
 800044e:	881a      	ldrh	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	619a      	str	r2, [r3, #24]
	}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b002      	add	sp, #8
 800045a:	bd80      	pop	{r7, pc}

0800045c <gpio_pin_cfg>:
void gpio_pin_cfg( GPIO_TypeDef * const port, T_GPIO_PIN pin, T_GPIO_MODE mode ) {
 800045c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800045e:	0004      	movs	r4, r0
 8000460:	0015      	movs	r5, r2
 8000462:	0008      	movs	r0, r1
	if (mode & 0x100u)
 8000464:	05d3      	lsls	r3, r2, #23
 8000466:	d534      	bpl.n	80004d2 <gpio_pin_cfg+0x76>
		port->OTYPER |= pin;
 8000468:	6863      	ldr	r3, [r4, #4]
 800046a:	430b      	orrs	r3, r1
 800046c:	6063      	str	r3, [r4, #4]
	uint32_t reset_mask = ~(0x03u << pin);
 800046e:	2603      	movs	r6, #3
	pin = __builtin_ctz(pin) * 2;
 8000470:	f7ff fee0 	bl	8000234 <__ctzsi2>
	uint32_t reset_mask = ~(0x03u << pin);
 8000474:	0032      	movs	r2, r6
	pin = __builtin_ctz(pin) * 2;
 8000476:	b283      	uxth	r3, r0
 8000478:	0058      	lsls	r0, r3, #1
	uint32_t reset_mask = ~(0x03u << pin);
 800047a:	b280      	uxth	r0, r0
 800047c:	4082      	lsls	r2, r0
	reg_val = port->MODER;
 800047e:	6821      	ldr	r1, [r4, #0]
	pin = __builtin_ctz(pin) * 2;
 8000480:	9301      	str	r3, [sp, #4]
	reg_val &= reset_mask;
 8000482:	4391      	bics	r1, r2
 8000484:	468c      	mov	ip, r1
	reg_val |= (((mode & 0x600u) >> 9u) << pin);
 8000486:	0a69      	lsrs	r1, r5, #9
 8000488:	4031      	ands	r1, r6
 800048a:	4663      	mov	r3, ip
 800048c:	4081      	lsls	r1, r0
 800048e:	4319      	orrs	r1, r3
	port->MODER = reg_val;
 8000490:	6021      	str	r1, [r4, #0]
	reg_val = port->PUPDR;
 8000492:	68e1      	ldr	r1, [r4, #12]
	reg_val &= reset_mask;
 8000494:	4391      	bics	r1, r2
 8000496:	468c      	mov	ip, r1
	reg_val |= (((mode & 0x30u) >> 4u) << pin);
 8000498:	0929      	lsrs	r1, r5, #4
 800049a:	4031      	ands	r1, r6
 800049c:	4663      	mov	r3, ip
 800049e:	4081      	lsls	r1, r0
 80004a0:	4319      	orrs	r1, r3
	port->PUPDR = reg_val;
 80004a2:	60e1      	str	r1, [r4, #12]
	reg_val = port->OSPEEDR;
 80004a4:	68a1      	ldr	r1, [r4, #8]
	pin *= 2;
 80004a6:	9b01      	ldr	r3, [sp, #4]
	reg_val &= reset_mask;
 80004a8:	4391      	bics	r1, r2
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 80004aa:	09aa      	lsrs	r2, r5, #6
 80004ac:	4032      	ands	r2, r6
 80004ae:	4082      	lsls	r2, r0
	pin *= 2;
 80004b0:	009b      	lsls	r3, r3, #2
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 80004b2:	430a      	orrs	r2, r1
	pin *= 2;
 80004b4:	b29b      	uxth	r3, r3
	port->OSPEEDR = reg_val;
 80004b6:	60a2      	str	r2, [r4, #8]
	if (pin > 28) {
 80004b8:	2b1c      	cmp	r3, #28
 80004ba:	d80e      	bhi.n	80004da <gpio_pin_cfg+0x7e>
	reg_adr = &port->AFR[0];
 80004bc:	3420      	adds	r4, #32
	reg_val &= ~(0x0fu << pin);
 80004be:	220f      	movs	r2, #15
 80004c0:	0010      	movs	r0, r2
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80004c2:	4015      	ands	r5, r2
	reg_val &= ~(0x0fu << pin);
 80004c4:	4098      	lsls	r0, r3
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80004c6:	409d      	lsls	r5, r3
	reg_val = *reg_adr;
 80004c8:	6821      	ldr	r1, [r4, #0]
	reg_val &= ~(0x0fu << pin);
 80004ca:	4381      	bics	r1, r0
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80004cc:	430d      	orrs	r5, r1
	*reg_adr = reg_val;
 80004ce:	6025      	str	r5, [r4, #0]
}
 80004d0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		port->OTYPER &= (uint32_t) ~pin;
 80004d2:	6863      	ldr	r3, [r4, #4]
 80004d4:	438b      	bics	r3, r1
 80004d6:	6063      	str	r3, [r4, #4]
 80004d8:	e7c9      	b.n	800046e <gpio_pin_cfg+0x12>
		pin -= 32;
 80004da:	3b20      	subs	r3, #32
 80004dc:	b29b      	uxth	r3, r3
		reg_adr = &port->AFR[1];
 80004de:	3424      	adds	r4, #36	; 0x24
 80004e0:	e7ed      	b.n	80004be <gpio_pin_cfg+0x62>
	...

080004e4 <RCC_gpio_init>:
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <RCC_gpio_init+0x24>)
 80004e8:	0292      	lsls	r2, r2, #10
 80004ea:	6959      	ldr	r1, [r3, #20]
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	6959      	ldr	r1, [r3, #20]
 80004f4:	02d2      	lsls	r2, r2, #11
 80004f6:	430a      	orrs	r2, r1
 80004f8:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	6959      	ldr	r1, [r3, #20]
 80004fe:	0312      	lsls	r2, r2, #12
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000

0800050c <SystemClock_Config>:


/**********************************************************************/
static INLINE void rcc_FlashLatency_set( uint32_t latency ) {
	// Select flash latency
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 800050c:	2301      	movs	r3, #1
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <SystemClock_Config+0x78>)
#endif
}
/**********************************************************************/

/**********************************************************************/
void SystemClock_Config(void) {
 8000510:	b510      	push	{r4, lr}
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8000512:	6811      	ldr	r1, [r2, #0]
 8000514:	4399      	bics	r1, r3
 8000516:	4319      	orrs	r1, r3
 8000518:	6011      	str	r1, [r2, #0]
	while ( (FLASH->ACR & FLASH_ACR_LATENCY) == 0 ) {}
 800051a:	6811      	ldr	r1, [r2, #0]
 800051c:	4219      	tst	r1, r3
 800051e:	d0fc      	beq.n	800051a <SystemClock_Config+0xe>
	SET_BIT( RCC->CR, reg );
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <SystemClock_Config+0x7c>)
 8000522:	4a1a      	ldr	r2, [pc, #104]	; (800058c <SystemClock_Config+0x80>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
	while ( (RCC->CR & checkClock ) == 0 ) {}
 800052a:	2202      	movs	r2, #2
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	4211      	tst	r1, r2
 8000530:	d0fc      	beq.n	800052c <SystemClock_Config+0x20>
	MODIFY_REG( RCC->CFGR,
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	4916      	ldr	r1, [pc, #88]	; (8000590 <SystemClock_Config+0x84>)
 8000536:	4011      	ands	r1, r2
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0352      	lsls	r2, r2, #13
 800053c:	430a      	orrs	r2, r1
 800053e:	605a      	str	r2, [r3, #4]
	SET_BIT( RCC->CFGR, source );
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	0212      	lsls	r2, r2, #8
 8000546:	430a      	orrs	r2, r1
 8000548:	605a      	str	r2, [r3, #4]
	SET_BIT( RCC->CR, RCC_CR_PLLON);
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	6819      	ldr	r1, [r3, #0]
 800054e:	0452      	lsls	r2, r2, #17
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
	while (((RCC->CR) & RCC_CR_PLLRDY) == 0) {}
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	0492      	lsls	r2, r2, #18
 8000558:	6819      	ldr	r1, [r3, #0]
 800055a:	4211      	tst	r1, r2
 800055c:	d0fc      	beq.n	8000558 <SystemClock_Config+0x4c>
	MODIFY_REG( RCC->CFGR,
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	490c      	ldr	r1, [pc, #48]	; (8000594 <SystemClock_Config+0x88>)
 8000562:	400a      	ands	r2, r1
	MODIFY_REG( RCC->CFGR2,
 8000564:	210f      	movs	r1, #15
	MODIFY_REG( RCC->CFGR,
 8000566:	605a      	str	r2, [r3, #4]
	MODIFY_REG( RCC->CFGR2,
 8000568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800056a:	438a      	bics	r2, r1
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT( RCC->CFGR, pllSource);
 800056e:	2202      	movs	r2, #2
 8000570:	6859      	ldr	r1, [r3, #4]
 8000572:	430a      	orrs	r2, r1
 8000574:	605a      	str	r2, [r3, #4]
	while ( (RCC->CFGR & sourceCheck) == 0 ) {}
 8000576:	2208      	movs	r2, #8
 8000578:	6859      	ldr	r1, [r3, #4]
 800057a:	4211      	tst	r1, r2
 800057c:	d0fc      	beq.n	8000578 <SystemClock_Config+0x6c>

	rcc_SystemClock_bus_presscaler();

	rcc_SystemClockMux_switch( RCC_CFGR_SW_PLL );

	SystemCoreClockUpdate();
 800057e:	f7ff ff17 	bl	80003b0 <SystemCoreClockUpdate>
}
 8000582:	bd10      	pop	{r4, pc}
 8000584:	40022000 	.word	0x40022000
 8000588:	40021000 	.word	0x40021000
 800058c:	00080001 	.word	0x00080001
 8000590:	ffc3ffff 	.word	0xffc3ffff
 8000594:	fffff80f 	.word	0xfffff80f

08000598 <sw_spi_hw_init>:
}
#endif
/*************************************************************************************/

/* 8. ********************************************************************************/
void sw_spi_hw_init( const SPI_param_t * param ) {
 8000598:	b570      	push	{r4, r5, r6, lr}
	if (hSPI->SPI == SPI1)
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
	if (hSPI->SPI == SPI2)
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800059a:	2480      	movs	r4, #128	; 0x80
 800059c:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <sw_spi_hw_init+0xb8>)
 800059e:	01e4      	lsls	r4, r4, #7
 80005a0:	69d3      	ldr	r3, [r2, #28]

	gpio_pin_cfg( hSPI->sck_port,  hSPI->sck_pin,  hSPI->alternateFun );
 80005a2:	2180      	movs	r1, #128	; 0x80
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80005a4:	4323      	orrs	r3, r4
 80005a6:	61d3      	str	r3, [r2, #28]
	gpio_pin_cfg( hSPI->sck_port,  hSPI->sck_pin,  hSPI->alternateFun );
 80005a8:	2288      	movs	r2, #136	; 0x88
void sw_spi_hw_init( const SPI_param_t * param ) {
 80005aa:	0005      	movs	r5, r0
	gpio_pin_cfg( hSPI->sck_port,  hSPI->sck_pin,  hSPI->alternateFun );
 80005ac:	00d2      	lsls	r2, r2, #3
 80005ae:	4829      	ldr	r0, [pc, #164]	; (8000654 <sw_spi_hw_init+0xbc>)
 80005b0:	0189      	lsls	r1, r1, #6
 80005b2:	f7ff ff53 	bl	800045c <gpio_pin_cfg>
	gpio_pin_cfg( hSPI->miso_port, hSPI->miso_pin, hSPI->alternateFun );
 80005b6:	2288      	movs	r2, #136	; 0x88
 80005b8:	0021      	movs	r1, r4
 80005ba:	4826      	ldr	r0, [pc, #152]	; (8000654 <sw_spi_hw_init+0xbc>)
 80005bc:	00d2      	lsls	r2, r2, #3
 80005be:	f7ff ff4d 	bl	800045c <gpio_pin_cfg>
	gpio_pin_cfg( hSPI->mosi_port, hSPI->mosi_pin, hSPI->alternateFun );
 80005c2:	2288      	movs	r2, #136	; 0x88
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	4823      	ldr	r0, [pc, #140]	; (8000654 <sw_spi_hw_init+0xbc>)
 80005c8:	00d2      	lsls	r2, r2, #3
 80005ca:	0209      	lsls	r1, r1, #8
 80005cc:	f7ff ff46 	bl	800045c <gpio_pin_cfg>
	SET_BIT( hSPI->SPI->CR1,
 80005d0:	23c0      	movs	r3, #192	; 0xc0
 80005d2:	4c21      	ldr	r4, [pc, #132]	; (8000658 <sw_spi_hw_init+0xc0>)
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	6822      	ldr	r2, [r4, #0]
	gpio_pin_cfg( SOFT_NSS_PORT, SOFT_NSS_PIN, gpio_mode_output_PP_HS );
 80005d8:	2180      	movs	r1, #128	; 0x80
	SET_BIT( hSPI->SPI->CR1,
 80005da:	4313      	orrs	r3, r2
	gpio_pin_cfg( SOFT_NSS_PORT, SOFT_NSS_PIN, gpio_mode_output_PP_HS );
 80005dc:	2090      	movs	r0, #144	; 0x90
 80005de:	22b0      	movs	r2, #176	; 0xb0
	SET_BIT( hSPI->SPI->CR1,
 80005e0:	6023      	str	r3, [r4, #0]
	gpio_pin_cfg( SOFT_NSS_PORT, SOFT_NSS_PIN, gpio_mode_output_PP_HS );
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	0089      	lsls	r1, r1, #2
 80005e6:	05c0      	lsls	r0, r0, #23
 80005e8:	f7ff ff38 	bl	800045c <gpio_pin_cfg>
static inline void NSS_HI(void) { gpio_pin_HI( SOFT_NSS_PORT, SOFT_NSS_PIN ); }
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	2090      	movs	r0, #144	; 0x90
 80005f0:	0089      	lsls	r1, r1, #2
 80005f2:	05c0      	lsls	r0, r0, #23
 80005f4:	f7ff ff23 	bl	800043e <gpio_pin_HI>
	sw_spi_nss_mode();
#ifdef SPI_DMA
	spi_dma_init();
	hSPI->SPI->CR2 |= SPI_CR2_TXDMAEN;
#endif
	hSPI->SPI->CR1 |= SPI_CR1_MSTR					// Master Selection
 80005f8:	2314      	movs	r3, #20
 80005fa:	6822      	ldr	r2, [r4, #0]
			  	  | (spiFclk_8 << SPI_CR1_BR_Pos);

	if (param->msblsb == LSBFIRST) {
 80005fc:	7829      	ldrb	r1, [r5, #0]
	hSPI->SPI->CR1 |= SPI_CR1_MSTR					// Master Selection
 80005fe:	4313      	orrs	r3, r2
 8000600:	6023      	str	r3, [r4, #0]
	if (param->msblsb == LSBFIRST) {
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	2901      	cmp	r1, #1
 8000606:	d117      	bne.n	8000638 <sw_spi_hw_init+0xa0>
		hSPI->SPI->CR1 |= SPI_CR1_LSBFIRST;
 8000608:	6821      	ldr	r1, [r4, #0]
 800060a:	430a      	orrs	r2, r1
 800060c:	6022      	str	r2, [r4, #0]
	} else {
		hSPI->SPI->CR1 &= ~SPI_CR1_LSBFIRST;
	}
	if (param->cpol == CPOL_HIGH) {
 800060e:	7869      	ldrb	r1, [r5, #1]
 8000610:	2202      	movs	r2, #2
 8000612:	2901      	cmp	r1, #1
 8000614:	d114      	bne.n	8000640 <sw_spi_hw_init+0xa8>
		hSPI->SPI->CR1 |= SPI_CR1_CPOL;
 8000616:	6821      	ldr	r1, [r4, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	6022      	str	r2, [r4, #0]
	} else {
		hSPI->SPI->CR1 &= ~SPI_CR1_CPOL;
	}
	if (param->cpha == CPHA_LEADING) {
 800061c:	78a9      	ldrb	r1, [r5, #2]
 800061e:	2201      	movs	r2, #1
 8000620:	2900      	cmp	r1, #0
 8000622:	d111      	bne.n	8000648 <sw_spi_hw_init+0xb0>
		hSPI->SPI->CR1 |= SPI_CR1_CPHA;
 8000624:	6821      	ldr	r1, [r4, #0]
 8000626:	430a      	orrs	r2, r1
 8000628:	6022      	str	r2, [r4, #0]
	}

#ifdef SPI_IRQ
	hSPI->SPI->CR2 |= SPI_CR2_TXEIE;			// Tx buffer Empty Interrupt Enable
#endif
	hSPI->SPI->SR = 0;
 800062a:	2200      	movs	r2, #0
 800062c:	60a2      	str	r2, [r4, #8]
	hSPI->SPI->CR1 |= SPI_CR1_SPE;
 800062e:	6821      	ldr	r1, [r4, #0]
 8000630:	3240      	adds	r2, #64	; 0x40
 8000632:	430a      	orrs	r2, r1
 8000634:	6022      	str	r2, [r4, #0]
}
 8000636:	bd70      	pop	{r4, r5, r6, pc}
		hSPI->SPI->CR1 &= ~SPI_CR1_LSBFIRST;
 8000638:	6821      	ldr	r1, [r4, #0]
 800063a:	4391      	bics	r1, r2
 800063c:	6021      	str	r1, [r4, #0]
 800063e:	e7e6      	b.n	800060e <sw_spi_hw_init+0x76>
		hSPI->SPI->CR1 &= ~SPI_CR1_CPOL;
 8000640:	6821      	ldr	r1, [r4, #0]
 8000642:	4391      	bics	r1, r2
 8000644:	6021      	str	r1, [r4, #0]
 8000646:	e7e9      	b.n	800061c <sw_spi_hw_init+0x84>
		hSPI->SPI->CR1 &= ~SPI_CR1_CPHA;
 8000648:	6821      	ldr	r1, [r4, #0]
 800064a:	4391      	bics	r1, r2
 800064c:	6021      	str	r1, [r4, #0]
 800064e:	e7ec      	b.n	800062a <sw_spi_hw_init+0x92>
 8000650:	40021000 	.word	0x40021000
 8000654:	48000400 	.word	0x48000400
 8000658:	40003800 	.word	0x40003800

0800065c <sw_spi_hw_send_buff8>:
	while ( hSPI->SPI->SR & SPI_SR_BSY ) {}
#ifdef SOFT_NSS
	NSS_HI();
#endif
}
void sw_spi_hw_send_buff8( uint8_t * buffer, uint8_t buffSize, uint8_t bitSize ){
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <sw_spi_hw_send_buff8+0x44>)
	if ( dataSizeBits < 4 ) return;				// Data size from 4 - 16 bit
 8000660:	2a03      	cmp	r2, #3
 8000662:	d90d      	bls.n	8000680 <sw_spi_hw_send_buff8+0x24>
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8000664:	2440      	movs	r4, #64	; 0x40
 8000666:	681d      	ldr	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8000668:	4e0e      	ldr	r6, [pc, #56]	; (80006a4 <sw_spi_hw_send_buff8+0x48>)
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 800066a:	43a5      	bics	r5, r4
 800066c:	601d      	str	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 800066e:	685d      	ldr	r5, [r3, #4]
	uint32_t tmp = ( (uint32_t)dataSizeBits - 1 ) << SPI_CR2_DS_Pos;
 8000670:	3a01      	subs	r2, #1
 8000672:	0212      	lsls	r2, r2, #8
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8000674:	4035      	ands	r5, r6
 8000676:	432a      	orrs	r2, r5
 8000678:	605a      	str	r2, [r3, #4]
	SET_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4314      	orrs	r4, r2
 800067e:	601c      	str	r4, [r3, #0]
	sw_spi_data_size( bitSize );

	for ( uint8_t i=0; i < buffSize; i++ ) {
		*(uint8_t *)&(hSPI->SPI->DR) = *(buffer + i);
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 8000680:	2202      	movs	r2, #2
 8000682:	1841      	adds	r1, r0, r1
	for ( uint8_t i=0; i < buffSize; i++ ) {
 8000684:	4281      	cmp	r1, r0
 8000686:	d104      	bne.n	8000692 <sw_spi_hw_send_buff8+0x36>
	}
	while( (hSPI->SPI->SR & SPI_SR_BSY) != 0 ) {}	// Wait to clock stop
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	6899      	ldr	r1, [r3, #8]
 800068c:	4211      	tst	r1, r2
 800068e:	d1fc      	bne.n	800068a <sw_spi_hw_send_buff8+0x2e>
}
 8000690:	bd70      	pop	{r4, r5, r6, pc}
		*(uint8_t *)&(hSPI->SPI->DR) = *(buffer + i);
 8000692:	7804      	ldrb	r4, [r0, #0]
 8000694:	731c      	strb	r4, [r3, #12]
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 8000696:	689c      	ldr	r4, [r3, #8]
 8000698:	4214      	tst	r4, r2
 800069a:	d0fc      	beq.n	8000696 <sw_spi_hw_send_buff8+0x3a>
	for ( uint8_t i=0; i < buffSize; i++ ) {
 800069c:	3001      	adds	r0, #1
 800069e:	e7f1      	b.n	8000684 <sw_spi_hw_send_buff8+0x28>
 80006a0:	40003800 	.word	0x40003800
 80006a4:	fffff0ff 	.word	0xfffff0ff

080006a8 <sw_spi_hw_send_buff16>:
void sw_spi_hw_send_buff16( uint16_t * buffer, uint8_t buffSize, uint8_t bitSize ){
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <sw_spi_hw_send_buff16+0x48>)
	if ( dataSizeBits < 4 ) return;				// Data size from 4 - 16 bit
 80006ac:	2a03      	cmp	r2, #3
 80006ae:	d90d      	bls.n	80006cc <sw_spi_hw_send_buff16+0x24>
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 80006b0:	2440      	movs	r4, #64	; 0x40
 80006b2:	681d      	ldr	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 80006b4:	4e0f      	ldr	r6, [pc, #60]	; (80006f4 <sw_spi_hw_send_buff16+0x4c>)
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 80006b6:	43a5      	bics	r5, r4
 80006b8:	601d      	str	r5, [r3, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 80006ba:	685d      	ldr	r5, [r3, #4]
	uint32_t tmp = ( (uint32_t)dataSizeBits - 1 ) << SPI_CR2_DS_Pos;
 80006bc:	3a01      	subs	r2, #1
 80006be:	0212      	lsls	r2, r2, #8
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 80006c0:	4035      	ands	r5, r6
 80006c2:	432a      	orrs	r2, r5
 80006c4:	605a      	str	r2, [r3, #4]
	SET_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4314      	orrs	r4, r2
 80006ca:	601c      	str	r4, [r3, #0]
	sw_spi_data_size( bitSize );

	for ( uint8_t i=0; i < buffSize; i++ ) {
		hSPI->SPI->DR = *(buffer + i);
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 80006cc:	2202      	movs	r2, #2
 80006ce:	0049      	lsls	r1, r1, #1
 80006d0:	1841      	adds	r1, r0, r1
	for ( uint8_t i=0; i < buffSize; i++ ) {
 80006d2:	4281      	cmp	r1, r0
 80006d4:	d104      	bne.n	80006e0 <sw_spi_hw_send_buff16+0x38>
	}
	while( (hSPI->SPI->SR & SPI_SR_BSY) != 0 ) {}	// Wait to clock stop
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	6899      	ldr	r1, [r3, #8]
 80006da:	4211      	tst	r1, r2
 80006dc:	d1fc      	bne.n	80006d8 <sw_spi_hw_send_buff16+0x30>
}
 80006de:	bd70      	pop	{r4, r5, r6, pc}
		hSPI->SPI->DR = *(buffer + i);
 80006e0:	8804      	ldrh	r4, [r0, #0]
 80006e2:	60dc      	str	r4, [r3, #12]
		while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE );
 80006e4:	689c      	ldr	r4, [r3, #8]
 80006e6:	4214      	tst	r4, r2
 80006e8:	d0fc      	beq.n	80006e4 <sw_spi_hw_send_buff16+0x3c>
	for ( uint8_t i=0; i < buffSize; i++ ) {
 80006ea:	3002      	adds	r0, #2
 80006ec:	e7f1      	b.n	80006d2 <sw_spi_hw_send_buff16+0x2a>
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40003800 	.word	0x40003800
 80006f4:	fffff0ff 	.word	0xfffff0ff

080006f8 <sw_spi_hw_write_read>:
/*************************************************************************************/

/* 10. *******************************************************************************/
uint16_t sw_spi_hw_write_read( uint16_t data, uint32_t bitSize ) {
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	0006      	movs	r6, r0
 80006fc:	000d      	movs	r5, r1
 80006fe:	4c1b      	ldr	r4, [pc, #108]	; (800076c <sw_spi_hw_write_read+0x74>)
	if ( dataSizeBits < 4 ) return;				// Data size from 4 - 16 bit
 8000700:	2903      	cmp	r1, #3
 8000702:	d90d      	bls.n	8000720 <sw_spi_hw_write_read+0x28>
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 8000704:	2240      	movs	r2, #64	; 0x40
 8000706:	6823      	ldr	r3, [r4, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <sw_spi_hw_write_read+0x78>)
	CLEAR_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 800070a:	4393      	bics	r3, r2
 800070c:	6023      	str	r3, [r4, #0]
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 800070e:	6861      	ldr	r1, [r4, #4]
	uint32_t tmp = ( (uint32_t)dataSizeBits - 1 ) << SPI_CR2_DS_Pos;
 8000710:	1e6b      	subs	r3, r5, #1
 8000712:	021b      	lsls	r3, r3, #8
	MODIFY_REG( hSPI->SPI->CR2, SPI_CR2_DS, tmp );
 8000714:	4001      	ands	r1, r0
 8000716:	430b      	orrs	r3, r1
 8000718:	6063      	str	r3, [r4, #4]
	SET_BIT( hSPI->SPI->CR1, SPI_CR1_SPE );
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	431a      	orrs	r2, r3
 800071e:	6022      	str	r2, [r4, #0]
static inline void NSS_LO(void) { gpio_pin_LO( SOFT_NSS_PORT, SOFT_NSS_PIN ); }
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	2090      	movs	r0, #144	; 0x90
 8000724:	0089      	lsls	r1, r1, #2
 8000726:	05c0      	lsls	r0, r0, #23
 8000728:	f7ff fe7a 	bl	8000420 <gpio_pin_LO>
	sw_spi_data_size( bitSize );
	uint16_t dataLoc = 0;
#ifdef SOFT_NSS
	NSS_LO();
#endif
	while ( (hSPI->SPI->SR & SPI_SR_TXE) != SPI_SR_TXE ) {}
 800072c:	2302      	movs	r3, #2
 800072e:	68a2      	ldr	r2, [r4, #8]
 8000730:	421a      	tst	r2, r3
 8000732:	d0fc      	beq.n	800072e <sw_spi_hw_write_read+0x36>
	if ( bitSize < 9 ) *(uint8_t *)&hSPI->SPI->DR = data;
 8000734:	2d08      	cmp	r5, #8
 8000736:	d813      	bhi.n	8000760 <sw_spi_hw_write_read+0x68>
 8000738:	7326      	strb	r6, [r4, #12]
	else						  	hSPI->SPI->DR = data;

	while ( (hSPI->SPI->SR & SPI_SR_RXNE) != SPI_SR_RXNE ) {}
 800073a:	2301      	movs	r3, #1
 800073c:	68a2      	ldr	r2, [r4, #8]
 800073e:	421a      	tst	r2, r3
 8000740:	d0fc      	beq.n	800073c <sw_spi_hw_write_read+0x44>
	if ( bitSize<9 )dataLoc = *(uint8_t  *)&hSPI->SPI->DR;
 8000742:	2d08      	cmp	r5, #8
 8000744:	d80e      	bhi.n	8000764 <sw_spi_hw_write_read+0x6c>
 8000746:	7b25      	ldrb	r5, [r4, #12]
	else			dataLoc = 				hSPI->SPI->DR;
	while ( hSPI->SPI->SR & SPI_SR_BSY ) {}
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	68a2      	ldr	r2, [r4, #8]
 800074c:	421a      	tst	r2, r3
 800074e:	d1fc      	bne.n	800074a <sw_spi_hw_write_read+0x52>
static inline void NSS_HI(void) { gpio_pin_HI( SOFT_NSS_PORT, SOFT_NSS_PIN ); }
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	2090      	movs	r0, #144	; 0x90
 8000754:	0089      	lsls	r1, r1, #2
 8000756:	05c0      	lsls	r0, r0, #23
 8000758:	f7ff fe71 	bl	800043e <gpio_pin_HI>
#ifdef SOFT_NSS
	NSS_HI();
#endif
	return (uint16_t)dataLoc;
}
 800075c:	0028      	movs	r0, r5
 800075e:	bd70      	pop	{r4, r5, r6, pc}
	else						  	hSPI->SPI->DR = data;
 8000760:	60e6      	str	r6, [r4, #12]
 8000762:	e7ea      	b.n	800073a <sw_spi_hw_write_read+0x42>
	else			dataLoc = 				hSPI->SPI->DR;
 8000764:	68e5      	ldr	r5, [r4, #12]
 8000766:	b2ad      	uxth	r5, r5
 8000768:	e7ee      	b.n	8000748 <sw_spi_hw_write_read+0x50>
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40003800 	.word	0x40003800
 8000770:	fffff0ff 	.word	0xfffff0ff

08000774 <nvic_priority>:
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <nvic_priority+0x48>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	0019      	movs	r1, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077a:	20c4      	movs	r0, #196	; 0xc4
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800077c:	31fc      	adds	r1, #252	; 0xfc
 800077e:	0312      	lsls	r2, r2, #12
}
/************************************************************************/


/************************ Interrupt priority*******************************/
void nvic_priority(void) {
 8000780:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000782:	0080      	lsls	r0, r0, #2
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000784:	604a      	str	r2, [r1, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000786:	581a      	ldr	r2, [r3, r0]
 8000788:	24c1      	movs	r4, #193	; 0xc1
 800078a:	0212      	lsls	r2, r2, #8
 800078c:	0a12      	lsrs	r2, r2, #8
 800078e:	501a      	str	r2, [r3, r0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000790:	2280      	movs	r2, #128	; 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000792:	2080      	movs	r0, #128	; 0x80
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000794:	604a      	str	r2, [r1, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000796:	00a4      	lsls	r4, r4, #2
 8000798:	591a      	ldr	r2, [r3, r4]
 800079a:	05c0      	lsls	r0, r0, #23
 800079c:	0212      	lsls	r2, r2, #8
 800079e:	0a12      	lsrs	r2, r2, #8
 80007a0:	4302      	orrs	r2, r0
 80007a2:	511a      	str	r2, [r3, r4]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007a4:	2380      	movs	r3, #128	; 0x80
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a6:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007a8:	061b      	lsls	r3, r3, #24
 80007aa:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ac:	4904      	ldr	r1, [pc, #16]	; (80007c0 <nvic_priority+0x4c>)
 80007ae:	0612      	lsls	r2, r2, #24
 80007b0:	6a0b      	ldr	r3, [r1, #32]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	4313      	orrs	r3, r2
 80007b8:	620b      	str	r3, [r1, #32]
//	NVIC_SetPendingIRQ( TIM3_IRQn );		// Display refresh IRQ priority
//	NVIC_SetPriority  ( TIM3_IRQn, 1 );
	NVIC_SetPendingIRQ( SysTick_IRQn );		// Systick IRQ priority
	NVIC_SetPriority  ( SysTick_IRQn, 3 );	//

}
 80007ba:	bd10      	pop	{r4, pc}
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <sw_led_off>:

volatile uint32_t ledEventFlag = 0;


#ifdef BSRR_REG
OPTIMISE("O0") void sw_led_off( void ) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	LED1_PORT->BSRR = LED1_PIN;
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <sw_led_off+0x14>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0192      	lsls	r2, r2, #6
 80007ce:	619a      	str	r2, [r3, #24]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	48000800 	.word	0x48000800

080007dc <sw_led_debug_init>:

OPTIMISE("O0") void sw_led_blink( void ) {
	sw_led_xor( LED1_PORT, LED1_PIN );
}

void sw_led_debug_init( void ) {
 80007dc:	b570      	push	{r4, r5, r6, lr}

	sw_led_off( LED2_PORT, LED2_PIN_BLUE );
	sw_led_off( LED2_PORT, LED2_PIN_RED );
	sw_led_off( LED2_PORT, LED2_PIN_GREEN );
#else
	gpio_pin_cfg( LED1_PORT, LED1_PIN, 	gpio_mode_output_OD_LS );
 80007de:	22c0      	movs	r2, #192	; 0xc0
 80007e0:	2180      	movs	r1, #128	; 0x80
	sw_led_off();
#endif

#ifdef	DEBUG_PIN0
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 80007e2:	25b0      	movs	r5, #176	; 0xb0
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <sw_led_debug_init+0x3c>)
 80007e6:	00ad      	lsls	r5, r5, #2
	gpio_pin_cfg( LED1_PORT, LED1_PIN, 	gpio_mode_output_OD_LS );
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <sw_led_debug_init+0x40>)
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	0189      	lsls	r1, r1, #6
 80007ee:	f7ff fe35 	bl	800045c <gpio_pin_cfg>
	sw_led_off();
 80007f2:	f7ff ffe7 	bl	80007c4 <sw_led_off>
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 80007f6:	002a      	movs	r2, r5
 80007f8:	0020      	movs	r0, r4
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	f7ff fe2e 	bl	800045c <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN1
	gpio_pin_cfg( DEBUG_PORT1, DEBUG_PIN1, gpio_mode_output_PP_HS );
 8000800:	002a      	movs	r2, r5
 8000802:	0020      	movs	r0, r4
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	f7ff fe29 	bl	800045c <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN2
	gpio_pin_cfg( DEBUG_PORT2, DEBUG_PIN2, gpio_mode_output_PP_HS );
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	002a      	movs	r2, r5
 800080e:	0020      	movs	r0, r4
 8000810:	0089      	lsls	r1, r1, #2
 8000812:	f7ff fe23 	bl	800045c <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN3
	gpio_pin_cfg( DEBUG_PORT3, DEBUG_PIN3, gpio_mode_output_PP_HS );
#endif
}
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	48000400 	.word	0x48000400
 800081c:	48000800 	.word	0x48000800

08000820 <HT1632C_command>:
};

static const SPI_param_t spi2_ht3216c_Param = { MSBFIRST, CPOL_HIGH, CPHA_LEADING };

/**************************** Basic display function ***************************/
static void HT1632C_command( uint16_t data ) {
 8000820:	b510      	push	{r4, lr}
#if SPI_TRANSFER_MODE == SPI_SW_MODE
	HT1632C_send( &command, ONE_TRANSMIT, 12 );
#elif SPI_TRANSFER_MODE == SPI_HW_MODE
	sw_spi_hw_write_read( data, 12 );
 8000822:	210c      	movs	r1, #12
 8000824:	f7ff ff68 	bl	80006f8 <sw_spi_hw_write_read>
#endif
}
 8000828:	bd10      	pop	{r4, pc}
	...

0800082c <EXTI4_15_IRQHandler>:


#ifdef HARDWARE_SYNC
/*******************************************************************************/
void EXTI4_15_IRQHandler(void) {
	if (EXTI->PR & EXTI_PR_PR8) {
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <EXTI4_15_IRQHandler+0xe4>)
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	6959      	ldr	r1, [r3, #20]
void EXTI4_15_IRQHandler(void) {
 8000834:	b570      	push	{r4, r5, r6, lr}
	if (EXTI->PR & EXTI_PR_PR8) {
 8000836:	4211      	tst	r1, r2
 8000838:	d051      	beq.n	80008de <EXTI4_15_IRQHandler+0xb2>
		EXTI->PR = EXTI_PR_PR8;		// This bit is cleared by writing a 1 to the bit.

		volatile static uint8_t cnt;
		cnt++;
 800083a:	4c36      	ldr	r4, [pc, #216]	; (8000914 <EXTI4_15_IRQHandler+0xe8>)
		EXTI->PR = EXTI_PR_PR8;		// This bit is cleared by writing a 1 to the bit.
 800083c:	615a      	str	r2, [r3, #20]
		cnt++;
 800083e:	7823      	ldrb	r3, [r4, #0]
	if( bright == DYNAMIC_BRIGHT ) {
 8000840:	4935      	ldr	r1, [pc, #212]	; (8000918 <EXTI4_15_IRQHandler+0xec>)
		cnt++;
 8000842:	3301      	adds	r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	7023      	strb	r3, [r4, #0]

		HT1632C_dyna_bright( cnt%2 );
 8000848:	7823      	ldrb	r3, [r4, #0]
	if( bright == DYNAMIC_BRIGHT ) {
 800084a:	7808      	ldrb	r0, [r1, #0]
		HT1632C_dyna_bright( cnt%2 );
 800084c:	3aff      	subs	r2, #255	; 0xff
 800084e:	4013      	ands	r3, r2
	if( bright == DYNAMIC_BRIGHT ) {
 8000850:	2809      	cmp	r0, #9
 8000852:	d14c      	bne.n	80008ee <EXTI4_15_IRQHandler+0xc2>
		if ( dynaBright )	brightness = gammaBright[ 7 ];
 8000854:	3006      	adds	r0, #6
 8000856:	2b00      	cmp	r3, #0
 8000858:	d114      	bne.n	8000884 <EXTI4_15_IRQHandler+0x58>
	if ( i++%2 == 0 ) {
 800085a:	4930      	ldr	r1, [pc, #192]	; (800091c <EXTI4_15_IRQHandler+0xf0>)
 800085c:	780b      	ldrb	r3, [r1, #0]
 800085e:	1898      	adds	r0, r3, r2
 8000860:	7008      	strb	r0, [r1, #0]
 8000862:	492f      	ldr	r1, [pc, #188]	; (8000920 <EXTI4_15_IRQHandler+0xf4>)
 8000864:	4213      	tst	r3, r2
 8000866:	d10c      	bne.n	8000882 <EXTI4_15_IRQHandler+0x56>
		if (dir == 1) {
 8000868:	2500      	movs	r5, #0
 800086a:	482e      	ldr	r0, [pc, #184]	; (8000924 <EXTI4_15_IRQHandler+0xf8>)
 800086c:	780b      	ldrb	r3, [r1, #0]
 800086e:	5745      	ldrsb	r5, [r0, r5]
 8000870:	4295      	cmp	r5, r2
 8000872:	d135      	bne.n	80008e0 <EXTI4_15_IRQHandler+0xb4>
			bright++;
 8000874:	189b      	adds	r3, r3, r2
 8000876:	b2db      	uxtb	r3, r3
 8000878:	700b      	strb	r3, [r1, #0]
			if ( bright == HT1632C_BRIGHT_MAX ) dir =-1;	// DOWN
 800087a:	2b0f      	cmp	r3, #15
 800087c:	d101      	bne.n	8000882 <EXTI4_15_IRQHandler+0x56>
 800087e:	33f0      	adds	r3, #240	; 0xf0
 8000880:	7003      	strb	r3, [r0, #0]
	return bright;
 8000882:	7808      	ldrb	r0, [r1, #0]
	HT1632C_command( HT1632C_SET_BRIGHT + ((brightness & 15) << 1) );
 8000884:	231e      	movs	r3, #30
 8000886:	0040      	lsls	r0, r0, #1
 8000888:	4018      	ands	r0, r3
 800088a:	2394      	movs	r3, #148	; 0x94
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	18c0      	adds	r0, r0, r3
 8000890:	f7ff ffc6 	bl	8000820 <HT1632C_command>
	HT_CS_LO;
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	2090      	movs	r0, #144	; 0x90
		HT1632C_write_buff ( cnt%2 );
 8000898:	7825      	ldrb	r5, [r4, #0]
	HT_CS_LO;
 800089a:	0089      	lsls	r1, r1, #2
 800089c:	05c0      	lsls	r0, r0, #23
 800089e:	f7ff fdbf 	bl	8000420 <gpio_pin_LO>
		HT1632C_write_buff ( cnt%2 );
 80008a2:	b2ed      	uxtb	r5, r5
	command = HT1632C_WRITE;
 80008a4:	23a0      	movs	r3, #160	; 0xa0
		HT1632C_write_buff ( cnt%2 );
 80008a6:	2401      	movs	r4, #1
	if ( chooseBuffer == 0 ) {
 80008a8:	002e      	movs	r6, r5
	command = HT1632C_WRITE;
 80008aa:	481f      	ldr	r0, [pc, #124]	; (8000928 <EXTI4_15_IRQHandler+0xfc>)
 80008ac:	009b      	lsls	r3, r3, #2
	sw_spi_hw_send_buff16( &command, ONE_TRANSMIT, 10 );
 80008ae:	220a      	movs	r2, #10
 80008b0:	2101      	movs	r1, #1
	command = HT1632C_WRITE;
 80008b2:	8003      	strh	r3, [r0, #0]
	if ( chooseBuffer == 0 ) {
 80008b4:	4026      	ands	r6, r4
	sw_spi_hw_send_buff16( &command, ONE_TRANSMIT, 10 );
 80008b6:	f7ff fef7 	bl	80006a8 <sw_spi_hw_send_buff16>
	if ( chooseBuffer == 0 ) {
 80008ba:	4225      	tst	r5, r4
 80008bc:	d11e      	bne.n	80008fc <EXTI4_15_IRQHandler+0xd0>
		sw_spi_hw_send_buff8( (uint8_t *)fb_get_active_buffer(buffer1), FRAMEBUFFER_ALL, 8 );
 80008be:	0030      	movs	r0, r6
 80008c0:	f000 fb1e 	bl	8000f00 <fb_get_active_buffer>
 80008c4:	2208      	movs	r2, #8
 80008c6:	2120      	movs	r1, #32
 80008c8:	f7ff fec8 	bl	800065c <sw_spi_hw_send_buff8>
		fb_switch_buff(buffer1);
 80008cc:	0030      	movs	r0, r6
		fb_switch_buff(buffer2);
 80008ce:	f000 fb2b 	bl	8000f28 <fb_switch_buff>
	HT_CS_HI;
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	2090      	movs	r0, #144	; 0x90
 80008d6:	0089      	lsls	r1, r1, #2
 80008d8:	05c0      	lsls	r0, r0, #23
 80008da:	f7ff fdb0 	bl	800043e <gpio_pin_HI>
		HT1632C_scroll( 5 );
	}
}
 80008de:	bd70      	pop	{r4, r5, r6, pc}
			bright--;
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	700b      	strb	r3, [r1, #0]
			if ( bright == HT1632C_BRIGHT_MIN ) dir = 1;	// UP
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1cb      	bne.n	8000882 <EXTI4_15_IRQHandler+0x56>
 80008ea:	7002      	strb	r2, [r0, #0]
 80008ec:	e7c9      	b.n	8000882 <EXTI4_15_IRQHandler+0x56>
		else		 		brightness = gammaBright[ 1 ];
 80008ee:	0010      	movs	r0, r2
		if ( dynaBright )	brightness = gammaBright[ bright ];
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0c7      	beq.n	8000884 <EXTI4_15_IRQHandler+0x58>
 80008f4:	780b      	ldrb	r3, [r1, #0]
 80008f6:	4a0d      	ldr	r2, [pc, #52]	; (800092c <EXTI4_15_IRQHandler+0x100>)
 80008f8:	5cd0      	ldrb	r0, [r2, r3]
 80008fa:	e7c3      	b.n	8000884 <EXTI4_15_IRQHandler+0x58>
		sw_spi_hw_send_buff8( (uint8_t *)fb_get_active_buffer(buffer2), FRAMEBUFFER_ALL, 8 );
 80008fc:	0020      	movs	r0, r4
 80008fe:	f000 faff 	bl	8000f00 <fb_get_active_buffer>
 8000902:	2208      	movs	r2, #8
 8000904:	2120      	movs	r1, #32
 8000906:	f7ff fea9 	bl	800065c <sw_spi_hw_send_buff8>
		fb_switch_buff(buffer2);
 800090a:	0020      	movs	r0, r4
 800090c:	e7df      	b.n	80008ce <EXTI4_15_IRQHandler+0xa2>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40010400 	.word	0x40010400
 8000914:	20000052 	.word	0x20000052
 8000918:	20000050 	.word	0x20000050
 800091c:	20000056 	.word	0x20000056
 8000920:	20000051 	.word	0x20000051
 8000924:	20000004 	.word	0x20000004
 8000928:	20000054 	.word	0x20000054
 800092c:	08002a14 	.word	0x08002a14

08000930 <HT1632C_init>:
	NVIC_EnableIRQ( TIM2_IRQn );
}
/*******************************************************************************/
#endif
/*******************************************************************************/
void HT1632C_init( void ) {					// setting up the display
 8000930:	b570      	push	{r4, r5, r6, lr}
	gpio_pin_cfg( HT_CS_PORT, 	HT_CS_PIN,	 gpio_mode_output_PP_HS);
 8000932:	2590      	movs	r5, #144	; 0x90
 8000934:	22b0      	movs	r2, #176	; 0xb0
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	05ed      	lsls	r5, r5, #23
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	0089      	lsls	r1, r1, #2
 800093e:	0028      	movs	r0, r5
 8000940:	f7ff fd8c 	bl	800045c <gpio_pin_cfg>

#if SPI_TRANSFER_MODE == SPI_SW_MODE
	gpio_pin_cfg( HT_WR_PORT, 	HT_WR_PIN,	 gpio_mode_output_PP_HS);
	gpio_pin_cfg( HT_DATA_PORT, HT_DATA_PIN, gpio_mode_output_PP_HS);
#elif SPI_TRANSFER_MODE == SPI_HW_MODE
	sw_spi_hw_init( &spi2_ht3216c_Param );
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <HT1632C_init+0x78>)
 8000946:	f7ff fe27 	bl	8000598 <sw_spi_hw_init>
#endif
	HT1632C_command( HT1632C_START_SYS );
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <HT1632C_init+0x7c>)
 800094c:	f7ff ff68 	bl	8000820 <HT1632C_command>
	HT1632C_command( HT1632C_LED_ON );
 8000950:	4817      	ldr	r0, [pc, #92]	; (80009b0 <HT1632C_init+0x80>)
 8000952:	f7ff ff65 	bl	8000820 <HT1632C_command>
	HT1632C_command( HT1632C_SET_CLOCK );
 8000956:	2083      	movs	r0, #131	; 0x83
 8000958:	0100      	lsls	r0, r0, #4
 800095a:	f7ff ff61 	bl	8000820 <HT1632C_command>
	HT1632C_command( HT1632C_SET_LEYOUT );
 800095e:	2084      	movs	r0, #132	; 0x84
 8000960:	0100      	lsls	r0, r0, #4
 8000962:	f7ff ff5d 	bl	8000820 <HT1632C_command>
	HT1632C_command( HT1632C_BLINK_OFF );
 8000966:	2081      	movs	r0, #129	; 0x81
 8000968:	0100      	lsls	r0, r0, #4
 800096a:	f7ff ff59 	bl	8000820 <HT1632C_command>
	HT1632C_command( HT1632C_SET_BRIGHT + (6 << 1) );
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <HT1632C_init+0x84>)
 8000970:	f7ff ff56 	bl	8000820 <HT1632C_command>
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 8000974:	2480      	movs	r4, #128	; 0x80
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000976:	2301      	movs	r3, #1
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HT1632C_init+0x88>)
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 800097a:	0064      	lsls	r4, r4, #1
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800097c:	6991      	ldr	r1, [r2, #24]
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 800097e:	0028      	movs	r0, r5
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000980:	430b      	orrs	r3, r1
 8000982:	6193      	str	r3, [r2, #24]
	gpio_pin_cfg( PORTA, PA8, gpio_mode_in_PU );
 8000984:	0021      	movs	r1, r4
 8000986:	2210      	movs	r2, #16
 8000988:	f7ff fd68 	bl	800045c <gpio_pin_cfg>
	SYSCFG->EXTICR[1] 	|= SYSCFG_EXTICR3_EXTI8_PA;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HT1632C_init+0x8c>)
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	60da      	str	r2, [r3, #12]
	EXTI->FTSR 			|= EXTI_FTSR_TR8;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HT1632C_init+0x90>)
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	4322      	orrs	r2, r4
 8000998:	60da      	str	r2, [r3, #12]
	EXTI->IMR 			|= EXTI_IMR_MR8;			// Interrupt Mask on line 8
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4314      	orrs	r4, r2
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	601c      	str	r4, [r3, #0]
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HT1632C_init+0x94>)
 80009a4:	601a      	str	r2, [r3, #0]
#ifdef HARDWARE_SYNC
	Configure_EXTI();
#else
	sw_tim2_init();
#endif
}
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	08002a1c 	.word	0x08002a1c
 80009ac:	00000802 	.word	0x00000802
 80009b0:	00000806 	.word	0x00000806
 80009b4:	0000094c 	.word	0x0000094c
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010000 	.word	0x40010000
 80009c0:	40010400 	.word	0x40010400
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <register_scroll_event_callback>:

/******** Funkcje callback'owe i zdarzeniowe *************/
static void ( *scroll_event_callback )( uint8_t );
void register_scroll_event_callback(
		void (*callback)( uint8_t aa ) ) {
	scroll_event_callback = callback;
 80009c8:	4b01      	ldr	r3, [pc, #4]	; (80009d0 <register_scroll_event_callback+0x8>)
 80009ca:	6018      	str	r0, [r3, #0]
}
 80009cc:	4770      	bx	lr
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000058 	.word	0x20000058

080009d4 <SW_SCROLL_EVENT>:
/********************************************************/
/**********************************************************************/
void SW_SCROLL_EVENT( uint16_t * softTimer, uint8_t scrollOn ) {
 80009d4:	b510      	push	{r4, lr}
	if ( scrollEvent && scrollOn ) {
 80009d6:	4c07      	ldr	r4, [pc, #28]	; (80009f4 <SW_SCROLL_EVENT+0x20>)
 80009d8:	7823      	ldrb	r3, [r4, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d009      	beq.n	80009f2 <SW_SCROLL_EVENT+0x1e>
 80009de:	2900      	cmp	r1, #0
 80009e0:	d007      	beq.n	80009f2 <SW_SCROLL_EVENT+0x1e>
		if ( scroll_event_callback ) {
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SW_SCROLL_EVENT+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <SW_SCROLL_EVENT+0x1e>
			scroll_event_callback( 0 );
 80009ea:	2000      	movs	r0, #0
 80009ec:	4798      	blx	r3
			scrollEvent = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	7023      	strb	r3, [r4, #0]
		}
	}
}
 80009f2:	bd10      	pop	{r4, pc}
 80009f4:	20000057 	.word	0x20000057
 80009f8:	20000058 	.word	0x20000058

080009fc <osd_init>:

uint8_t osdDisplayContant = DISPLAY_TIME;

/**********************************************************************/
void osd_init( void ) {
	osd_rtc_fonts_param( (FONT_INFO *)&ArialBoldDigits8FontInfo,	// Default TIME font
 80009fc:	2201      	movs	r2, #1
void osd_init( void ) {
 80009fe:	b510      	push	{r4, lr}
	osd_rtc_fonts_param( (FONT_INFO *)&ArialBoldDigits8FontInfo,	// Default TIME font
 8000a00:	4904      	ldr	r1, [pc, #16]	; (8000a14 <osd_init+0x18>)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <osd_init+0x1c>)
 8000a04:	f000 f922 	bl	8000c4c <osd_rtc_fonts_param>
						 (FONT_INFO *)&MagicMatrix_3x7_FontInfo,	// Default DATE font
						 WITHOUT_SEC );
	osd_bright_text_param();
 8000a08:	f000 f8d4 	bl	8000bb4 <osd_bright_text_param>
	softTimer1 = 0;
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <osd_init+0x20>)
 8000a10:	801a      	strh	r2, [r3, #0]
}
 8000a12:	bd10      	pop	{r4, pc}
 8000a14:	080029fc 	.word	0x080029fc
 8000a18:	080028e4 	.word	0x080028e4
 8000a1c:	200002e4 	.word	0x200002e4

08000a20 <osd_manage_screens>:
/**********************************************************************/

/**********************************************************************/
void osd_manage_screens( void ) {
 8000a20:	b570      	push	{r4, r5, r6, lr}
	volatile static uint8_t cnt = 1;
	switch ( osdDisplayContant ) {
 8000a22:	4c1a      	ldr	r4, [pc, #104]	; (8000a8c <osd_manage_screens+0x6c>)
 8000a24:	7820      	ldrb	r0, [r4, #0]
 8000a26:	3801      	subs	r0, #1
 8000a28:	280a      	cmp	r0, #10
 8000a2a:	d81a      	bhi.n	8000a62 <osd_manage_screens+0x42>
 8000a2c:	f7ff fb6c 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000a30:	25191c06 	.word	0x25191c06
 8000a34:	19191919 	.word	0x19191919
 8000a38:	1919      	.short	0x1919
 8000a3a:	2b          	.byte	0x2b
 8000a3b:	00          	.byte	0x00
		case DISPLAY_TIME:				// Switch to display time
			if ( cnt % ( 2*8 + 1 ) ) {
 8000a3c:	4d14      	ldr	r5, [pc, #80]	; (8000a90 <osd_manage_screens+0x70>)
 8000a3e:	782b      	ldrb	r3, [r5, #0]
 8000a40:	011a      	lsls	r2, r3, #4
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	d90c      	bls.n	8000a64 <osd_manage_screens+0x44>
				osd_rtc_display_time();
 8000a4a:	f000 f99f 	bl	8000d8c <osd_rtc_display_time>
				softTimer5 = 500;
 8000a4e:	22fa      	movs	r2, #250	; 0xfa
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <osd_manage_screens+0x74>)
 8000a52:	0052      	lsls	r2, r2, #1
 8000a54:	801a      	strh	r2, [r3, #0]
				osdDisplayContant = DISPLAY_TIME;
 8000a56:	2301      	movs	r3, #1
			} else {
				osdDisplayContant = DISPLAY_DATE;
 8000a58:	7023      	strb	r3, [r4, #0]
			}
			cnt++;
 8000a5a:	782b      	ldrb	r3, [r5, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	702b      	strb	r3, [r5, #0]
//			osdDisplayContant = DISPLAY_TIME;
//			break;
		default:
			break;
	}
}
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
				osdDisplayContant = DISPLAY_DATE;
 8000a64:	2302      	movs	r3, #2
 8000a66:	e7f7      	b.n	8000a58 <osd_manage_screens+0x38>
			osd_rtc_display_date();
 8000a68:	f000 f9cc 	bl	8000e04 <osd_rtc_display_date>
			softTimer5 = 4000;
 8000a6c:	22fa      	movs	r2, #250	; 0xfa
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <osd_manage_screens+0x74>)
 8000a70:	0112      	lsls	r2, r2, #4
			softTimer5 = 2000;
 8000a72:	801a      	strh	r2, [r3, #0]
			osdDisplayContant = DISPLAY_TIME;
 8000a74:	2301      	movs	r3, #1
 8000a76:	7023      	strb	r3, [r4, #0]
			break;
 8000a78:	e7f3      	b.n	8000a62 <osd_manage_screens+0x42>
			input_keyboard_proc();
 8000a7a:	f001 f8cf 	bl	8001c1c <input_keyboard_proc>
			softTimer5 = 2000;
 8000a7e:	22fa      	movs	r2, #250	; 0xfa
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <osd_manage_screens+0x74>)
 8000a82:	00d2      	lsls	r2, r2, #3
 8000a84:	e7f5      	b.n	8000a72 <osd_manage_screens+0x52>
			osd_rtc_display_setTime();
 8000a86:	f000 f9e3 	bl	8000e50 <osd_rtc_display_setTime>
}
 8000a8a:	e7ea      	b.n	8000a62 <osd_manage_screens+0x42>
 8000a8c:	20000006 	.word	0x20000006
 8000a90:	20000005 	.word	0x20000005
 8000a94:	200002d8 	.word	0x200002d8

08000a98 <register_osd_event_callback>:
/**********************************************************************/

/****************** Funkcje callback'owe i zdarzeniowe ****************/
void register_osd_event_callback( void (*callback)( void )) {
	osd_event_callback = callback;
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <register_osd_event_callback+0x8>)
 8000a9a:	6018      	str	r0, [r3, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	2000005c 	.word	0x2000005c

08000aa4 <SW_OSD_EVENT>:
void SW_OSD_EVENT( bool externalEvent ) {
	if ( softTimer5 == 0 ) {
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SW_OSD_EVENT+0x18>)
void SW_OSD_EVENT( bool externalEvent ) {
 8000aa6:	b510      	push	{r4, lr}
	if ( softTimer5 == 0 ) {
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d104      	bne.n	8000ab8 <SW_OSD_EVENT+0x14>
		if( osd_event_callback ) {
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SW_OSD_EVENT+0x1c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d000      	beq.n	8000ab8 <SW_OSD_EVENT+0x14>
			osd_event_callback();
 8000ab6:	4798      	blx	r3
		}
	}
}
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	200002d8 	.word	0x200002d8
 8000ac0:	2000005c 	.word	0x2000005c

08000ac4 <sw_date_to_string>:

/*************************************************************************/
static CHAR	Date[20];

//Format: "20 październik 2018"
CHAR * sw_date_to_string( void ) {
 8000ac4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	Date[0] = '\0';
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4c16      	ldr	r4, [pc, #88]	; (8000b24 <sw_date_to_string+0x60>)

	char Buffer[13];
	// Add day to string
	itoa( ShowDateTime.day, Buffer, 10 );
 8000aca:	4d17      	ldr	r5, [pc, #92]	; (8000b28 <sw_date_to_string+0x64>)
	Date[0] = '\0';
 8000acc:	7023      	strb	r3, [r4, #0]
	itoa( ShowDateTime.day, Buffer, 10 );
 8000ace:	220a      	movs	r2, #10
 8000ad0:	4669      	mov	r1, sp
 8000ad2:	7928      	ldrb	r0, [r5, #4]
 8000ad4:	f001 fba6 	bl	8002224 <itoa>
	strcat( Buffer, " " );
 8000ad8:	4e14      	ldr	r6, [pc, #80]	; (8000b2c <sw_date_to_string+0x68>)
 8000ada:	4668      	mov	r0, sp
 8000adc:	0031      	movs	r1, r6
 8000ade:	f001 fbb6 	bl	800224e <strcat>
	// I'm testing pointer to pointer :)
	wchar_t * * ptr = (wchar_t * *)sw_rtc_get_tables( RETURN_MONTHS ) + ShowDateTime.month - 1;
	wcscat( Date, (wchar_t *) *ptr );
	wcscat( Date, L" " );
#else
	strcat( Date, Buffer );
 8000ae2:	4669      	mov	r1, sp
 8000ae4:	0020      	movs	r0, r4
 8000ae6:	f001 fbb2 	bl	800224e <strcat>
	CHAR * * ptr = (CHAR * *)sw_rtc_get_tables( RETURN_MONTHS ) + ShowDateTime.month - 1;
 8000aea:	796b      	ldrb	r3, [r5, #5]
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <sw_date_to_string+0x6c>)
	strcat( Date, (CHAR *) *ptr );
 8000aee:	0020      	movs	r0, r4
	CHAR * * ptr = (CHAR * *)sw_rtc_get_tables( RETURN_MONTHS ) + ShowDateTime.month - 1;
 8000af0:	189b      	adds	r3, r3, r2
	strcat( Date, (CHAR *) *ptr );
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <sw_date_to_string+0x70>)
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	5899      	ldr	r1, [r3, r2]
 8000af8:	f001 fba9 	bl	800224e <strcat>
	strcat( Date, " " );
 8000afc:	0031      	movs	r1, r6
 8000afe:	0020      	movs	r0, r4
 8000b00:	f001 fba5 	bl	800224e <strcat>
#endif
	itoa( 2000 + ShowDateTime.year, Buffer, 10 );
 8000b04:	23fa      	movs	r3, #250	; 0xfa
 8000b06:	79a8      	ldrb	r0, [r5, #6]
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	4669      	mov	r1, sp
 8000b0e:	18c0      	adds	r0, r0, r3
 8000b10:	f001 fb88 	bl	8002224 <itoa>

#ifdef UNICODE
	text_char_to_wide( Buffer_w, Buffer );
	wcscat( Date, Buffer_w );						// Add day to string
#else
	strcat( Date, Buffer );
 8000b14:	4669      	mov	r1, sp
 8000b16:	0020      	movs	r0, r4
 8000b18:	f001 fb99 	bl	800224e <strcat>
#endif
	return Date;
}
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	b004      	add	sp, #16
 8000b20:	bd70      	pop	{r4, r5, r6, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000060 	.word	0x20000060
 8000b28:	200002b3 	.word	0x200002b3
 8000b2c:	08002a1f 	.word	0x08002a1f
 8000b30:	3fffffff 	.word	0x3fffffff
 8000b34:	08002ac4 	.word	0x08002ac4

08000b38 <scroll_text_param>:

/********************************************************************************************/
static T_STRING Text2;

void scroll_text_param( FONT_INFO * font ) {
	graphic_set_string( &Text2, 0, 0, font );
 8000b38:	2200      	movs	r2, #0
void scroll_text_param( FONT_INFO * font ) {
 8000b3a:	b510      	push	{r4, lr}
 8000b3c:	0003      	movs	r3, r0
	graphic_set_string( &Text2, 0, 0, font );
 8000b3e:	0011      	movs	r1, r2
 8000b40:	4801      	ldr	r0, [pc, #4]	; (8000b48 <scroll_text_param+0x10>)
 8000b42:	f000 fa89 	bl	8001058 <graphic_set_string>
}
 8000b46:	bd10      	pop	{r4, pc}
 8000b48:	20000074 	.word	0x20000074

08000b4c <scroll_text_display>:

void scroll_text_display( uint8_t Length ) {
 8000b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static int16_t k = 0;
	uint8_t textLength;

	Text2.str = sw_date_to_string();
 8000b4e:	f7ff ffb9 	bl	8000ac4 <sw_date_to_string>
	Text2.x   = k++;
 8000b52:	4d13      	ldr	r5, [pc, #76]	; (8000ba0 <scroll_text_display+0x54>)
	Text2.str = sw_date_to_string();
 8000b54:	4e13      	ldr	r6, [pc, #76]	; (8000ba4 <scroll_text_display+0x58>)
	Text2.x   = k++;
 8000b56:	2200      	movs	r2, #0
 8000b58:	5eab      	ldrsh	r3, [r5, r2]
	Text2.str = sw_date_to_string();
 8000b5a:	60f0      	str	r0, [r6, #12]
	Text2.x   = k++;
 8000b5c:	1c5a      	adds	r2, r3, #1

	T_DISPLAY * NoActiveBuffer = fb_get_noActive_buffer(buffer2);
 8000b5e:	2001      	movs	r0, #1
	Text2.x   = k++;
 8000b60:	802a      	strh	r2, [r5, #0]
 8000b62:	8033      	strh	r3, [r6, #0]
	T_DISPLAY * NoActiveBuffer = fb_get_noActive_buffer(buffer2);
 8000b64:	f000 f9d4 	bl	8000f10 <fb_get_noActive_buffer>
 8000b68:	0004      	movs	r4, r0
	fb_clear_screen( NoActiveBuffer );
 8000b6a:	f000 f9f7 	bl	8000f5c <fb_clear_screen>
	textLength = graphic_puts_RAM( NoActiveBuffer, &Text2, FONTx1, WhiteColor, BlackColor, &GammaRGB );
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <scroll_text_display+0x5c>)
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <scroll_text_display+0x60>)
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	466b      	mov	r3, sp
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	0031      	movs	r1, r6
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <scroll_text_display+0x64>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0020      	movs	r0, r4
 8000b84:	f000 fa72 	bl	800106c <graphic_puts_RAM>
 8000b88:	0004      	movs	r4, r0
	fb_buffer_is_ready(buffer2);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f000 f9de 	bl	8000f4c <fb_buffer_is_ready>

	if ( k == SCREEN_WIDTH) {
 8000b90:	2200      	movs	r2, #0
 8000b92:	5eab      	ldrsh	r3, [r5, r2]
 8000b94:	2b20      	cmp	r3, #32
 8000b96:	d102      	bne.n	8000b9e <scroll_text_display+0x52>
		k = -textLength;
 8000b98:	b2e4      	uxtb	r4, r4
 8000b9a:	4264      	negs	r4, r4
 8000b9c:	802c      	strh	r4, [r5, #0]
	}
}
 8000b9e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	20000074 	.word	0x20000074
 8000ba8:	08002ab4 	.word	0x08002ab4
 8000bac:	08002ab0 	.word	0x08002ab0
 8000bb0:	08002ac0 	.word	0x08002ac0

08000bb4 <osd_bright_text_param>:
static const CHAR brightDYN[] 	= "Dy";


/********************************************************************************************/
void osd_bright_text_param( void ) {
	graphic_set_string( &Bright1,  0, 0, (FONT_INFO *)&Arial6pt8FontInfo_var );
 8000bb4:	2200      	movs	r2, #0
void osd_bright_text_param( void ) {
 8000bb6:	b570      	push	{r4, r5, r6, lr}
	graphic_set_string( &Bright1,  0, 0, (FONT_INFO *)&Arial6pt8FontInfo_var );
 8000bb8:	4d07      	ldr	r5, [pc, #28]	; (8000bd8 <osd_bright_text_param+0x24>)
 8000bba:	4c08      	ldr	r4, [pc, #32]	; (8000bdc <osd_bright_text_param+0x28>)
 8000bbc:	002b      	movs	r3, r5
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0020      	movs	r0, r4
 8000bc2:	f000 fa49 	bl	8001058 <graphic_set_string>
	graphic_set_string( &Bright2, 23, 0, (FONT_INFO *)&Arial6pt8FontInfo_var );
 8000bc6:	002b      	movs	r3, r5
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2117      	movs	r1, #23
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <osd_bright_text_param+0x2c>)
 8000bce:	f000 fa43 	bl	8001058 <graphic_set_string>

	Bright1.str = (CHAR *)bright1;
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <osd_bright_text_param+0x30>)
 8000bd4:	60e3      	str	r3, [r4, #12]
}
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	0800283c 	.word	0x0800283c
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	200000a0 	.word	0x200000a0
 8000be4:	08002af4 	.word	0x08002af4

08000be8 <osd_rtc_puts_int_RAM.constprop.0>:

static const T_COLOR colorClock = {1};
/********************************************************************************************/

/********************************* Draw the numbers on screen *******************************/
static void osd_rtc_puts_int_RAM( T_DISPLAY * buffer, T_STRING *string, int data,
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
					uint8_t textSize, T_COLOR color, T_COLOR bg, const T_GAMMA * gamma ) {
	char buffer1[16];
	char buffer2[16] = "0";
 8000bea:	2330      	movs	r3, #48	; 0x30
static void osd_rtc_puts_int_RAM( T_DISPLAY * buffer, T_STRING *string, int data,
 8000bec:	0015      	movs	r5, r2
 8000bee:	000c      	movs	r4, r1
 8000bf0:	b08d      	sub	sp, #52	; 0x34
	char buffer2[16] = "0";
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	2100      	movs	r1, #0
static void osd_rtc_puts_int_RAM( T_DISPLAY * buffer, T_STRING *string, int data,
 8000bf6:	9003      	str	r0, [sp, #12]

	itoa( data, buffer1, 10 );
 8000bf8:	ae04      	add	r6, sp, #16
	char buffer2[16] = "0";
 8000bfa:	a809      	add	r0, sp, #36	; 0x24
 8000bfc:	9308      	str	r3, [sp, #32]
 8000bfe:	f001 fb1e 	bl	800223e <memset>
	itoa( data, buffer1, 10 );
 8000c02:	220a      	movs	r2, #10
 8000c04:	0031      	movs	r1, r6
 8000c06:	0028      	movs	r0, r5
 8000c08:	f001 fb0c 	bl	8002224 <itoa>
	char buffer2[16] = "0";
 8000c0c:	af08      	add	r7, sp, #32
	string->str = buffer1;
 8000c0e:	60e6      	str	r6, [r4, #12]

	if ( data > -1 && data < 10 ) {
 8000c10:	2d09      	cmp	r5, #9
 8000c12:	dc04      	bgt.n	8000c1e <osd_rtc_puts_int_RAM.constprop.0+0x36>
		strcat( buffer2, buffer1 );
 8000c14:	0031      	movs	r1, r6
 8000c16:	0038      	movs	r0, r7
 8000c18:	f001 fb19 	bl	800224e <strcat>
		string->str = buffer2;
 8000c1c:	60e7      	str	r7, [r4, #12]
#ifdef UNICODE
	wchar_t buffer_wchar[16];
	(void)text_char_to_wide( buffer_wchar, str );
	string->str = buffer_wchar;
#endif
	string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <osd_rtc_puts_int_RAM.constprop.0+0x58>)
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <osd_rtc_puts_int_RAM.constprop.0+0x5c>)
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	466b      	mov	r3, sp
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	0021      	movs	r1, r4
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <osd_rtc_puts_int_RAM.constprop.0+0x60>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	9803      	ldr	r0, [sp, #12]
 8000c34:	f000 fa1a 	bl	800106c <graphic_puts_RAM>
 8000c38:	8120      	strh	r0, [r4, #8]
}
 8000c3a:	b00d      	add	sp, #52	; 0x34
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	08002b08 	.word	0x08002b08
 8000c44:	08002b04 	.word	0x08002b04
 8000c48:	08002b14 	.word	0x08002b14

08000c4c <osd_rtc_fonts_param>:
	return 0;
}
/********************************************************************************************/

/********************************************************************************************/
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	TextHH.str = "00";
 8000c4e:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <osd_rtc_fonts_param+0x10c>)
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000c50:	000e      	movs	r6, r1
	TextHH.str = "00";
 8000c52:	4942      	ldr	r1, [pc, #264]	; (8000d5c <osd_rtc_fonts_param+0x110>)
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000c54:	0005      	movs	r5, r0
	TextHH.str = "00";
 8000c56:	60cb      	str	r3, [r1, #12]
	TextMM.str = "00";
 8000c58:	4941      	ldr	r1, [pc, #260]	; (8000d60 <osd_rtc_fonts_param+0x114>)
void osd_rtc_fonts_param( FONT_INFO * timeFont, FONT_INFO * dateFont, uint8_t displaySeconds ) {
 8000c5a:	b085      	sub	sp, #20
	TextMM.str = "00";
 8000c5c:	60cb      	str	r3, [r1, #12]
	TextSS.str = "00";
 8000c5e:	4941      	ldr	r1, [pc, #260]	; (8000d64 <osd_rtc_fonts_param+0x118>)
 8000c60:	60cb      	str	r3, [r1, #12]
	Delim1.str = ":";
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <osd_rtc_fonts_param+0x11c>)
 8000c64:	4941      	ldr	r1, [pc, #260]	; (8000d6c <osd_rtc_fonts_param+0x120>)
 8000c66:	60cb      	str	r3, [r1, #12]
	Delim2.str = ":";
 8000c68:	4941      	ldr	r1, [pc, #260]	; (8000d70 <osd_rtc_fonts_param+0x124>)
 8000c6a:	60cb      	str	r3, [r1, #12]
	Delim3.str = ";";
 8000c6c:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <osd_rtc_fonts_param+0x128>)
 8000c6e:	4942      	ldr	r1, [pc, #264]	; (8000d78 <osd_rtc_fonts_param+0x12c>)
 8000c70:	60d9      	str	r1, [r3, #12]
	if ( hDigit > SCREEN_HEIGHT ) return 0;		// Font height larger screen height
 8000c72:	7803      	ldrb	r3, [r0, #0]
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d854      	bhi.n	8000d22 <osd_rtc_fonts_param+0xd6>
	uint8_t wDigit = digitsFont->charInfo[ '0' - digitsFont->startChar ].widthBits;		// Width of "0" character
 8000c78:	2330      	movs	r3, #48	; 0x30
	uint8_t wDelim = digitsFont->charInfo[ ':' - digitsFont->startChar ].widthBits;		// Width of ";" character
 8000c7a:	213a      	movs	r1, #58	; 0x3a
	uint8_t wDigit = digitsFont->charInfo[ '0' - digitsFont->startChar ].widthBits;		// Width of "0" character
 8000c7c:	686c      	ldr	r4, [r5, #4]
 8000c7e:	68c0      	ldr	r0, [r0, #12]
 8000c80:	1b1b      	subs	r3, r3, r4
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	5c1b      	ldrb	r3, [r3, r0]
	uint8_t wDelim = digitsFont->charInfo[ ':' - digitsFont->startChar ].widthBits;		// Width of ";" character
 8000c86:	1b09      	subs	r1, r1, r4
	uint8_t wInter = digitsFont->interspacePixels;
 8000c88:	7a2c      	ldrb	r4, [r5, #8]
	uint8_t wDelim = digitsFont->charInfo[ ':' - digitsFont->startChar ].widthBits;		// Width of ";" character
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	5c0f      	ldrb	r7, [r1, r0]
	uint8_t wInter = digitsFont->interspacePixels;
 8000c8e:	1919      	adds	r1, r3, r4
	uint8_t allW = 2 * ( 2*wDigit + wInter ) + 1 *( 2*wInter + wDelim );
 8000c90:	18e3      	adds	r3, r4, r3
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	0049      	lsls	r1, r1, #1
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	b2c9      	uxtb	r1, r1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	9102      	str	r1, [sp, #8]
 8000c9e:	9301      	str	r3, [sp, #4]
	if ( withSeconds == WITH_SEC ) allW = allW + ( 2*wDigit + wInter ) + ( 2*wInter + wDelim );
 8000ca0:	2a02      	cmp	r2, #2
 8000ca2:	d105      	bne.n	8000cb0 <osd_rtc_fonts_param+0x64>
 8000ca4:	9a01      	ldr	r2, [sp, #4]
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	18cb      	adds	r3, r1, r3
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	9301      	str	r3, [sp, #4]
	if ( allW > SCREEN_WIDTH ) return SCREEN_TO_SMALL;
 8000cb0:	9b01      	ldr	r3, [sp, #4]
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d835      	bhi.n	8000d22 <osd_rtc_fonts_param+0xd6>
			xPos = (W + 1) / 2 - allW / 2;
 8000cb6:	0859      	lsrs	r1, r3, #1
 8000cb8:	2310      	movs	r3, #16
 8000cba:	1a59      	subs	r1, r3, r1
 8000cbc:	b2cb      	uxtb	r3, r1
	graphic_set_string( &TextHH, xPos, yPos, digitsFont );
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4826      	ldr	r0, [pc, #152]	; (8000d5c <osd_rtc_fonts_param+0x110>)
			xPos = (W + 1) / 2 - allW / 2;
 8000cc2:	9303      	str	r3, [sp, #12]
	graphic_set_string( &TextHH, xPos, yPos, digitsFont );
 8000cc4:	b2c9      	uxtb	r1, r1
 8000cc6:	002b      	movs	r3, r5
 8000cc8:	f000 f9c6 	bl	8001058 <graphic_set_string>
	xPos += 2 * (wDigit + wInter);
 8000ccc:	9a02      	ldr	r2, [sp, #8]
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	4694      	mov	ip, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	b2db      	uxtb	r3, r3
	graphic_set_string( &Delim1, xPos, yPos, digitsFont );
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4824      	ldr	r0, [pc, #144]	; (8000d6c <osd_rtc_fonts_param+0x120>)
	xPos += 2 * (wDigit + wInter);
 8000cdc:	9303      	str	r3, [sp, #12]
	graphic_set_string( &Delim1, xPos, yPos, digitsFont );
 8000cde:	b2c9      	uxtb	r1, r1
 8000ce0:	002b      	movs	r3, r5
 8000ce2:	f000 f9b9 	bl	8001058 <graphic_set_string>
	xPos += wDelim + wInter;
 8000ce6:	193c      	adds	r4, r7, r4
 8000ce8:	9b03      	ldr	r3, [sp, #12]
 8000cea:	b2e4      	uxtb	r4, r4
 8000cec:	1919      	adds	r1, r3, r4
 8000cee:	b2cf      	uxtb	r7, r1
	graphic_set_string( &TextMM, xPos, yPos, digitsFont );
 8000cf0:	002b      	movs	r3, r5
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	481a      	ldr	r0, [pc, #104]	; (8000d60 <osd_rtc_fonts_param+0x114>)
 8000cf6:	b2c9      	uxtb	r1, r1
 8000cf8:	f000 f9ae 	bl	8001058 <graphic_set_string>
	xPos += 2 * (wDigit + wInter);
 8000cfc:	9b02      	ldr	r3, [sp, #8]
	graphic_set_string( &Delim2, xPos, yPos, digitsFont );
 8000cfe:	2200      	movs	r2, #0
	xPos += 2 * (wDigit + wInter);
 8000d00:	19d9      	adds	r1, r3, r7
 8000d02:	b2cf      	uxtb	r7, r1
	graphic_set_string( &Delim2, xPos, yPos, digitsFont );
 8000d04:	002b      	movs	r3, r5
 8000d06:	481a      	ldr	r0, [pc, #104]	; (8000d70 <osd_rtc_fonts_param+0x124>)
 8000d08:	b2c9      	uxtb	r1, r1
	xPos += wDelim + wInter;
 8000d0a:	19e4      	adds	r4, r4, r7
	graphic_set_string( &Delim2, xPos, yPos, digitsFont );
 8000d0c:	f000 f9a4 	bl	8001058 <graphic_set_string>
	graphic_set_string( &TextSS, xPos, yPos, digitsFont );
 8000d10:	002b      	movs	r3, r5
 8000d12:	2200      	movs	r2, #0
 8000d14:	4813      	ldr	r0, [pc, #76]	; (8000d64 <osd_rtc_fonts_param+0x118>)
 8000d16:	b2e1      	uxtb	r1, r4
 8000d18:	f000 f99e 	bl	8001058 <graphic_set_string>
	osd_rtc_string_init();

	uint8_t check;
	check = osd_rtc_time_params( timeFont, ALIGN_CTOP, 0, displaySeconds );

	if ( check == SCREEN_TO_SMALL )	while(1) {}
 8000d1c:	9b01      	ldr	r3, [sp, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <osd_rtc_fonts_param+0xd8>
 8000d22:	e7fe      	b.n	8000d22 <osd_rtc_fonts_param+0xd6>
	graphic_set_string( &TextYEAR, 	0, 0, (FONT_INFO *)&MagicMatrix_3x5_FontInfo );
 8000d24:	2200      	movs	r2, #0
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <osd_rtc_fonts_param+0x130>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	4815      	ldr	r0, [pc, #84]	; (8000d80 <osd_rtc_fonts_param+0x134>)
 8000d2c:	f000 f994 	bl	8001058 <graphic_set_string>
	graphic_set_string( &TextMONTH, 16, 1, digitsFont );
 8000d30:	0033      	movs	r3, r6
 8000d32:	2201      	movs	r2, #1
 8000d34:	2110      	movs	r1, #16
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <osd_rtc_fonts_param+0x138>)
 8000d38:	f000 f98e 	bl	8001058 <graphic_set_string>
	graphic_set_string( &TextDAY, 	25, 0, digitsFont );
 8000d3c:	0033      	movs	r3, r6
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2119      	movs	r1, #25
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <osd_rtc_fonts_param+0x13c>)
 8000d44:	f000 f988 	bl	8001058 <graphic_set_string>
	graphic_set_string( &Delim3, 	23, 1, digitsFont );
 8000d48:	0033      	movs	r3, r6
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2117      	movs	r1, #23
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <osd_rtc_fonts_param+0x128>)
 8000d50:	f000 f982 	bl	8001058 <graphic_set_string>
	check = osd_rtc_date_params( dateFont, ALIGN_LTOP, 0 );
}
 8000d54:	b005      	add	sp, #20
 8000d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d58:	08002afd 	.word	0x08002afd
 8000d5c:	20000104 	.word	0x20000104
 8000d60:	20000118 	.word	0x20000118
 8000d64:	20000140 	.word	0x20000140
 8000d68:	08002b00 	.word	0x08002b00
 8000d6c:	200000b4 	.word	0x200000b4
 8000d70:	200000c8 	.word	0x200000c8
 8000d74:	200000dc 	.word	0x200000dc
 8000d78:	08002b02 	.word	0x08002b02
 8000d7c:	08002960 	.word	0x08002960
 8000d80:	20000154 	.word	0x20000154
 8000d84:	2000012c 	.word	0x2000012c
 8000d88:	200000f0 	.word	0x200000f0

08000d8c <osd_rtc_display_time>:
	osd_rtc_puts_int_RAM( buffer2, &TextSS, SetDateTime.ss, FONTx1, color, BlackColor, &GammaRGB );
}
/********************************************************************************************/

/************************************ Public functions **************************************/
void osd_rtc_display_time(void) {
 8000d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	T_DISPLAY * nonActiveBuffer = fb_get_noActive_buffer(buffer1);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f8be 	bl	8000f10 <fb_get_noActive_buffer>
 8000d94:	0004      	movs	r4, r0
	T_COLOR delimColor = colorClock;
 8000d96:	2501      	movs	r5, #1

	fb_clear_screen( nonActiveBuffer );
 8000d98:	f000 f8e0 	bl	8000f5c <fb_clear_screen>
	osd_rtc_puts_int_RAM( buffer, &TextHH, ShowDateTime.hh, FONTx1,
 8000d9c:	4e12      	ldr	r6, [pc, #72]	; (8000de8 <osd_rtc_display_time+0x5c>)
 8000d9e:	4913      	ldr	r1, [pc, #76]	; (8000dec <osd_rtc_display_time+0x60>)
 8000da0:	78b2      	ldrb	r2, [r6, #2]
 8000da2:	0020      	movs	r0, r4
 8000da4:	f7ff ff20 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
		if (cnt++%2) delimColor = colorClock;
 8000da8:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <osd_rtc_display_time+0x64>)
	T_COLOR delimColor = colorClock;
 8000daa:	1c2f      	adds	r7, r5, #0
		if (cnt++%2) delimColor = colorClock;
 8000dac:	7813      	ldrb	r3, [r2, #0]
 8000dae:	1959      	adds	r1, r3, r5
 8000db0:	7011      	strb	r1, [r2, #0]
 8000db2:	001a      	movs	r2, r3
 8000db4:	402a      	ands	r2, r5
 8000db6:	422b      	tst	r3, r5
 8000db8:	d100      	bne.n	8000dbc <osd_rtc_display_time+0x30>
		else 		 delimColor = BlackColor;
 8000dba:	1c17      	adds	r7, r2, #0
	graphic_puts_RAM( buffer, &Delim1, FONTx1, delimColor, BlackColor, &GammaRGB );
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <osd_rtc_display_time+0x68>)
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <osd_rtc_display_time+0x6c>)
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	466b      	mov	r3, sp
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <osd_rtc_display_time+0x70>)
 8000dcc:	1c3b      	adds	r3, r7, #0
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f000 f94c 	bl	800106c <graphic_puts_RAM>
	osd_rtc_puts_int_RAM( buffer, &TextMM, ShowDateTime.mm, FONTx1,
 8000dd4:	7872      	ldrb	r2, [r6, #1]
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	4909      	ldr	r1, [pc, #36]	; (8000e00 <osd_rtc_display_time+0x74>)
 8000dda:	f7ff ff05 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_draw_time( nonActiveBuffer, WITHOUT_SEC );
	fb_buffer_is_ready(buffer1);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f8b4 	bl	8000f4c <fb_buffer_is_ready>
}
 8000de4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	200002b3 	.word	0x200002b3
 8000dec:	20000104 	.word	0x20000104
 8000df0:	20000168 	.word	0x20000168
 8000df4:	08002b08 	.word	0x08002b08
 8000df8:	08002b04 	.word	0x08002b04
 8000dfc:	200000b4 	.word	0x200000b4
 8000e00:	20000118 	.word	0x20000118

08000e04 <osd_rtc_display_date>:
void osd_rtc_display_date(void) {
 8000e04:	b570      	push	{r4, r5, r6, lr}
	T_DISPLAY * nonActiveBuffer = fb_get_noActive_buffer(buffer1);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f882 	bl	8000f10 <fb_get_noActive_buffer>
 8000e0c:	0004      	movs	r4, r0

	fb_clear_screen( nonActiveBuffer );
 8000e0e:	f000 f8a5 	bl	8000f5c <fb_clear_screen>
	osd_rtc_puts_int_RAM( buffer, &TextYEAR, dateTime->year + 2000,
 8000e12:	23fa      	movs	r3, #250	; 0xfa
 8000e14:	4d0a      	ldr	r5, [pc, #40]	; (8000e40 <osd_rtc_display_date+0x3c>)
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	79aa      	ldrb	r2, [r5, #6]
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	18d2      	adds	r2, r2, r3
 8000e1e:	4909      	ldr	r1, [pc, #36]	; (8000e44 <osd_rtc_display_date+0x40>)
 8000e20:	f7ff fee2 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_puts_int_RAM( buffer, &TextMONTH, dateTime->month, FONTx1,
 8000e24:	796a      	ldrb	r2, [r5, #5]
 8000e26:	0020      	movs	r0, r4
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <osd_rtc_display_date+0x44>)
 8000e2a:	f7ff fedd 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_puts_int_RAM( buffer, &TextDAY, dateTime->day, FONTx1,
 8000e2e:	792a      	ldrb	r2, [r5, #4]
 8000e30:	0020      	movs	r0, r4
 8000e32:	4906      	ldr	r1, [pc, #24]	; (8000e4c <osd_rtc_display_date+0x48>)
 8000e34:	f7ff fed8 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_draw_date( nonActiveBuffer, &ShowDateTime );
	fb_buffer_is_ready(buffer1);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f887 	bl	8000f4c <fb_buffer_is_ready>
}
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	200002b3 	.word	0x200002b3
 8000e44:	20000154 	.word	0x20000154
 8000e48:	2000012c 	.word	0x2000012c
 8000e4c:	200000f0 	.word	0x200000f0

08000e50 <osd_rtc_display_setTime>:
void osd_rtc_display_setTime(void) {
 8000e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	T_DISPLAY * nonActiveBuffer1 = fb_get_noActive_buffer(buffer1);
 8000e52:	2000      	movs	r0, #0
void osd_rtc_display_setTime(void) {
 8000e54:	b085      	sub	sp, #20
	T_DISPLAY * nonActiveBuffer1 = fb_get_noActive_buffer(buffer1);
 8000e56:	f000 f85b 	bl	8000f10 <fb_get_noActive_buffer>
 8000e5a:	0005      	movs	r5, r0
	T_DISPLAY * nonActiveBuffer2 = fb_get_noActive_buffer(buffer2);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f000 f857 	bl	8000f10 <fb_get_noActive_buffer>
 8000e62:	0004      	movs	r4, r0

	fb_clear_screen( nonActiveBuffer1 );
 8000e64:	0028      	movs	r0, r5
 8000e66:	f000 f879 	bl	8000f5c <fb_clear_screen>
	fb_clear_screen( nonActiveBuffer2 );
 8000e6a:	0020      	movs	r0, r4
 8000e6c:	f000 f876 	bl	8000f5c <fb_clear_screen>
static void osd_rtc_draw_setTime( T_DISPLAY * buffer1, T_DISPLAY * buffer2, T_COLOR color ) {
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <osd_rtc_display_setTime+0x8c>)
	Rtc_copy_structures( SHOW_TO_SET );
 8000e72:	2001      	movs	r0, #1
 8000e74:	781f      	ldrb	r7, [r3, #0]
 8000e76:	f001 f88b 	bl	8001f90 <Rtc_copy_structures>
	osd_rtc_puts_int_RAM( buffer2, &TextHH, SetDateTime.hh, FONTx1, color, BlackColor, &GammaRGB );
 8000e7a:	4e19      	ldr	r6, [pc, #100]	; (8000ee0 <osd_rtc_display_setTime+0x90>)
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	78b2      	ldrb	r2, [r6, #2]
 8000e80:	4918      	ldr	r1, [pc, #96]	; (8000ee4 <osd_rtc_display_setTime+0x94>)
 8000e82:	f7ff feb1 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	graphic_puts_RAM( buffer1, &Delim1, FONTx1, color, BlackColor, &GammaRGB );
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <osd_rtc_display_setTime+0x98>)
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <osd_rtc_display_setTime+0x9c>)
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	466b      	mov	r3, sp
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	0028      	movs	r0, r5
 8000e92:	9203      	str	r2, [sp, #12]
 8000e94:	4916      	ldr	r1, [pc, #88]	; (8000ef0 <osd_rtc_display_setTime+0xa0>)
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	1c3b      	adds	r3, r7, #0
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f000 f8e6 	bl	800106c <graphic_puts_RAM>
	osd_rtc_puts_int_RAM( buffer2, &TextMM, SetDateTime.mm, FONTx1, color, BlackColor, &GammaRGB );
 8000ea0:	0020      	movs	r0, r4
 8000ea2:	7872      	ldrb	r2, [r6, #1]
 8000ea4:	4913      	ldr	r1, [pc, #76]	; (8000ef4 <osd_rtc_display_setTime+0xa4>)
 8000ea6:	f7ff fe9f 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	graphic_puts_RAM( buffer2, &Delim2, FONTx1, color, BlackColor, &GammaRGB );
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <osd_rtc_display_setTime+0x98>)
 8000eac:	9a03      	ldr	r2, [sp, #12]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	466b      	mov	r3, sp
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	4910      	ldr	r1, [pc, #64]	; (8000ef8 <osd_rtc_display_setTime+0xa8>)
 8000eb8:	1c3b      	adds	r3, r7, #0
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f000 f8d6 	bl	800106c <graphic_puts_RAM>
	osd_rtc_puts_int_RAM( buffer2, &TextSS, SetDateTime.ss, FONTx1, color, BlackColor, &GammaRGB );
 8000ec0:	7832      	ldrb	r2, [r6, #0]
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <osd_rtc_display_setTime+0xac>)
 8000ec4:	0020      	movs	r0, r4
 8000ec6:	f7ff fe8f 	bl	8000be8 <osd_rtc_puts_int_RAM.constprop.0>
	osd_rtc_draw_setTime( nonActiveBuffer1, nonActiveBuffer2, colorClock );
	fb_buffer_is_ready(buffer1);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f83e 	bl	8000f4c <fb_buffer_is_ready>
	fb_buffer_is_ready(buffer2);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 f83b 	bl	8000f4c <fb_buffer_is_ready>
}
 8000ed6:	b005      	add	sp, #20
 8000ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	08002b14 	.word	0x08002b14
 8000ee0:	200002ac 	.word	0x200002ac
 8000ee4:	20000104 	.word	0x20000104
 8000ee8:	08002b08 	.word	0x08002b08
 8000eec:	08002b04 	.word	0x08002b04
 8000ef0:	200000b4 	.word	0x200000b4
 8000ef4:	20000118 	.word	0x20000118
 8000ef8:	200000c8 	.word	0x200000c8
 8000efc:	20000140 	.word	0x20000140

08000f00 <fb_get_active_buffer>:
	{ Buffer2, Buffer2_Back, Buffer2, SYNC_FLAG_CLR }
};


T_DISPLAY * fb_get_active_buffer( uint8_t buffNum ) {
	return FB[buffNum].ActualBuffer;
 8000f00:	0103      	lsls	r3, r0, #4
 8000f02:	4802      	ldr	r0, [pc, #8]	; (8000f0c <fb_get_active_buffer+0xc>)
 8000f04:	18c0      	adds	r0, r0, r3
 8000f06:	6880      	ldr	r0, [r0, #8]
}
 8000f08:	4770      	bx	lr
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000008 	.word	0x20000008

08000f10 <fb_get_noActive_buffer>:
T_DISPLAY * fb_get_noActive_buffer( uint8_t buffNum ) {
	if ( FB[buffNum].ActualBuffer == FB[buffNum].Buff ) {
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <fb_get_noActive_buffer+0x14>)
 8000f12:	0102      	lsls	r2, r0, #4
 8000f14:	58d0      	ldr	r0, [r2, r3]
 8000f16:	189b      	adds	r3, r3, r2
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	4282      	cmp	r2, r0
 8000f1c:	d100      	bne.n	8000f20 <fb_get_noActive_buffer+0x10>
		return (T_DISPLAY *)FB[buffNum].Back_buff;
 8000f1e:	6858      	ldr	r0, [r3, #4]
	} else {
		return (T_DISPLAY *)FB[buffNum].Buff;
	}
}
 8000f20:	4770      	bx	lr
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000008 	.word	0x20000008

08000f28 <fb_switch_buff>:
void fb_switch_buff( uint8_t buffNum ) {
	if ( FB[buffNum].syncFlag ) {
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <fb_switch_buff+0x20>)
 8000f2a:	0100      	lsls	r0, r0, #4
 8000f2c:	1813      	adds	r3, r2, r0
 8000f2e:	7b19      	ldrb	r1, [r3, #12]
 8000f30:	2900      	cmp	r1, #0
 8000f32:	d007      	beq.n	8000f44 <fb_switch_buff+0x1c>
		FB[buffNum].syncFlag = SYNC_FLAG_CLR;
 8000f34:	2100      	movs	r1, #0
	} else {
		return;
	}
	if ( FB[buffNum].ActualBuffer == FB[buffNum].Buff ) {
 8000f36:	5882      	ldr	r2, [r0, r2]
		FB[buffNum].syncFlag = SYNC_FLAG_CLR;
 8000f38:	7319      	strb	r1, [r3, #12]
	if ( FB[buffNum].ActualBuffer == FB[buffNum].Buff ) {
 8000f3a:	6899      	ldr	r1, [r3, #8]
 8000f3c:	4291      	cmp	r1, r2
 8000f3e:	d100      	bne.n	8000f42 <fb_switch_buff+0x1a>
		FB[buffNum].ActualBuffer = (T_DISPLAY *)FB[buffNum].Back_buff;
 8000f40:	685a      	ldr	r2, [r3, #4]
	} else {
		FB[buffNum].ActualBuffer = (T_DISPLAY *)FB[buffNum].Buff;
 8000f42:	609a      	str	r2, [r3, #8]
	}
}
 8000f44:	4770      	bx	lr
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000008 	.word	0x20000008

08000f4c <fb_buffer_is_ready>:
void fb_buffer_is_ready(uint8_t buffNum) {
	FB[buffNum].syncFlag = SYNC_FLAG_SET;
 8000f4c:	0103      	lsls	r3, r0, #4
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <fb_buffer_is_ready+0xc>)
 8000f50:	18c0      	adds	r0, r0, r3
 8000f52:	2301      	movs	r3, #1
 8000f54:	7303      	strb	r3, [r0, #12]
}
 8000f56:	4770      	bx	lr
 8000f58:	20000008 	.word	0x20000008

08000f5c <fb_clear_screen>:


void fb_clear_screen( T_DISPLAY * buffer ) {
 8000f5c:	b510      	push	{r4, lr}
	memset( (uint8_t *)buffer, 0x00, ( FRAMEBUFFER_ALL ) );
 8000f5e:	2220      	movs	r2, #32
 8000f60:	2100      	movs	r1, #0
 8000f62:	f001 f96c 	bl	800223e <memset>
}
 8000f66:	bd10      	pop	{r4, pc}

08000f68 <fb_set_pixel_RAM>:

#define REVERSE		1
void fb_set_pixel_RAM( volatile T_DISPLAY * buffer, int16_t x, int16_t y, const T_COLOR color ) {
 8000f68:	b530      	push	{r4, r5, lr}
/***************************** Base routine, set - clear pixel ***************************/
	if ( x < 0 || x > (SCREEN_WIDTH  - 1) ||
 8000f6a:	b28c      	uxth	r4, r1
 8000f6c:	2c1f      	cmp	r4, #31
 8000f6e:	d814      	bhi.n	8000f9a <fb_set_pixel_RAM+0x32>
		 y < 0 || y > (SCREEN_HEIGHT - 1)	) return;
 8000f70:	b294      	uxth	r4, r2
 8000f72:	2c07      	cmp	r4, #7
 8000f74:	d811      	bhi.n	8000f9a <fb_set_pixel_RAM+0x32>

	if( REVERSE ) {
		if ( color.mono ) {
 8000f76:	2507      	movs	r5, #7
 8000f78:	10cc      	asrs	r4, r1, #3
 8000f7a:	00e4      	lsls	r4, r4, #3
 8000f7c:	1aaa      	subs	r2, r5, r2
 8000f7e:	18a2      	adds	r2, r4, r2
 8000f80:	1a80      	subs	r0, r0, r2
 8000f82:	2201      	movs	r2, #1
 8000f84:	4029      	ands	r1, r5
 8000f86:	408a      	lsls	r2, r1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	301f      	adds	r0, #31
 8000f8c:	b252      	sxtb	r2, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <fb_set_pixel_RAM+0x34>
			buffer[ 31 - ( (7-y) + 8*(x/8) ) ].mono |=  (1 << (x%8) );
 8000f92:	7803      	ldrb	r3, [r0, #0]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	7002      	strb	r2, [r0, #0]
			buffer[ (7-y) + 8*(x/8) ].mono |=  (1 << (7 - x%8) );
		} else {
			buffer[ (7-y) + 8*(x/8) ].mono &= ~(1 << (7 - x%8) );
		}
	}
}
 8000f9a:	bd30      	pop	{r4, r5, pc}
			buffer[ 31 - ( (7-y) + 8*(x/8) ) ].mono &= ~(1 << (x%8) );
 8000f9c:	7803      	ldrb	r3, [r0, #0]
 8000f9e:	4393      	bics	r3, r2
 8000fa0:	7003      	strb	r3, [r0, #0]
 8000fa2:	e7fa      	b.n	8000f9a <fb_set_pixel_RAM+0x32>

08000fa4 <polish_letters_UTF8>:
	0xC584,  /*ń, */
	0xC3B3,  /*ó, */
};
/*****************************************************************/
uint8_t polish_letters_UTF8( CHAR * codeChar ) {
	if ( *codeChar < 128 ) {
 8000fa4:	2100      	movs	r1, #0
uint8_t polish_letters_UTF8( CHAR * codeChar ) {
 8000fa6:	b510      	push	{r4, lr}
	if ( *codeChar < 128 ) {
 8000fa8:	5641      	ldrsb	r1, [r0, r1]
uint8_t polish_letters_UTF8( CHAR * codeChar ) {
 8000faa:	0003      	movs	r3, r0
	if ( *codeChar < 128 ) {
 8000fac:	7802      	ldrb	r2, [r0, #0]
		return ASCII;
 8000fae:	2013      	movs	r0, #19
	if ( *codeChar < 128 ) {
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	da13      	bge.n	8000fdc <polish_letters_UTF8+0x38>
	}
	uint8_t tmp = ASCII;
	uint16_t a = (uint16_t)( *codeChar << 8);		// High nibble
			 a = (uint16_t)a | *(codeChar +1);		// Low  nibble

	for ( uint8_t i = 0; i < PL_CHARACTERS_COUNT; i++ ) {
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <polish_letters_UTF8+0x40>)
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	ba5b      	rev16	r3, r3

			if ( *codeChar >= 0x81 && *codeChar <= 0xBC ) {
 8000fc0:	327f      	adds	r2, #127	; 0x7f
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	2a3b      	cmp	r2, #59	; 0x3b
 8000fc8:	d909      	bls.n	8000fde <polish_letters_UTF8+0x3a>
				return UTF8_HIGH_BYTE;
			}
			uint16_t b = (uint16_t)( utf_8Code[i] );
			if ( a == b ) {
 8000fca:	880c      	ldrh	r4, [r1, #0]
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	d005      	beq.n	8000fdc <polish_letters_UTF8+0x38>
	for ( uint8_t i = 0; i < PL_CHARACTERS_COUNT; i++ ) {
 8000fd0:	3001      	adds	r0, #1
 8000fd2:	b2c0      	uxtb	r0, r0
 8000fd4:	3102      	adds	r1, #2
 8000fd6:	2812      	cmp	r0, #18
 8000fd8:	d1f5      	bne.n	8000fc6 <polish_letters_UTF8+0x22>
		return ASCII;
 8000fda:	3001      	adds	r0, #1
				return i;
			}
	}
	return tmp;
}
 8000fdc:	bd10      	pop	{r4, pc}
				return UTF8_HIGH_BYTE;
 8000fde:	2014      	movs	r0, #20
 8000fe0:	e7fc      	b.n	8000fdc <polish_letters_UTF8+0x38>
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	08002b16 	.word	0x08002b16

08000fe8 <graphic_draw_H_line_RAM>:
#include "gfx.h"


/***************************************************************************************/
void graphic_draw_H_line_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, uint8_t width,
							  const T_COLOR color, const T_GAMMA *gamma ) {
 8000fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fea:	0005      	movs	r5, r0
#ifdef PANEL_RGB
	T_RGB_2ROWS colorTmp[ 8 ];
	graphic_24bit_to_rgb( color, colorTmp, gamma );
#endif
	for ( uint8_t i=0; i < width; i++ ) {
 8000fec:	b28c      	uxth	r4, r1
							  const T_COLOR color, const T_GAMMA *gamma ) {
 8000fee:	0016      	movs	r6, r2
 8000ff0:	18e3      	adds	r3, r4, r3
 8000ff2:	aa08      	add	r2, sp, #32
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	7817      	ldrb	r7, [r2, #0]
 8000ff8:	9301      	str	r3, [sp, #4]
	for ( uint8_t i=0; i < width; i++ ) {
 8000ffa:	9b01      	ldr	r3, [sp, #4]
 8000ffc:	429c      	cmp	r4, r3
 8000ffe:	d100      	bne.n	8001002 <graphic_draw_H_line_RAM+0x1a>
		fb_set_pixel_RAM( buffer, x + i, y, colorTmp );
#elif defined COLOR_MONO
		fb_set_pixel_RAM( buffer, x + i, y, color );
#endif
	}
}
 8001000:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		fb_set_pixel_RAM( buffer, x + i, y, color );
 8001002:	b221      	sxth	r1, r4
 8001004:	0032      	movs	r2, r6
 8001006:	0028      	movs	r0, r5
 8001008:	1c3b      	adds	r3, r7, #0
 800100a:	3401      	adds	r4, #1
 800100c:	f7ff ffac 	bl	8000f68 <fb_set_pixel_RAM>
	for ( uint8_t i=0; i < width; i++ ) {
 8001010:	b2a4      	uxth	r4, r4
 8001012:	e7f2      	b.n	8000ffa <graphic_draw_H_line_RAM+0x12>

08001014 <graphic_fill_rectangle_RAM>:
}
/***************************************************************************************/

/***************************************************************************************/
void graphic_fill_rectangle_RAM( volatile T_DISPLAY *buffer, int16_t xPos, int16_t yPos, uint8_t width,
								 uint8_t height, const T_COLOR color, const T_GAMMA *gamma ) {
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b085      	sub	sp, #20
 8001018:	0005      	movs	r5, r0
 800101a:	4668      	mov	r0, sp
 800101c:	001f      	movs	r7, r3
 800101e:	ab0a      	add	r3, sp, #40	; 0x28
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	000e      	movs	r6, r1
	for ( uint8_t i=0; i < height; i++ ) {
 8001024:	b294      	uxth	r4, r2
								 uint8_t height, const T_COLOR color, const T_GAMMA *gamma ) {
 8001026:	a90b      	add	r1, sp, #44	; 0x2c
 8001028:	7809      	ldrb	r1, [r1, #0]
 800102a:	18e3      	adds	r3, r4, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	73c1      	strb	r1, [r0, #15]
 8001030:	9302      	str	r3, [sp, #8]
	for ( uint8_t i=0; i < height; i++ ) {
 8001032:	9b02      	ldr	r3, [sp, #8]
 8001034:	429c      	cmp	r4, r3
 8001036:	d101      	bne.n	800103c <graphic_fill_rectangle_RAM+0x28>
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
	}
}
 8001038:	b005      	add	sp, #20
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
 800103c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800103e:	b222      	sxth	r2, r4
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	466b      	mov	r3, sp
 8001044:	7bd9      	ldrb	r1, [r3, #15]
 8001046:	0028      	movs	r0, r5
 8001048:	7019      	strb	r1, [r3, #0]
 800104a:	3401      	adds	r4, #1
 800104c:	003b      	movs	r3, r7
 800104e:	0031      	movs	r1, r6
 8001050:	f7ff ffca 	bl	8000fe8 <graphic_draw_H_line_RAM>
	for ( uint8_t i=0; i < height; i++ ) {
 8001054:	b2a4      	uxth	r4, r4
 8001056:	e7ec      	b.n	8001032 <graphic_fill_rectangle_RAM+0x1e>

08001058 <graphic_set_string>:


/******* Ustalamy parametru bloku tekstowego ************************************************/
void graphic_set_string( T_STRING *string, int16_t x, int16_t y, const FONT_INFO *fontPtrPGM ) {
	string->x 			= x;
	string->y 			= y;
 8001058:	8042      	strh	r2, [r0, #2]
	string->lastPosX 	= x;
	string->lastPosY 	= y;
 800105a:	80c2      	strh	r2, [r0, #6]

	string->stringLength = 0;
 800105c:	2200      	movs	r2, #0
	string->x 			= x;
 800105e:	8001      	strh	r1, [r0, #0]
	string->lastPosX 	= x;
 8001060:	8081      	strh	r1, [r0, #4]
	string->stringLength = 0;
 8001062:	8102      	strh	r2, [r0, #8]
	string->fontPtrPGM 	 = (FONT_INFO *)fontPtrPGM;
 8001064:	6103      	str	r3, [r0, #16]
	string->onChange 	 = 0;
 8001066:	7282      	strb	r2, [r0, #10]
}
 8001068:	4770      	bx	lr
	...

0800106c <graphic_puts_RAM>:
#endif
/***************************************************************************************/


/******************************** Draw the string in RAM (buffer)	 *********************************/
uint16_t graphic_puts_RAM( volatile T_DISPLAY *buffer, T_STRING *string, uint8_t textSize, T_COLOR color, T_COLOR bg, const T_GAMMA *gamma ) {
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	b095      	sub	sp, #84	; 0x54
 8001070:	000f      	movs	r7, r1
 8001072:	466a      	mov	r2, sp
 8001074:	214e      	movs	r1, #78	; 0x4e
 8001076:	1852      	adds	r2, r2, r1
 8001078:	7013      	strb	r3, [r2, #0]
 800107a:	ab1a      	add	r3, sp, #104	; 0x68
 800107c:	224f      	movs	r2, #79	; 0x4f
 800107e:	0004      	movs	r4, r0
 8001080:	7818      	ldrb	r0, [r3, #0]
 8001082:	466b      	mov	r3, sp
 8001084:	189b      	adds	r3, r3, r2
 8001086:	7018      	strb	r0, [r3, #0]
	int16_t cursorX = string->x;
 8001088:	2200      	movs	r2, #0
 800108a:	5ebb      	ldrsh	r3, [r7, r2]
 800108c:	9306      	str	r3, [sp, #24]
	int16_t cursorY = string->y;
 800108e:	2202      	movs	r2, #2
 8001090:	5ebb      	ldrsh	r3, [r7, r2]
 8001092:	930c      	str	r3, [sp, #48]	; 0x30
	uint8_t charWidth = 0;
	uint8_t strLength = 0;

	textSize = FONTx1;	// Unnecessary??

	if ( string->onChange ) {
 8001094:	7abb      	ldrb	r3, [r7, #10]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d010      	beq.n	80010bc <graphic_puts_RAM+0x50>
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 800109a:	2106      	movs	r1, #6
 800109c:	5e7a      	ldrsh	r2, [r7, r1]
 800109e:	2504      	movs	r5, #4
 80010a0:	5f79      	ldrsh	r1, [r7, r5]
 80010a2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	9502      	str	r5, [sp, #8]
 80010a8:	ad01      	add	r5, sp, #4
 80010aa:	7028      	strb	r0, [r5, #0]
 80010ac:	6938      	ldr	r0, [r7, #16]
 80010ae:	7800      	ldrb	r0, [r0, #0]
 80010b0:	9000      	str	r0, [sp, #0]
 80010b2:	0020      	movs	r0, r4
 80010b4:	f7ff ffae 	bl	8001014 <graphic_fill_rectangle_RAM>
									string->fontPtrPGM->heightPixels, bg, gamma );
		string->onChange = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	72bb      	strb	r3, [r7, #10]
	}
	string->lastPosX = string->x;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	607b      	str	r3, [r7, #4]
	string->lastPosY = string->y;
	CHAR * str 		 = string->str;

	while ( *str ) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t strLength = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	930e      	str	r3, [sp, #56]	; 0x38
	while ( *str ) {
 80010c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d103      	bne.n	80010d8 <graphic_puts_RAM+0x6c>
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, str++, color, bg, textSize, string->fontPtrPGM, gamma );
		cursorX  += textSize * (charWidth + string->fontPtrPGM->interspacePixels);
		strLength += charWidth + string->fontPtrPGM->interspacePixels;
	}
//	return  string->stringLength = cursorX - string->x;
	return strLength;
 80010d0:	466b      	mov	r3, sp
 80010d2:	8f18      	ldrh	r0, [r3, #56]	; 0x38
}
 80010d4:	b015      	add	sp, #84	; 0x54
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, str++, color, bg, textSize, string->fontPtrPGM, gamma );
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	224e      	movs	r2, #78	; 0x4e
 80010dc:	9309      	str	r3, [sp, #36]	; 0x24
 80010de:	466b      	mov	r3, sp
 80010e0:	189b      	adds	r3, r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
	uint8_t	transCode = polish_letters_UTF8( charCode );
 80010e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80010e6:	9305      	str	r3, [sp, #20]
 80010e8:	f7ff ff5c 	bl	8000fa4 <polish_letters_UTF8>
	if ( transCode == UTF8_HIGH_BYTE ) return 0;
 80010ec:	2500      	movs	r5, #0
 80010ee:	2814      	cmp	r0, #20
 80010f0:	d027      	beq.n	8001142 <graphic_puts_RAM+0xd6>
	uint8_t	 charHeight		  = fontPtrPGM->heightPixels;
 80010f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		charWidthBits  	= fontPtrPGM->charInfo[ *charCode - charAddressStart ].widthBits;
 80010f4:	9909      	ldr	r1, [sp, #36]	; 0x24
	uint8_t	 charHeight		  = fontPtrPGM->heightPixels;
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	930f      	str	r3, [sp, #60]	; 0x3c
	if ( transCode == ASCII ) {
 80010fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2813      	cmp	r0, #19
 8001104:	d12c      	bne.n	8001160 <graphic_puts_RAM+0xf4>
		charWidthBits  	= fontPtrPGM->charInfo[ *charCode - charAddressStart ].widthBits;
 8001106:	6849      	ldr	r1, [r1, #4]
 8001108:	9107      	str	r1, [sp, #28]
 800110a:	4669      	mov	r1, sp
 800110c:	7f09      	ldrb	r1, [r1, #28]
 800110e:	1a51      	subs	r1, r2, r1
 8001110:	0089      	lsls	r1, r1, #2
 8001112:	1858      	adds	r0, r3, r1
 8001114:	5c5d      	ldrb	r5, [r3, r1]
		charOffset 		= fontPtrPGM->charInfo[ *charCode - charAddressStart ].offset;
 8001116:	8843      	ldrh	r3, [r0, #2]
		charOffset		= fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8001118:	9311      	str	r3, [sp, #68]	; 0x44
	if ( *charCode == SPACE ) {
 800111a:	2a20      	cmp	r2, #32
 800111c:	d128      	bne.n	8001170 <graphic_puts_RAM+0x104>
		graphic_fill_rectangle_RAM( buffer, x , y, charWidthBits*size, charHeight*size, bg, NULL );
 800111e:	2300      	movs	r3, #0
 8001120:	214f      	movs	r1, #79	; 0x4f
 8001122:	466a      	mov	r2, sp
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	1852      	adds	r2, r2, r1
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	ab01      	add	r3, sp, #4
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001130:	0020      	movs	r0, r4
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001136:	002b      	movs	r3, r5
 8001138:	9906      	ldr	r1, [sp, #24]
 800113a:	f7ff ff6b 	bl	8001014 <graphic_fill_rectangle_RAM>
		return charWidthBits = fontPtrPGM->spacePixels;
 800113e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001140:	7a5d      	ldrb	r5, [r3, #9]
		cursorX  += textSize * (charWidth + string->fontPtrPGM->interspacePixels);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	7a18      	ldrb	r0, [r3, #8]
 8001146:	9b06      	ldr	r3, [sp, #24]
 8001148:	182d      	adds	r5, r5, r0
 800114a:	18eb      	adds	r3, r5, r3
 800114c:	b21b      	sxth	r3, r3
 800114e:	9306      	str	r3, [sp, #24]
		strLength += charWidth + string->fontPtrPGM->interspacePixels;
 8001150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001152:	195d      	adds	r5, r3, r5
 8001154:	b2eb      	uxtb	r3, r5
 8001156:	930e      	str	r3, [sp, #56]	; 0x38
 8001158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800115a:	3301      	adds	r3, #1
 800115c:	930b      	str	r3, [sp, #44]	; 0x2c
 800115e:	e7b3      	b.n	80010c8 <graphic_puts_RAM+0x5c>
		charWidthBits   = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8001160:	8a89      	ldrh	r1, [r1, #20]
		                 (PL_CHARACTERS_COUNT - transCode) ].widthBits;
 8001162:	1840      	adds	r0, r0, r1
		charWidthBits   = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 8001164:	3812      	subs	r0, #18
 8001166:	0080      	lsls	r0, r0, #2
 8001168:	1819      	adds	r1, r3, r0
 800116a:	5c1d      	ldrb	r5, [r3, r0]
		charOffset		= fontPtrPGM->charInfo[ fontPtrPGM->sizeArray -
 800116c:	884b      	ldrh	r3, [r1, #2]
 800116e:	e7d3      	b.n	8001118 <graphic_puts_RAM+0xac>
	if((x >= _width) ||	((x + charWidthBits  * size - 1) < 0) ||	// Clip left and right
 8001170:	9b06      	ldr	r3, [sp, #24]
 8001172:	2b1f      	cmp	r3, #31
 8001174:	dce5      	bgt.n	8001142 <graphic_puts_RAM+0xd6>
 8001176:	195b      	adds	r3, r3, r5
 8001178:	2b00      	cmp	r3, #0
 800117a:	dde2      	ble.n	8001142 <graphic_puts_RAM+0xd6>
 800117c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800117e:	2b07      	cmp	r3, #7
 8001180:	dcdf      	bgt.n	8001142 <graphic_puts_RAM+0xd6>
	   (y >= _height)||	((y + charHeight	 * size - 1) < 0)) {	// Clip top and bottom
 8001182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001184:	189b      	adds	r3, r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	dddb      	ble.n	8001142 <graphic_puts_RAM+0xd6>
	uint8_t horByteNum = (charWidthBits - 1)/8 + 1; // How many bytes take in one horizontal line
 800118a:	2107      	movs	r1, #7
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	17d3      	asrs	r3, r2, #31
 8001190:	400b      	ands	r3, r1
 8001192:	189b      	adds	r3, r3, r2
 8001194:	10db      	asrs	r3, r3, #3
 8001196:	3301      	adds	r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	9312      	str	r3, [sp, #72]	; 0x48
	for ( uint8_t iY = 0; iY < charHeight; iY++ ) {		// Next horizontal line
 800119c:	2300      	movs	r3, #0
 800119e:	2228      	movs	r2, #40	; 0x28
 80011a0:	930a      	str	r3, [sp, #40]	; 0x28
 80011a2:	466b      	mov	r3, sp
 80011a4:	189b      	adds	r3, r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d9c9      	bls.n	8001142 <graphic_puts_RAM+0xd6>
 80011ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80011b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80011b2:	4694      	mov	ip, r2
 80011b4:	4463      	add	r3, ip
 80011b6:	930d      	str	r3, [sp, #52]	; 0x34
		for ( uint8_t jX = 0; jX < horByteNum; jX++ ) {	// Next column
 80011b8:	2300      	movs	r3, #0
 80011ba:	9310      	str	r3, [sp, #64]	; 0x40
 80011bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80011be:	189e      	adds	r6, r3, r2
 80011c0:	b236      	sxth	r6, r6
			byte = fontPtrPGM->data[ charOffset + (iY + drawLine)*(jX + 1) ];
 80011c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	5c9a      	ldrb	r2, [r3, r2]
 80011ca:	9207      	str	r2, [sp, #28]
	if ( 0x80 & byte ) fb_set_pixel_RAM( buffer, x + 0, y, color );
 80011cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80011ce:	569b      	ldrsb	r3, [r3, r2]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da7d      	bge.n	80012d0 <graphic_puts_RAM+0x264>
 80011d4:	466b      	mov	r3, sp
 80011d6:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 0, y, BlackColor );
 80011d8:	0032      	movs	r2, r6
 80011da:	0020      	movs	r0, r4
 80011dc:	9906      	ldr	r1, [sp, #24]
 80011de:	f7ff fec3 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 1 ) return;
 80011e2:	466b      	mov	r3, sp
 80011e4:	8b1b      	ldrh	r3, [r3, #24]
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	2d01      	cmp	r5, #1
 80011ea:	d060      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x40 & byte ) fb_set_pixel_RAM( buffer, x + 1, y, color );
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	1c59      	adds	r1, r3, #1
 80011f0:	9b07      	ldr	r3, [sp, #28]
 80011f2:	b209      	sxth	r1, r1
 80011f4:	4213      	tst	r3, r2
 80011f6:	d06e      	beq.n	80012d6 <graphic_puts_RAM+0x26a>
 80011f8:	466b      	mov	r3, sp
 80011fa:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 1, y, BlackColor );
 80011fc:	0032      	movs	r2, r6
 80011fe:	0020      	movs	r0, r4
 8001200:	f7ff feb2 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 2 ) return;
 8001204:	2d02      	cmp	r5, #2
 8001206:	d052      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x20 & byte ) fb_set_pixel_RAM( buffer, x + 2, y, color );
 8001208:	2220      	movs	r2, #32
 800120a:	9b08      	ldr	r3, [sp, #32]
 800120c:	1c99      	adds	r1, r3, #2
 800120e:	9b07      	ldr	r3, [sp, #28]
 8001210:	b209      	sxth	r1, r1
 8001212:	4213      	tst	r3, r2
 8001214:	d062      	beq.n	80012dc <graphic_puts_RAM+0x270>
 8001216:	466b      	mov	r3, sp
 8001218:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 2, y, BlackColor );
 800121a:	0032      	movs	r2, r6
 800121c:	0020      	movs	r0, r4
 800121e:	f7ff fea3 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 3 ) return;
 8001222:	2d03      	cmp	r5, #3
 8001224:	d043      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x10 & byte ) fb_set_pixel_RAM( buffer, x + 3, y, color );
 8001226:	9b08      	ldr	r3, [sp, #32]
 8001228:	1cd9      	adds	r1, r3, #3
 800122a:	9b07      	ldr	r3, [sp, #28]
 800122c:	b209      	sxth	r1, r1
 800122e:	06db      	lsls	r3, r3, #27
 8001230:	d557      	bpl.n	80012e2 <graphic_puts_RAM+0x276>
 8001232:	466b      	mov	r3, sp
 8001234:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 3, y, BlackColor );
 8001236:	0032      	movs	r2, r6
 8001238:	0020      	movs	r0, r4
 800123a:	f7ff fe95 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 4 ) return;
 800123e:	2d04      	cmp	r5, #4
 8001240:	d035      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x08 & byte ) fb_set_pixel_RAM( buffer, x + 4, y, color );
 8001242:	9b08      	ldr	r3, [sp, #32]
 8001244:	1d19      	adds	r1, r3, #4
 8001246:	9b07      	ldr	r3, [sp, #28]
 8001248:	b209      	sxth	r1, r1
 800124a:	071b      	lsls	r3, r3, #28
 800124c:	d54c      	bpl.n	80012e8 <graphic_puts_RAM+0x27c>
 800124e:	466b      	mov	r3, sp
 8001250:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 4, y, BlackColor );
 8001252:	0032      	movs	r2, r6
 8001254:	0020      	movs	r0, r4
 8001256:	f7ff fe87 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 5 ) return;
 800125a:	2d05      	cmp	r5, #5
 800125c:	d027      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x04 & byte ) fb_set_pixel_RAM( buffer, x + 5, y, color );
 800125e:	9b08      	ldr	r3, [sp, #32]
 8001260:	1d59      	adds	r1, r3, #5
 8001262:	9b07      	ldr	r3, [sp, #28]
 8001264:	b209      	sxth	r1, r1
 8001266:	075b      	lsls	r3, r3, #29
 8001268:	d541      	bpl.n	80012ee <graphic_puts_RAM+0x282>
 800126a:	466b      	mov	r3, sp
 800126c:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 5, y, BlackColor );
 800126e:	0032      	movs	r2, r6
 8001270:	0020      	movs	r0, r4
 8001272:	f7ff fe79 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 6 ) return;
 8001276:	2d06      	cmp	r5, #6
 8001278:	d019      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x02 & byte ) fb_set_pixel_RAM( buffer, x + 6, y, color );
 800127a:	9b08      	ldr	r3, [sp, #32]
 800127c:	1d99      	adds	r1, r3, #6
 800127e:	9b07      	ldr	r3, [sp, #28]
 8001280:	b209      	sxth	r1, r1
 8001282:	079b      	lsls	r3, r3, #30
 8001284:	d536      	bpl.n	80012f4 <graphic_puts_RAM+0x288>
 8001286:	466b      	mov	r3, sp
 8001288:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 6, y, BlackColor );
 800128a:	0032      	movs	r2, r6
 800128c:	0020      	movs	r0, r4
 800128e:	f7ff fe6b 	bl	8000f68 <fb_set_pixel_RAM>
	if ( width == 7 ) return;
 8001292:	2d07      	cmp	r5, #7
 8001294:	d00b      	beq.n	80012ae <graphic_puts_RAM+0x242>
	if ( 0x01 & byte ) fb_set_pixel_RAM( buffer, x + 7, y, color );
 8001296:	9908      	ldr	r1, [sp, #32]
 8001298:	9b07      	ldr	r3, [sp, #28]
 800129a:	3107      	adds	r1, #7
 800129c:	b209      	sxth	r1, r1
 800129e:	07db      	lsls	r3, r3, #31
 80012a0:	d52b      	bpl.n	80012fa <graphic_puts_RAM+0x28e>
 80012a2:	466b      	mov	r3, sp
 80012a4:	7d1b      	ldrb	r3, [r3, #20]
	else			   fb_set_pixel_RAM( buffer, x + 7, y, BlackColor );
 80012a6:	0032      	movs	r2, r6
 80012a8:	0020      	movs	r0, r4
 80012aa:	f7ff fe5d 	bl	8000f68 <fb_set_pixel_RAM>
		for ( uint8_t jX = 0; jX < horByteNum; jX++ ) {	// Next column
 80012ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80012b2:	4694      	mov	ip, r2
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	9310      	str	r3, [sp, #64]	; 0x40
 80012ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012be:	4463      	add	r3, ip
 80012c0:	930d      	str	r3, [sp, #52]	; 0x34
 80012c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d900      	bls.n	80012ca <graphic_puts_RAM+0x25e>
 80012c8:	e77b      	b.n	80011c2 <graphic_puts_RAM+0x156>
	for ( uint8_t iY = 0; iY < charHeight; iY++ ) {		// Next horizontal line
 80012ca:	4663      	mov	r3, ip
 80012cc:	3301      	adds	r3, #1
 80012ce:	e766      	b.n	800119e <graphic_puts_RAM+0x132>
	else			   fb_set_pixel_RAM( buffer, x + 0, y, BlackColor );
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <graphic_puts_RAM+0x294>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	e780      	b.n	80011d8 <graphic_puts_RAM+0x16c>
	else			   fb_set_pixel_RAM( buffer, x + 1, y, BlackColor );
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <graphic_puts_RAM+0x294>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	e78f      	b.n	80011fc <graphic_puts_RAM+0x190>
	else			   fb_set_pixel_RAM( buffer, x + 2, y, BlackColor );
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <graphic_puts_RAM+0x294>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	e79b      	b.n	800121a <graphic_puts_RAM+0x1ae>
	else			   fb_set_pixel_RAM( buffer, x + 3, y, BlackColor );
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <graphic_puts_RAM+0x294>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	e7a6      	b.n	8001236 <graphic_puts_RAM+0x1ca>
	else			   fb_set_pixel_RAM( buffer, x + 4, y, BlackColor );
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <graphic_puts_RAM+0x294>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	e7b1      	b.n	8001252 <graphic_puts_RAM+0x1e6>
	else			   fb_set_pixel_RAM( buffer, x + 5, y, BlackColor );
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <graphic_puts_RAM+0x294>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	e7bc      	b.n	800126e <graphic_puts_RAM+0x202>
	else			   fb_set_pixel_RAM( buffer, x + 6, y, BlackColor );
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <graphic_puts_RAM+0x294>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	e7c7      	b.n	800128a <graphic_puts_RAM+0x21e>
	else			   fb_set_pixel_RAM( buffer, x + 7, y, BlackColor );
 80012fa:	4b01      	ldr	r3, [pc, #4]	; (8001300 <graphic_puts_RAM+0x294>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e7d2      	b.n	80012a6 <graphic_puts_RAM+0x23a>
 8001300:	08002b3a 	.word	0x08002b3a

08001304 <irmp_store_bit>:
// verhindert, dass irmp_store_bit() inline compiliert wird:
// static void irmp_store_bit (uint_fast8_t) __attribute__ ((noinline));

static void
irmp_store_bit (uint_fast8_t value)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
        first_bit = value;
    }
    else
#endif

    if (irmp_bit >= irmp_param.address_offset && irmp_bit < irmp_param.address_end)
 8001306:	4a29      	ldr	r2, [pc, #164]	; (80013ac <irmp_store_bit+0xa8>)
 8001308:	4c29      	ldr	r4, [pc, #164]	; (80013b0 <irmp_store_bit+0xac>)
 800130a:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	429d      	cmp	r5, r3
 8001310:	d803      	bhi.n	800131a <irmp_store_bit+0x16>
 8001312:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001314:	4e27      	ldr	r6, [pc, #156]	; (80013b4 <irmp_store_bit+0xb0>)
 8001316:	428b      	cmp	r3, r1
 8001318:	d306      	bcc.n	8001328 <irmp_store_bit+0x24>
        {
            irmp_tmp_address <<= 1;
            irmp_tmp_address |= value;
        }
    }
    else if (irmp_bit >= irmp_param.command_offset && irmp_bit < irmp_param.command_end)
 800131a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800131c:	42ab      	cmp	r3, r5
 800131e:	d30c      	bcc.n	800133a <irmp_store_bit+0x36>
 8001320:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001322:	428b      	cmp	r3, r1
 8001324:	d209      	bcs.n	800133a <irmp_store_bit+0x36>
    {
        if (irmp_param.lsb_first)
 8001326:	4e24      	ldr	r6, [pc, #144]	; (80013b8 <irmp_store_bit+0xb4>)
 8001328:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 800132a:	6831      	ldr	r1, [r6, #0]
 800132c:	2f00      	cmp	r7, #0
 800132e:	d013      	beq.n	8001358 <irmp_store_bit+0x54>
                irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - 32));   // CV wants cast
            }
            else
#endif
            {
                irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - irmp_param.command_offset));   // CV wants cast
 8001330:	0007      	movs	r7, r0
 8001332:	1b5d      	subs	r5, r3, r5
 8001334:	40af      	lsls	r7, r5
 8001336:	4339      	orrs	r1, r7
            }
        }
        else
        {
            irmp_tmp_command <<= 1;
            irmp_tmp_command |= value;
 8001338:	6031      	str	r1, [r6, #0]
    }
    else
#endif

#if IRMP_SUPPORT_SAMSUNG_PROTOCOL == 1
    if (irmp_param.protocol == IRMP_SAMSUNG_PROTOCOL && irmp_bit >= SAMSUNG_ID_OFFSET && irmp_bit < SAMSUNG_ID_OFFSET + SAMSUNG_ID_LEN)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	2a03      	cmp	r2, #3
 800133e:	d10e      	bne.n	800135e <irmp_store_bit+0x5a>
 8001340:	0019      	movs	r1, r3
 8001342:	3911      	subs	r1, #17
 8001344:	2903      	cmp	r1, #3
 8001346:	d804      	bhi.n	8001352 <irmp_store_bit+0x4e>
    {
        irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - SAMSUNG_ID_OFFSET));                    // store with LSB first
 8001348:	4088      	lsls	r0, r1
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <irmp_store_bit+0xb8>)
 800134c:	6811      	ldr	r1, [r2, #0]
 800134e:	4308      	orrs	r0, r1
 8001350:	6010      	str	r0, [r2, #0]
#endif // IRMP_SUPPORT_MITSU_HEAVY_PROTOCOL
    {
        ;
    }

    irmp_bit++;
 8001352:	3301      	adds	r3, #1
 8001354:	6023      	str	r3, [r4, #0]
}
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
            irmp_tmp_command <<= 1;
 8001358:	0049      	lsls	r1, r1, #1
            irmp_tmp_command |= value;
 800135a:	4301      	orrs	r1, r0
 800135c:	e7ec      	b.n	8001338 <irmp_store_bit+0x34>
    if (irmp_param.protocol == IRMP_KASEIKYO_PROTOCOL)
 800135e:	2a05      	cmp	r2, #5
 8001360:	d1f7      	bne.n	8001352 <irmp_store_bit+0x4e>
        if (irmp_bit >= 20 && irmp_bit < 24)
 8001362:	001a      	movs	r2, r3
 8001364:	3a14      	subs	r2, #20
 8001366:	2a03      	cmp	r2, #3
 8001368:	d814      	bhi.n	8001394 <irmp_store_bit+0x90>
            irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - 8));      // store 4 system bits (genre 1) in upper nibble with LSB first
 800136a:	4913      	ldr	r1, [pc, #76]	; (80013b8 <irmp_store_bit+0xb4>)
 800136c:	320c      	adds	r2, #12
            genre2 |= (((uint_fast8_t) (value)) << (irmp_bit - 20));                // store 4 system bits (genre 2) in upper nibble with LSB first
 800136e:	0005      	movs	r5, r0
 8001370:	4095      	lsls	r5, r2
 8001372:	002a      	movs	r2, r5
 8001374:	680d      	ldr	r5, [r1, #0]
 8001376:	432a      	orrs	r2, r5
 8001378:	600a      	str	r2, [r1, #0]
            if (value)
 800137a:	2207      	movs	r2, #7
 800137c:	2101      	movs	r1, #1
 800137e:	401a      	ands	r2, r3
 8001380:	4091      	lsls	r1, r2
 8001382:	4e0f      	ldr	r6, [pc, #60]	; (80013c0 <irmp_store_bit+0xbc>)
 8001384:	08dd      	lsrs	r5, r3, #3
 8001386:	5777      	ldrsb	r7, [r6, r5]
 8001388:	b24a      	sxtb	r2, r1
 800138a:	2800      	cmp	r0, #0
 800138c:	d00b      	beq.n	80013a6 <irmp_store_bit+0xa2>
                xor_check[irmp_bit / 8] |= 1 << (irmp_bit % 8);
 800138e:	433a      	orrs	r2, r7
 8001390:	5572      	strb	r2, [r6, r5]
 8001392:	e7de      	b.n	8001352 <irmp_store_bit+0x4e>
        else if (irmp_bit >= 24 && irmp_bit < 28)
 8001394:	0019      	movs	r1, r3
 8001396:	3918      	subs	r1, #24
 8001398:	2903      	cmp	r1, #3
 800139a:	d801      	bhi.n	80013a0 <irmp_store_bit+0x9c>
            genre2 |= (((uint_fast8_t) (value)) << (irmp_bit - 20));                // store 4 system bits (genre 2) in upper nibble with LSB first
 800139c:	4909      	ldr	r1, [pc, #36]	; (80013c4 <irmp_store_bit+0xc0>)
 800139e:	e7e6      	b.n	800136e <irmp_store_bit+0x6a>
        if (irmp_bit < KASEIKYO_COMPLETE_DATA_LEN)
 80013a0:	2b2f      	cmp	r3, #47	; 0x2f
 80013a2:	d8d6      	bhi.n	8001352 <irmp_store_bit+0x4e>
 80013a4:	e7e9      	b.n	800137a <irmp_store_bit+0x76>
                xor_check[irmp_bit / 8] &= ~(1 << (irmp_bit % 8));
 80013a6:	4397      	bics	r7, r2
 80013a8:	5577      	strb	r7, [r6, r5]
 80013aa:	e7d2      	b.n	8001352 <irmp_store_bit+0x4e>
 80013ac:	20000208 	.word	0x20000208
 80013b0:	200001f4 	.word	0x200001f4
 80013b4:	2000025c 	.word	0x2000025c
 80013b8:	20000260 	.word	0x20000260
 80013bc:	20000264 	.word	0x20000264
 80013c0:	20000278 	.word	0x20000278
 80013c4:	200001ec 	.word	0x200001ec

080013c8 <irmp_init>:
}
 80013c8:	4770      	bx	lr
	...

080013cc <irmp_get_data>:
uint_fast8_t irmp_get_data (IRMP_DATA * irmp_data_p) {
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (irmp_ir_detected)
 80013ce:	4c2e      	ldr	r4, [pc, #184]	; (8001488 <irmp_get_data+0xbc>)
uint_fast8_t irmp_get_data (IRMP_DATA * irmp_data_p) {
 80013d0:	0002      	movs	r2, r0
    if (irmp_ir_detected)
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d02b      	beq.n	8001430 <irmp_get_data+0x64>
        switch (irmp_protocol)
 80013d8:	4d2c      	ldr	r5, [pc, #176]	; (800148c <irmp_get_data+0xc0>)
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <irmp_get_data+0xc4>)
 80013dc:	6829      	ldr	r1, [r5, #0]
 80013de:	2903      	cmp	r1, #3
 80013e0:	d027      	beq.n	8001432 <irmp_get_data+0x66>
 80013e2:	2932      	cmp	r1, #50	; 0x32
 80013e4:	d043      	beq.n	800146e <irmp_get_data+0xa2>
 80013e6:	2902      	cmp	r1, #2
 80013e8:	d10a      	bne.n	8001400 <irmp_get_data+0x34>
                if ((irmp_command >> 8) == (~irmp_command & 0x00FF))
 80013ea:	20ff      	movs	r0, #255	; 0xff
 80013ec:	0007      	movs	r7, r0
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	681e      	ldr	r6, [r3, #0]
 80013f2:	0a09      	lsrs	r1, r1, #8
 80013f4:	43b7      	bics	r7, r6
 80013f6:	42b9      	cmp	r1, r7
 80013f8:	d12d      	bne.n	8001456 <irmp_get_data+0x8a>
                    irmp_command &= 0x00FF;
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	4008      	ands	r0, r1
 80013fe:	6018      	str	r0, [r3, #0]
            irmp_data_p->protocol = irmp_protocol;
 8001400:	6829      	ldr	r1, [r5, #0]
 8001402:	7011      	strb	r1, [r2, #0]
            irmp_data_p->address  = irmp_address;
 8001404:	4923      	ldr	r1, [pc, #140]	; (8001494 <irmp_get_data+0xc8>)
 8001406:	6808      	ldr	r0, [r1, #0]
 8001408:	b281      	uxth	r1, r0
 800140a:	7050      	strb	r0, [r2, #1]
            irmp_data_p->command  = irmp_command;
 800140c:	6818      	ldr	r0, [r3, #0]
            irmp_data_p->address  = irmp_address;
 800140e:	0a09      	lsrs	r1, r1, #8
 8001410:	7091      	strb	r1, [r2, #2]
            irmp_data_p->command  = irmp_command;
 8001412:	70d0      	strb	r0, [r2, #3]
 8001414:	b281      	uxth	r1, r0
 8001416:	2001      	movs	r0, #1
 8001418:	0a09      	lsrs	r1, r1, #8
 800141a:	7111      	strb	r1, [r2, #4]
            irmp_data_p->flags    = irmp_flags;
 800141c:	491e      	ldr	r1, [pc, #120]	; (8001498 <irmp_get_data+0xcc>)
 800141e:	6809      	ldr	r1, [r1, #0]
 8001420:	7151      	strb	r1, [r2, #5]
        irmp_command  = 0;                                      // don't reset irmp_protocol here, needed for detection of NEC & JVC repetition frames!
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
        irmp_address  = 0;
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <irmp_get_data+0xc8>)
 8001428:	601a      	str	r2, [r3, #0]
        irmp_flags    = 0;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <irmp_get_data+0xcc>)
 800142c:	601a      	str	r2, [r3, #0]
        irmp_ir_detected = FALSE;
 800142e:	6022      	str	r2, [r4, #0]
}
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((irmp_command >> 8) == (~irmp_command & 0x00FF))
 8001432:	26ff      	movs	r6, #255	; 0xff
 8001434:	0037      	movs	r7, r6
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	0a00      	lsrs	r0, r0, #8
 800143c:	438f      	bics	r7, r1
 800143e:	42b8      	cmp	r0, r7
 8001440:	d11f      	bne.n	8001482 <irmp_get_data+0xb6>
                    irmp_command &= 0xff;
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	4031      	ands	r1, r6
 8001446:	6019      	str	r1, [r3, #0]
                    irmp_command |= irmp_id << 8;
 8001448:	4914      	ldr	r1, [pc, #80]	; (800149c <irmp_get_data+0xd0>)
 800144a:	6809      	ldr	r1, [r1, #0]
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	0209      	lsls	r1, r1, #8
 8001450:	4301      	orrs	r1, r0
                    irmp_command &= 0xff;
 8001452:	6019      	str	r1, [r3, #0]
        if (rtc)
 8001454:	e7d4      	b.n	8001400 <irmp_get_data+0x34>
                else if (irmp_address == 0x87EE)
 8001456:	4e0f      	ldr	r6, [pc, #60]	; (8001494 <irmp_get_data+0xc8>)
 8001458:	4911      	ldr	r1, [pc, #68]	; (80014a0 <irmp_get_data+0xd4>)
 800145a:	6837      	ldr	r7, [r6, #0]
 800145c:	428f      	cmp	r7, r1
 800145e:	d110      	bne.n	8001482 <irmp_get_data+0xb6>
                    irmp_protocol = IRMP_APPLE_PROTOCOL;
 8001460:	210b      	movs	r1, #11
 8001462:	6029      	str	r1, [r5, #0]
                    irmp_address = (irmp_command & 0xFF00) >> 8;
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	0a09      	lsrs	r1, r1, #8
 8001468:	4001      	ands	r1, r0
 800146a:	6031      	str	r1, [r6, #0]
 800146c:	e7c5      	b.n	80013fa <irmp_get_data+0x2e>
                if ((irmp_command >> 8) == (irmp_command & 0x00FF))
 800146e:	27ff      	movs	r7, #255	; 0xff
 8001470:	681e      	ldr	r6, [r3, #0]
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	0a36      	lsrs	r6, r6, #8
 8001476:	4038      	ands	r0, r7
 8001478:	4286      	cmp	r6, r0
 800147a:	d102      	bne.n	8001482 <irmp_get_data+0xb6>
                    irmp_command &= 0xff;
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	4039      	ands	r1, r7
 8001480:	e7e7      	b.n	8001452 <irmp_get_data+0x86>
            irmp_protocol = IRMP_UNKNOWN_PROTOCOL;
 8001482:	2000      	movs	r0, #0
 8001484:	6028      	str	r0, [r5, #0]
 8001486:	e7cc      	b.n	8001422 <irmp_get_data+0x56>
 8001488:	20000204 	.word	0x20000204
 800148c:	20000250 	.word	0x20000250
 8001490:	200001f8 	.word	0x200001f8
 8001494:	200001f0 	.word	0x200001f0
 8001498:	200001fc 	.word	0x200001fc
 800149c:	20000200 	.word	0x20000200
 80014a0:	000087ee 	.word	0x000087ee

080014a4 <irmp_ISR>:
/*---------------------------------------------------------------------------------------------------------------------------------------------------
 *  ISR routine
 *  @details  ISR routine, called 10000 times per second
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint_fast8_t irmp_ISR (void) {
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
extern void RCC_gpio_init( void );
extern void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num );

static inline uint8_t gpio_pin_READ( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
//	if ( (port->IDR & pin) ) return 1;
	if ( !(port->IDR & pin) ) return 1;
 80014a6:	4bbc      	ldr	r3, [pc, #752]	; (8001798 <irmp_ISR+0x2f4>)
 80014a8:	691a      	ldr	r2, [r3, #16]
    }
#endif // IRMP_USE_CALLBACK == 1

    irmp_log(irmp_input);                                                       // log ir signal, if IRMP_LOGGING defined

    if (! irmp_ir_detected)                                                     // ir code already detected?
 80014aa:	4bbc      	ldr	r3, [pc, #752]	; (800179c <irmp_ISR+0x2f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <irmp_ISR+0x28>
 80014b2:	2380      	movs	r3, #128	; 0x80
    {                                                                           // no...
        if (! irmp_start_bit_detected)                                          // start bit detected?
 80014b4:	4cba      	ldr	r4, [pc, #744]	; (80017a0 <irmp_ISR+0x2fc>)
 80014b6:	01db      	lsls	r3, r3, #7
 80014b8:	401a      	ands	r2, r3
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d126      	bne.n	800150e <irmp_ISR+0x6a>
        {                                                                       // no...
            if (! irmp_input)                                                   // receiving burst?
 80014c0:	48b8      	ldr	r0, [pc, #736]	; (80017a4 <irmp_ISR+0x300>)
 80014c2:	6801      	ldr	r1, [r0, #0]
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	d104      	bne.n	80014d2 <irmp_ISR+0x2e>
                if (! irmp_pulse_time)
                {
                    ANALYZE_PRINTF("%8.3fms [starting pulse]\n", (double) (time_counter * 1000) / F_INTERRUPTS);
                }
#endif // ANALYZE
                irmp_pulse_time++;                                              // increment counter
 80014c8:	3101      	adds	r1, #1
 80014ca:	6001      	str	r1, [r0, #0]
#if defined(STELLARIS_ARM_CORTEX_M4)
    // Clear the timer interrupt
    TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);
#endif

    return (irmp_ir_detected);
 80014cc:	4bb3      	ldr	r3, [pc, #716]	; (800179c <irmp_ISR+0x2f8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
}
 80014d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (irmp_pulse_time)                                            // it's dark....
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d013      	beq.n	80014fe <irmp_ISR+0x5a>
                    irmp_start_bit_detected = 1;
 80014d6:	2201      	movs	r2, #1
                    wait_for_start_space    = 1;
 80014d8:	49b3      	ldr	r1, [pc, #716]	; (80017a8 <irmp_ISR+0x304>)
                    irmp_start_bit_detected = 1;
 80014da:	6022      	str	r2, [r4, #0]
                    wait_for_start_space    = 1;
 80014dc:	600a      	str	r2, [r1, #0]
                    wait_for_space          = 0;
 80014de:	49b3      	ldr	r1, [pc, #716]	; (80017ac <irmp_ISR+0x308>)
 80014e0:	600b      	str	r3, [r1, #0]
                    irmp_tmp_command        = 0;
 80014e2:	49b3      	ldr	r1, [pc, #716]	; (80017b0 <irmp_ISR+0x30c>)
 80014e4:	600b      	str	r3, [r1, #0]
                    irmp_tmp_address        = 0;
 80014e6:	49b3      	ldr	r1, [pc, #716]	; (80017b4 <irmp_ISR+0x310>)
 80014e8:	600b      	str	r3, [r1, #0]
                    genre2                  = 0;
 80014ea:	49b3      	ldr	r1, [pc, #716]	; (80017b8 <irmp_ISR+0x314>)
 80014ec:	600b      	str	r3, [r1, #0]
                    irmp_tmp_id = 0;
 80014ee:	49b3      	ldr	r1, [pc, #716]	; (80017bc <irmp_ISR+0x318>)
 80014f0:	600b      	str	r3, [r1, #0]
                    irmp_bit                = 0xff;
 80014f2:	21ff      	movs	r1, #255	; 0xff
 80014f4:	4bb2      	ldr	r3, [pc, #712]	; (80017c0 <irmp_ISR+0x31c>)
 80014f6:	6019      	str	r1, [r3, #0]
                    irmp_pause_time         = 1;                                // 1st pause: set to 1, not to 0!
 80014f8:	4bb2      	ldr	r3, [pc, #712]	; (80017c4 <irmp_ISR+0x320>)
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e7e6      	b.n	80014cc <irmp_ISR+0x28>
                    if (key_repetition_len < 0xFFFF)                            // avoid overflow of counter
 80014fe:	4ab2      	ldr	r2, [pc, #712]	; (80017c8 <irmp_ISR+0x324>)
 8001500:	49b2      	ldr	r1, [pc, #712]	; (80017cc <irmp_ISR+0x328>)
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	428b      	cmp	r3, r1
 8001506:	d8e1      	bhi.n	80014cc <irmp_ISR+0x28>
                        key_repetition_len++;
 8001508:	3301      	adds	r3, #1
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e7de      	b.n	80014cc <irmp_ISR+0x28>
            if (wait_for_start_space)                                           // we have received start bit...
 800150e:	4ea6      	ldr	r6, [pc, #664]	; (80017a8 <irmp_ISR+0x304>)
 8001510:	6831      	ldr	r1, [r6, #0]
 8001512:	2900      	cmp	r1, #0
 8001514:	d050      	beq.n	80015b8 <irmp_ISR+0x114>
                if (irmp_input)                                                 // still dark?
 8001516:	4dab      	ldr	r5, [pc, #684]	; (80017c4 <irmp_ISR+0x320>)
 8001518:	2a00      	cmp	r2, #0
 800151a:	d00c      	beq.n	8001536 <irmp_ISR+0x92>
                    irmp_pause_time++;                                          // increment counter
 800151c:	782b      	ldrb	r3, [r5, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	702b      	strb	r3, [r5, #0]
                    if (irmp_pause_time > IRMP_TIMEOUT_LEN)                     // timeout?
 8001524:	2b9b      	cmp	r3, #155	; 0x9b
 8001526:	d961      	bls.n	80015ec <irmp_ISR+0x148>
                        irmp_start_bit_detected = 0;                            // reset flags, let's wait for another start bit
 8001528:	2300      	movs	r3, #0
 800152a:	6023      	str	r3, [r4, #0]
                irmp_pulse_time         = 0;
 800152c:	4a9d      	ldr	r2, [pc, #628]	; (80017a4 <irmp_ISR+0x300>)
 800152e:	6013      	str	r3, [r2, #0]
                irmp_pause_time         = 0;
 8001530:	4aa4      	ldr	r2, [pc, #656]	; (80017c4 <irmp_ISR+0x320>)
 8001532:	7013      	strb	r3, [r2, #0]
 8001534:	e7ca      	b.n	80014cc <irmp_ISR+0x28>
                    if (irmp_pulse_time >= SIRCS_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SIRCS_START_BIT_PULSE_LEN_MAX &&
 8001536:	4f9b      	ldr	r7, [pc, #620]	; (80017a4 <irmp_ISR+0x300>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	001a      	movs	r2, r3
 800153c:	3a15      	subs	r2, #21
 800153e:	2a06      	cmp	r2, #6
 8001540:	d80d      	bhi.n	800155e <irmp_ISR+0xba>
 8001542:	782a      	ldrb	r2, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &sircs_param;
 8001544:	49a2      	ldr	r1, [pc, #648]	; (80017d0 <irmp_ISR+0x32c>)
                    if (irmp_pulse_time >= SIRCS_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SIRCS_START_BIT_PULSE_LEN_MAX &&
 8001546:	3a04      	subs	r2, #4
 8001548:	2a03      	cmp	r2, #3
 800154a:	d922      	bls.n	8001592 <irmp_ISR+0xee>
                    if (irmp_pulse_time >= KASEIKYO_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= KASEIKYO_START_BIT_PULSE_LEN_MAX &&
 800154c:	3b1a      	subs	r3, #26
 800154e:	2b10      	cmp	r3, #16
 8001550:	d813      	bhi.n	800157a <irmp_ISR+0xd6>
 8001552:	782b      	ldrb	r3, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &kaseikyo_param;
 8001554:	499f      	ldr	r1, [pc, #636]	; (80017d4 <irmp_ISR+0x330>)
                    if (irmp_pulse_time >= KASEIKYO_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= KASEIKYO_START_BIT_PULSE_LEN_MAX &&
 8001556:	3b0d      	subs	r3, #13
 8001558:	2b08      	cmp	r3, #8
 800155a:	d91a      	bls.n	8001592 <irmp_ISR+0xee>
 800155c:	e00d      	b.n	800157a <irmp_ISR+0xd6>
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 800155e:	001a      	movs	r2, r3
 8001560:	3a3e      	subs	r2, #62	; 0x3e
 8001562:	2a38      	cmp	r2, #56	; 0x38
 8001564:	d80c      	bhi.n	8001580 <irmp_ISR+0xdc>
                        irmp_pause_time >= NEC_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= NEC_START_BIT_PAUSE_LEN_MAX)
 8001566:	782b      	ldrb	r3, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &nec_param;
 8001568:	499b      	ldr	r1, [pc, #620]	; (80017d8 <irmp_ISR+0x334>)
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 800156a:	001a      	movs	r2, r3
 800156c:	3a1e      	subs	r2, #30
 800156e:	2a1e      	cmp	r2, #30
 8001570:	d90f      	bls.n	8001592 <irmp_ISR+0xee>
                    else if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN        && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 8001572:	3b0f      	subs	r3, #15
                            irmp_param_p = (IRMP_PARAMETER *) &nec_rep_param;
 8001574:	4999      	ldr	r1, [pc, #612]	; (80017dc <irmp_ISR+0x338>)
                    else if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN        && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d90b      	bls.n	8001592 <irmp_ISR+0xee>
                        irmp_start_bit_detected = 0;                            // wait for another start bit...
 800157a:	2100      	movs	r1, #0
 800157c:	6021      	str	r1, [r4, #0]
 800157e:	e008      	b.n	8001592 <irmp_ISR+0xee>
                    if (irmp_pulse_time >= SAMSUNG_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_START_BIT_PULSE_LEN_MAX &&
 8001580:	001a      	movs	r2, r3
 8001582:	3a28      	subs	r2, #40	; 0x28
 8001584:	2a0b      	cmp	r2, #11
 8001586:	d8e1      	bhi.n	800154c <irmp_ISR+0xa8>
 8001588:	782a      	ldrb	r2, [r5, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &samsung_param;
 800158a:	4995      	ldr	r1, [pc, #596]	; (80017e0 <irmp_ISR+0x33c>)
                    if (irmp_pulse_time >= SAMSUNG_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_START_BIT_PULSE_LEN_MAX &&
 800158c:	3a28      	subs	r2, #40	; 0x28
 800158e:	2a0b      	cmp	r2, #11
 8001590:	d8dc      	bhi.n	800154c <irmp_ISR+0xa8>
                    if (irmp_start_bit_detected)
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <irmp_ISR+0xfc>
                        memcpy_P (&irmp_param, irmp_param_p, sizeof (IRMP_PARAMETER));
 8001598:	2244      	movs	r2, #68	; 0x44
 800159a:	4892      	ldr	r0, [pc, #584]	; (80017e4 <irmp_ISR+0x340>)
 800159c:	f000 fe46 	bl	800222c <memcpy>
                    irmp_bit = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <irmp_ISR+0x31c>)
                    irmp_pause_time = 0;
 80015a4:	702b      	strb	r3, [r5, #0]
                    irmp_bit = 0;
 80015a6:	6013      	str	r3, [r2, #0]
                    irmp_pulse_time = 1;                                        // set counter to 1, not 0
 80015a8:	2201      	movs	r2, #1
                    wait_for_start_space = 0;
 80015aa:	6033      	str	r3, [r6, #0]
                    irmp_pulse_time = 1;                                        // set counter to 1, not 0
 80015ac:	603a      	str	r2, [r7, #0]
            if (irmp_start_bit_detected && irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 0)    // enough bits received?
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d100      	bne.n	80015b6 <irmp_ISR+0x112>
 80015b4:	e78a      	b.n	80014cc <irmp_ISR+0x28>
 80015b6:	e019      	b.n	80015ec <irmp_ISR+0x148>
            else if (wait_for_space)                                            // the data section....
 80015b8:	4d7c      	ldr	r5, [pc, #496]	; (80017ac <irmp_ISR+0x308>)
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <irmp_ISR+0x11e>
 80015c0:	e131      	b.n	8001826 <irmp_ISR+0x382>
                if (irmp_input)                                                 // still dark?
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <irmp_ISR+0x340>)
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d100      	bne.n	80015ca <irmp_ISR+0x126>
 80015c8:	e0cc      	b.n	8001764 <irmp_ISR+0x2c0>
                    if (irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 1)
 80015ca:	4a7d      	ldr	r2, [pc, #500]	; (80017c0 <irmp_ISR+0x31c>)
 80015cc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	4296      	cmp	r6, r2
 80015d2:	d153      	bne.n	800167c <irmp_ISR+0x1d8>
 80015d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015d6:	2801      	cmp	r0, #1
 80015d8:	d150      	bne.n	800167c <irmp_ISR+0x1d8>
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 80015da:	4a72      	ldr	r2, [pc, #456]	; (80017a4 <irmp_ISR+0x300>)
                        if (
 80015dc:	6958      	ldr	r0, [r3, #20]
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 80015de:	6812      	ldr	r2, [r2, #0]
                        if (
 80015e0:	4290      	cmp	r0, r2
 80015e2:	d8a1      	bhi.n	8001528 <irmp_ISR+0x84>
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 80015e4:	6998      	ldr	r0, [r3, #24]
 80015e6:	4282      	cmp	r2, r0
 80015e8:	d89e      	bhi.n	8001528 <irmp_ISR+0x84>
                            irmp_param.stop_bit = 0;
 80015ea:	6399      	str	r1, [r3, #56]	; 0x38
            if (irmp_start_bit_detected && irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 0)    // enough bits received?
 80015ec:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <irmp_ISR+0x31c>)
 80015ee:	4a7d      	ldr	r2, [pc, #500]	; (80017e4 <irmp_ISR+0x340>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015f4:	4283      	cmp	r3, r0
 80015f6:	d000      	beq.n	80015fa <irmp_ISR+0x156>
 80015f8:	e768      	b.n	80014cc <irmp_ISR+0x28>
 80015fa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d000      	beq.n	8001602 <irmp_ISR+0x15e>
 8001600:	e764      	b.n	80014cc <irmp_ISR+0x28>
                if (last_irmp_command == irmp_tmp_command && key_repetition_len < AUTO_FRAME_REPETITION_LEN)
 8001602:	4979      	ldr	r1, [pc, #484]	; (80017e8 <irmp_ISR+0x344>)
 8001604:	4c6a      	ldr	r4, [pc, #424]	; (80017b0 <irmp_ISR+0x30c>)
 8001606:	6809      	ldr	r1, [r1, #0]
 8001608:	6826      	ldr	r6, [r4, #0]
 800160a:	4d78      	ldr	r5, [pc, #480]	; (80017ec <irmp_ISR+0x348>)
 800160c:	42b1      	cmp	r1, r6
 800160e:	d107      	bne.n	8001620 <irmp_ISR+0x17c>
 8001610:	26c8      	movs	r6, #200	; 0xc8
 8001612:	4f6d      	ldr	r7, [pc, #436]	; (80017c8 <irmp_ISR+0x324>)
 8001614:	00b6      	lsls	r6, r6, #2
 8001616:	683f      	ldr	r7, [r7, #0]
 8001618:	42b7      	cmp	r7, r6
 800161a:	d201      	bcs.n	8001620 <irmp_ISR+0x17c>
                    repetition_frame_number++;
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	3301      	adds	r3, #1
                if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL && (repetition_frame_number == 1 || repetition_frame_number == 2))
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	602b      	str	r3, [r5, #0]
 8001624:	2a01      	cmp	r2, #1
 8001626:	d000      	beq.n	800162a <irmp_ISR+0x186>
 8001628:	e109      	b.n	800183e <irmp_ISR+0x39a>
 800162a:	3b01      	subs	r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d900      	bls.n	8001632 <irmp_ISR+0x18e>
 8001630:	e105      	b.n	800183e <irmp_ISR+0x39a>
                    key_repetition_len = 0;
 8001632:	2200      	movs	r2, #0
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <irmp_ISR+0x324>)
                        irmp_id = irmp_tmp_id;
 8001636:	601a      	str	r2, [r3, #0]
                if (irmp_ir_detected)
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <irmp_ISR+0x2f8>)
 800163a:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <irmp_ISR+0x30c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d017      	beq.n	8001672 <irmp_ISR+0x1ce>
                    if (last_irmp_command == irmp_tmp_command &&
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <irmp_ISR+0x310>)
 8001644:	6814      	ldr	r4, [r2, #0]
 8001646:	681e      	ldr	r6, [r3, #0]
 8001648:	485f      	ldr	r0, [pc, #380]	; (80017c8 <irmp_ISR+0x324>)
 800164a:	4d69      	ldr	r5, [pc, #420]	; (80017f0 <irmp_ISR+0x34c>)
 800164c:	42a1      	cmp	r1, r4
 800164e:	d10b      	bne.n	8001668 <irmp_ISR+0x1c4>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	42b3      	cmp	r3, r6
 8001654:	d108      	bne.n	8001668 <irmp_ISR+0x1c4>
                        last_irmp_address == irmp_tmp_address &&
 8001656:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <irmp_ISR+0x350>)
 8001658:	6801      	ldr	r1, [r0, #0]
 800165a:	4299      	cmp	r1, r3
 800165c:	d804      	bhi.n	8001668 <irmp_ISR+0x1c4>
                        irmp_flags |= IRMP_FLAG_REPETITION;
 800165e:	2301      	movs	r3, #1
 8001660:	4965      	ldr	r1, [pc, #404]	; (80017f8 <irmp_ISR+0x354>)
 8001662:	680f      	ldr	r7, [r1, #0]
 8001664:	433b      	orrs	r3, r7
 8001666:	600b      	str	r3, [r1, #0]
                    last_irmp_command = irmp_tmp_command;                           // store as last command, too
 8001668:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <irmp_ISR+0x344>)
                    last_irmp_address = irmp_tmp_address;                           // store as last address, too
 800166a:	602e      	str	r6, [r5, #0]
                    last_irmp_command = irmp_tmp_command;                           // store as last command, too
 800166c:	601c      	str	r4, [r3, #0]
                    key_repetition_len = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	6003      	str	r3, [r0, #0]
                irmp_start_bit_detected = 0;                                        // and wait for next start bit
 8001672:	2300      	movs	r3, #0
 8001674:	494a      	ldr	r1, [pc, #296]	; (80017a0 <irmp_ISR+0x2fc>)
                irmp_tmp_command        = 0;
 8001676:	6013      	str	r3, [r2, #0]
                irmp_start_bit_detected = 0;                                        // and wait for next start bit
 8001678:	600b      	str	r3, [r1, #0]
                irmp_tmp_command        = 0;
 800167a:	e757      	b.n	800152c <irmp_ISR+0x88>
                        irmp_pause_time++;                                                          // increment counter
 800167c:	4951      	ldr	r1, [pc, #324]	; (80017c4 <irmp_ISR+0x320>)
 800167e:	4851      	ldr	r0, [pc, #324]	; (80017c4 <irmp_ISR+0x320>)
 8001680:	7809      	ldrb	r1, [r1, #0]
 8001682:	3101      	adds	r1, #1
 8001684:	b2c9      	uxtb	r1, r1
 8001686:	7001      	strb	r1, [r0, #0]
                        if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL &&                           // Sony has a variable number of bits:
 8001688:	4856      	ldr	r0, [pc, #344]	; (80017e4 <irmp_ISR+0x340>)
 800168a:	6807      	ldr	r7, [r0, #0]
 800168c:	46bc      	mov	ip, r7
 800168e:	2f01      	cmp	r7, #1
 8001690:	d137      	bne.n	8001702 <irmp_ISR+0x25e>
 8001692:	2908      	cmp	r1, #8
 8001694:	d9aa      	bls.n	80015ec <irmp_ISR+0x148>
                            irmp_pause_time > SIRCS_PAUSE_LEN_MAX &&                                // minimum is 12
 8001696:	2a0a      	cmp	r2, #10
 8001698:	d933      	bls.n	8001702 <irmp_ISR+0x25e>
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 800169a:	4946      	ldr	r1, [pc, #280]	; (80017b4 <irmp_ISR+0x310>)
                            irmp_param.complete_len = irmp_bit + 1;                                 // set new complete length
 800169c:	1c53      	adds	r3, r2, #1
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 800169e:	680e      	ldr	r6, [r1, #0]
                            irmp_param.complete_len = irmp_bit + 1;                                 // set new complete length
 80016a0:	6343      	str	r3, [r0, #52]	; 0x34
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 80016a2:	3b0c      	subs	r3, #12
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4333      	orrs	r3, r6
 80016a8:	600b      	str	r3, [r1, #0]
                            irmp_param.command_end = irmp_param.command_offset + irmp_bit + 1;      // correct command length
 80016aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016ac:	18d2      	adds	r2, r2, r3
                            irmp_pause_time = SIRCS_PAUSE_LEN_MAX - 1;                              // correct pause length
 80016ae:	2307      	movs	r3, #7
                            irmp_param.command_end = irmp_param.command_offset + irmp_bit + 1;      // correct command length
 80016b0:	3201      	adds	r2, #1
 80016b2:	6302      	str	r2, [r0, #48]	; 0x30
                            irmp_pause_time = SIRCS_PAUSE_LEN_MAX - 1;                              // correct pause length
 80016b4:	4a43      	ldr	r2, [pc, #268]	; (80017c4 <irmp_ISR+0x320>)
 80016b6:	7013      	strb	r3, [r2, #0]
                    if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max &&
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <irmp_ISR+0x300>)
 80016ba:	4942      	ldr	r1, [pc, #264]	; (80017c4 <irmp_ISR+0x320>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <irmp_ISR+0x340>)
 80016c0:	6858      	ldr	r0, [r3, #4]
 80016c2:	4290      	cmp	r0, r2
 80016c4:	d80a      	bhi.n	80016dc <irmp_ISR+0x238>
 80016c6:	6898      	ldr	r0, [r3, #8]
 80016c8:	4282      	cmp	r2, r0
 80016ca:	d807      	bhi.n	80016dc <irmp_ISR+0x238>
                        irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 80016cc:	7808      	ldrb	r0, [r1, #0]
                    if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max &&
 80016ce:	68de      	ldr	r6, [r3, #12]
 80016d0:	42b0      	cmp	r0, r6
 80016d2:	d303      	bcc.n	80016dc <irmp_ISR+0x238>
                        irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 80016d4:	691e      	ldr	r6, [r3, #16]
 80016d6:	42b0      	cmp	r0, r6
 80016d8:	d800      	bhi.n	80016dc <irmp_ISR+0x238>
 80016da:	e099      	b.n	8001810 <irmp_ISR+0x36c>
                    else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max &&
 80016dc:	6958      	ldr	r0, [r3, #20]
 80016de:	4282      	cmp	r2, r0
 80016e0:	d200      	bcs.n	80016e4 <irmp_ISR+0x240>
 80016e2:	e09b      	b.n	800181c <irmp_ISR+0x378>
 80016e4:	6998      	ldr	r0, [r3, #24]
 80016e6:	4282      	cmp	r2, r0
 80016e8:	d900      	bls.n	80016ec <irmp_ISR+0x248>
 80016ea:	e097      	b.n	800181c <irmp_ISR+0x378>
                             irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max)
 80016ec:	780a      	ldrb	r2, [r1, #0]
                    else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max &&
 80016ee:	69d9      	ldr	r1, [r3, #28]
 80016f0:	428a      	cmp	r2, r1
 80016f2:	d200      	bcs.n	80016f6 <irmp_ISR+0x252>
 80016f4:	e092      	b.n	800181c <irmp_ISR+0x378>
                             irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d900      	bls.n	80016fe <irmp_ISR+0x25a>
 80016fc:	e08e      	b.n	800181c <irmp_ISR+0x378>
                                irmp_store_bit (0);
 80016fe:	2000      	movs	r0, #0
 8001700:	e087      	b.n	8001812 <irmp_ISR+0x36e>
                        if (irmp_pause_time > IRMP_TIMEOUT_LEN)                 // timeout?
 8001702:	299b      	cmp	r1, #155	; 0x9b
 8001704:	d800      	bhi.n	8001708 <irmp_ISR+0x264>
 8001706:	e771      	b.n	80015ec <irmp_ISR+0x148>
                            if (irmp_bit == irmp_param.complete_len - 1 && irmp_param.stop_bit == 0)
 8001708:	1e71      	subs	r1, r6, #1
 800170a:	428a      	cmp	r2, r1
 800170c:	d105      	bne.n	800171a <irmp_ISR+0x276>
 800170e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001710:	2900      	cmp	r1, #0
 8001712:	d102      	bne.n	800171a <irmp_ISR+0x276>
                                irmp_bit++;
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <irmp_ISR+0x31c>)
 8001716:	601e      	str	r6, [r3, #0]
                if (got_light)
 8001718:	e768      	b.n	80015ec <irmp_ISR+0x148>
                            else if ((irmp_param.protocol == IRMP_NEC_PROTOCOL || irmp_param.protocol == IRMP_NEC42_PROTOCOL) && irmp_bit == 0)
 800171a:	4661      	mov	r1, ip
 800171c:	2902      	cmp	r1, #2
 800171e:	d002      	beq.n	8001726 <irmp_ISR+0x282>
 8001720:	291c      	cmp	r1, #28
 8001722:	d000      	beq.n	8001726 <irmp_ISR+0x282>
 8001724:	e700      	b.n	8001528 <irmp_ISR+0x84>
 8001726:	2a00      	cmp	r2, #0
 8001728:	d000      	beq.n	800172c <irmp_ISR+0x288>
 800172a:	e6fd      	b.n	8001528 <irmp_ISR+0x84>
                                if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX)
 800172c:	2196      	movs	r1, #150	; 0x96
 800172e:	4826      	ldr	r0, [pc, #152]	; (80017c8 <irmp_ISR+0x324>)
 8001730:	00c9      	lsls	r1, r1, #3
 8001732:	6804      	ldr	r4, [r0, #0]
 8001734:	428c      	cmp	r4, r1
 8001736:	d212      	bcs.n	800175e <irmp_ISR+0x2ba>
                                    irmp_param.stop_bit     = TRUE;                         // set flag
 8001738:	2101      	movs	r1, #1
                                    irmp_param.protocol     = IRMP_NEC_PROTOCOL;            // switch protocol
 800173a:	2402      	movs	r4, #2
                                    irmp_param.stop_bit     = TRUE;                         // set flag
 800173c:	6399      	str	r1, [r3, #56]	; 0x38
                                    irmp_param.protocol     = IRMP_NEC_PROTOCOL;            // switch protocol
 800173e:	601c      	str	r4, [r3, #0]
                                    irmp_param.complete_len = irmp_bit;                     // patch length: 16 or 17
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
                                    irmp_tmp_address = last_irmp_address;                   // address is last address
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <irmp_ISR+0x34c>)
                                    key_repetition_len = 0;
 8001744:	6002      	str	r2, [r0, #0]
                                    irmp_tmp_address = last_irmp_address;                   // address is last address
 8001746:	681c      	ldr	r4, [r3, #0]
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <irmp_ISR+0x310>)
 800174a:	601c      	str	r4, [r3, #0]
                                    irmp_tmp_command = last_irmp_command;                   // command is last command
 800174c:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <irmp_ISR+0x344>)
 800174e:	681c      	ldr	r4, [r3, #0]
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <irmp_ISR+0x30c>)
 8001752:	601c      	str	r4, [r3, #0]
                                    irmp_flags |= IRMP_FLAG_REPETITION;
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <irmp_ISR+0x354>)
 8001756:	681c      	ldr	r4, [r3, #0]
 8001758:	4321      	orrs	r1, r4
 800175a:	6019      	str	r1, [r3, #0]
                if (got_light)
 800175c:	e746      	b.n	80015ec <irmp_ISR+0x148>
                                    irmp_ir_detected = FALSE;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <irmp_ISR+0x2f8>)
 8001760:	601a      	str	r2, [r3, #0]
                if (got_light)
 8001762:	e743      	b.n	80015ec <irmp_ISR+0x148>
                    if (irmp_param.protocol == IRMP_SAMSUNG_PROTOCOL && irmp_bit == 16)       // Samsung: 16th bit
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	2903      	cmp	r1, #3
 8001768:	d1a6      	bne.n	80016b8 <irmp_ISR+0x214>
 800176a:	4e15      	ldr	r6, [pc, #84]	; (80017c0 <irmp_ISR+0x31c>)
 800176c:	6830      	ldr	r0, [r6, #0]
 800176e:	2810      	cmp	r0, #16
 8001770:	d1a2      	bne.n	80016b8 <irmp_ISR+0x214>
                        if (irmp_pulse_time >= SAMSUNG_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_PULSE_LEN_MAX &&
 8001772:	490c      	ldr	r1, [pc, #48]	; (80017a4 <irmp_ISR+0x300>)
 8001774:	6809      	ldr	r1, [r1, #0]
 8001776:	3903      	subs	r1, #3
 8001778:	2905      	cmp	r1, #5
 800177a:	d84f      	bhi.n	800181c <irmp_ISR+0x378>
                            irmp_pause_time >= SAMSUNG_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_START_BIT_PAUSE_LEN_MAX)
 800177c:	4911      	ldr	r1, [pc, #68]	; (80017c4 <irmp_ISR+0x320>)
 800177e:	7809      	ldrb	r1, [r1, #0]
                        if (irmp_pulse_time >= SAMSUNG_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_PULSE_LEN_MAX &&
 8001780:	000f      	movs	r7, r1
 8001782:	3f28      	subs	r7, #40	; 0x28
 8001784:	2f0b      	cmp	r7, #11
 8001786:	d839      	bhi.n	80017fc <irmp_ISR+0x358>
                            irmp_bit++;
 8001788:	2311      	movs	r3, #17
                            wait_for_space = 0;
 800178a:	602a      	str	r2, [r5, #0]
                            irmp_bit++;
 800178c:	6033      	str	r3, [r6, #0]
                    irmp_pulse_time = 1;                                            // set counter to 1, not 0
 800178e:	2201      	movs	r2, #1
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <irmp_ISR+0x300>)
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e70b      	b.n	80015ae <irmp_ISR+0x10a>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	48000400 	.word	0x48000400
 800179c:	20000204 	.word	0x20000204
 80017a0:	20000258 	.word	0x20000258
 80017a4:	20000254 	.word	0x20000254
 80017a8:	20000274 	.word	0x20000274
 80017ac:	20000270 	.word	0x20000270
 80017b0:	20000260 	.word	0x20000260
 80017b4:	2000025c 	.word	0x2000025c
 80017b8:	200001ec 	.word	0x200001ec
 80017bc:	20000264 	.word	0x20000264
 80017c0:	200001f4 	.word	0x200001f4
 80017c4:	2000024c 	.word	0x2000024c
 80017c8:	20000268 	.word	0x20000268
 80017cc:	0000fffe 	.word	0x0000fffe
 80017d0:	08002c4c 	.word	0x08002c4c
 80017d4:	08002b3c 	.word	0x08002b3c
 80017d8:	08002b80 	.word	0x08002b80
 80017dc:	08002bc4 	.word	0x08002bc4
 80017e0:	08002c08 	.word	0x08002c08
 80017e4:	20000208 	.word	0x20000208
 80017e8:	2000002c 	.word	0x2000002c
 80017ec:	2000026c 	.word	0x2000026c
 80017f0:	20000028 	.word	0x20000028
 80017f4:	000005db 	.word	0x000005db
 80017f8:	200001fc 	.word	0x200001fc
                            irmp_param.protocol         = IRMP_SAMSUNG32_PROTOCOL;
 80017fc:	220a      	movs	r2, #10
                            if (irmp_pause_time >= SAMSUNG_1_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_1_PAUSE_LEN_MAX)
 80017fe:	390a      	subs	r1, #10
                            irmp_param.protocol         = IRMP_SAMSUNG32_PROTOCOL;
 8001800:	601a      	str	r2, [r3, #0]
                            irmp_param.command_end      = SAMSUNG32_COMMAND_OFFSET + SAMSUNG32_COMMAND_LEN;
 8001802:	3216      	adds	r2, #22
                            irmp_param.command_offset   = SAMSUNG32_COMMAND_OFFSET;
 8001804:	62d8      	str	r0, [r3, #44]	; 0x2c
                            irmp_param.command_end      = SAMSUNG32_COMMAND_OFFSET + SAMSUNG32_COMMAND_LEN;
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
                            irmp_param.complete_len     = SAMSUNG32_COMPLETE_DATA_LEN;
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
                            if (irmp_pause_time >= SAMSUNG_1_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_1_PAUSE_LEN_MAX)
 800180a:	290b      	cmp	r1, #11
 800180c:	d900      	bls.n	8001810 <irmp_ISR+0x36c>
 800180e:	e776      	b.n	80016fe <irmp_ISR+0x25a>
                                irmp_store_bit (1);
 8001810:	2001      	movs	r0, #1
                                irmp_store_bit (0);
 8001812:	f7ff fd77 	bl	8001304 <irmp_store_bit>
                                wait_for_space = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	602b      	str	r3, [r5, #0]
 800181a:	e7b8      	b.n	800178e <irmp_ISR+0x2ea>
                            irmp_start_bit_detected = 0;                            // reset flags and wait for next start bit
 800181c:	2300      	movs	r3, #0
                            irmp_pause_time         = 0;
 800181e:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <irmp_ISR+0x440>)
                            irmp_start_bit_detected = 0;                            // reset flags and wait for next start bit
 8001820:	6023      	str	r3, [r4, #0]
                            irmp_pause_time         = 0;
 8001822:	7013      	strb	r3, [r2, #0]
 8001824:	e7b3      	b.n	800178e <irmp_ISR+0x2ea>
                if (! irmp_input)                                                   // still light?
 8001826:	2a00      	cmp	r2, #0
 8001828:	d104      	bne.n	8001834 <irmp_ISR+0x390>
                    irmp_pulse_time++;                                              // increment counter
 800182a:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <irmp_ISR+0x444>)
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e6db      	b.n	80015ec <irmp_ISR+0x148>
                    wait_for_space  = 1;                                            // let's count the time (see above)
 8001834:	2301      	movs	r3, #1
                    irmp_pause_time = 1;                                            // set pause counter to 1, not 0
 8001836:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <irmp_ISR+0x440>)
                    wait_for_space  = 1;                                            // let's count the time (see above)
 8001838:	602b      	str	r3, [r5, #0]
                    irmp_pause_time = 1;                                            // set pause counter to 1, not 0
 800183a:	7013      	strb	r3, [r2, #0]
 800183c:	e6d6      	b.n	80015ec <irmp_ISR+0x148>
                    irmp_ir_detected = TRUE;
 800183e:	2301      	movs	r3, #1
 8001840:	4d2a      	ldr	r5, [pc, #168]	; (80018ec <irmp_ISR+0x448>)
 8001842:	602b      	str	r3, [r5, #0]
                        if (irmp_param.protocol == IRMP_NEC_PROTOCOL && irmp_bit == 0)  // repetition frame
 8001844:	2a02      	cmp	r2, #2
 8001846:	d126      	bne.n	8001896 <irmp_ISR+0x3f2>
 8001848:	2800      	cmp	r0, #0
 800184a:	d10f      	bne.n	800186c <irmp_ISR+0x3c8>
                            if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX)
 800184c:	2696      	movs	r6, #150	; 0x96
 800184e:	4d28      	ldr	r5, [pc, #160]	; (80018f0 <irmp_ISR+0x44c>)
 8001850:	00f6      	lsls	r6, r6, #3
 8001852:	682f      	ldr	r7, [r5, #0]
 8001854:	42b7      	cmp	r7, r6
 8001856:	d21b      	bcs.n	8001890 <irmp_ISR+0x3ec>
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 8001858:	4e26      	ldr	r6, [pc, #152]	; (80018f4 <irmp_ISR+0x450>)
                                irmp_tmp_command = last_irmp_command;                   // command is last command
 800185a:	6021      	str	r1, [r4, #0]
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 800185c:	6837      	ldr	r7, [r6, #0]
                                irmp_flags |= IRMP_FLAG_REPETITION;
 800185e:	4c26      	ldr	r4, [pc, #152]	; (80018f8 <irmp_ISR+0x454>)
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 8001860:	4e26      	ldr	r6, [pc, #152]	; (80018fc <irmp_ISR+0x458>)
                                key_repetition_len = 0;
 8001862:	6028      	str	r0, [r5, #0]
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 8001864:	6037      	str	r7, [r6, #0]
                                irmp_flags |= IRMP_FLAG_REPETITION;
 8001866:	6826      	ldr	r6, [r4, #0]
 8001868:	4333      	orrs	r3, r6
 800186a:	6023      	str	r3, [r4, #0]
                            irmp_protocol = irmp_param.protocol;
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <irmp_ISR+0x45c>)
                        irmp_address = irmp_tmp_address;                            // store address
 800186e:	4825      	ldr	r0, [pc, #148]	; (8001904 <irmp_ISR+0x460>)
                            irmp_protocol = irmp_param.protocol;
 8001870:	601a      	str	r2, [r3, #0]
                        irmp_address = irmp_tmp_address;                            // store address
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <irmp_ISR+0x458>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6003      	str	r3, [r0, #0]
                        if (irmp_param.protocol == IRMP_NEC_PROTOCOL)
 8001878:	2a02      	cmp	r2, #2
 800187a:	d101      	bne.n	8001880 <irmp_ISR+0x3dc>
                            last_irmp_address = irmp_tmp_address;                   // store as last address, too
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <irmp_ISR+0x450>)
 800187e:	6013      	str	r3, [r2, #0]
                        irmp_command = irmp_tmp_command;                            // store command
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <irmp_ISR+0x464>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <irmp_ISR+0x468>)
 8001886:	601a      	str	r2, [r3, #0]
                        irmp_id = irmp_tmp_id;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <irmp_ISR+0x46c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <irmp_ISR+0x470>)
 800188e:	e6d2      	b.n	8001636 <irmp_ISR+0x192>
                                irmp_ir_detected = FALSE;
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <irmp_ISR+0x448>)
 8001892:	6018      	str	r0, [r3, #0]
 8001894:	e7ea      	b.n	800186c <irmp_ISR+0x3c8>
                        if (irmp_param.protocol == IRMP_KASEIKYO_PROTOCOL)
 8001896:	2a05      	cmp	r2, #5
 8001898:	d1e8      	bne.n	800186c <irmp_ISR+0x3c8>
                            if (xor_value != (xor_check[2] & 0x0F))
 800189a:	250f      	movs	r5, #15
                            xor_value = (xor_check[0] & 0x0F) ^ ((xor_check[0] & 0xF0) >> 4) ^ (xor_check[1] & 0x0F) ^ ((xor_check[1] & 0xF0) >> 4);
 800189c:	4c1e      	ldr	r4, [pc, #120]	; (8001918 <irmp_ISR+0x474>)
 800189e:	7827      	ldrb	r7, [r4, #0]
 80018a0:	7866      	ldrb	r6, [r4, #1]
 80018a2:	093b      	lsrs	r3, r7, #4
                            if (xor_value != (xor_check[2] & 0x0F))
 80018a4:	402f      	ands	r7, r5
 80018a6:	407b      	eors	r3, r7
 80018a8:	0037      	movs	r7, r6
 80018aa:	78a0      	ldrb	r0, [r4, #2]
 80018ac:	402f      	ands	r7, r5
 80018ae:	407b      	eors	r3, r7
                            xor_value = (xor_check[0] & 0x0F) ^ ((xor_check[0] & 0xF0) >> 4) ^ (xor_check[1] & 0x0F) ^ ((xor_check[1] & 0xF0) >> 4);
 80018b0:	0936      	lsrs	r6, r6, #4
                            if (xor_value != (xor_check[2] & 0x0F))
 80018b2:	4073      	eors	r3, r6
 80018b4:	4005      	ands	r5, r0
 80018b6:	42ab      	cmp	r3, r5
 80018b8:	d002      	beq.n	80018c0 <irmp_ISR+0x41c>
                                irmp_ir_detected = FALSE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	4d0b      	ldr	r5, [pc, #44]	; (80018ec <irmp_ISR+0x448>)
 80018be:	602b      	str	r3, [r5, #0]
                            xor_value = xor_check[2] ^ xor_check[3] ^ xor_check[4];
 80018c0:	78e3      	ldrb	r3, [r4, #3]
 80018c2:	7925      	ldrb	r5, [r4, #4]
 80018c4:	4043      	eors	r3, r0
                            if (xor_value != xor_check[5])
 80018c6:	7960      	ldrb	r0, [r4, #5]
 80018c8:	406b      	eors	r3, r5
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d002      	beq.n	80018d4 <irmp_ISR+0x430>
                                irmp_ir_detected = FALSE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <irmp_ISR+0x448>)
 80018d2:	6003      	str	r3, [r0, #0]
                            irmp_flags |= genre2;       // write the genre2 bits into MSB of the flag byte
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <irmp_ISR+0x454>)
 80018d6:	4c11      	ldr	r4, [pc, #68]	; (800191c <irmp_ISR+0x478>)
 80018d8:	6803      	ldr	r3, [r0, #0]
 80018da:	6824      	ldr	r4, [r4, #0]
 80018dc:	4323      	orrs	r3, r4
 80018de:	6003      	str	r3, [r0, #0]
 80018e0:	e7c4      	b.n	800186c <irmp_ISR+0x3c8>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	2000024c 	.word	0x2000024c
 80018e8:	20000254 	.word	0x20000254
 80018ec:	20000204 	.word	0x20000204
 80018f0:	20000268 	.word	0x20000268
 80018f4:	20000028 	.word	0x20000028
 80018f8:	200001fc 	.word	0x200001fc
 80018fc:	2000025c 	.word	0x2000025c
 8001900:	20000250 	.word	0x20000250
 8001904:	200001f0 	.word	0x200001f0
 8001908:	20000260 	.word	0x20000260
 800190c:	200001f8 	.word	0x200001f8
 8001910:	20000264 	.word	0x20000264
 8001914:	20000200 	.word	0x20000200
 8001918:	20000278 	.word	0x20000278
 800191c:	200001ec 	.word	0x200001ec

08001920 <TIM14_IRQHandler>:

	TIM14->CR1 = TIM_CR1_CEN;		// Counter start
	NVIC_EnableIRQ( TIM14_IRQn );
}
void TIM14_IRQHandler(void) {	// Timer2 Interrupt Handler
	if ( TIM14->SR & TIM_SR_UIF ) {
 8001920:	2101      	movs	r1, #1
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <TIM14_IRQHandler+0x18>)
void TIM14_IRQHandler(void) {	// Timer2 Interrupt Handler
 8001924:	b510      	push	{r4, lr}
	if ( TIM14->SR & TIM_SR_UIF ) {
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	420a      	tst	r2, r1
 800192a:	d004      	beq.n	8001936 <TIM14_IRQHandler+0x16>
		TIM14->SR &= ~TIM_SR_UIF;		// Update interrupt Flag
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	438a      	bics	r2, r1
 8001930:	611a      	str	r2, [r3, #16]
		(void) irmp_ISR();				// call IRMP ISR
 8001932:	f7ff fdb7 	bl	80014a4 <irmp_ISR>
	}
}
 8001936:	bd10      	pop	{r4, pc}
 8001938:	40002000 	.word	0x40002000

0800193c <sw_ir_init>:
/********************************************************/

/********************************************************/
void sw_ir_init(void) {
 800193c:	b510      	push	{r4, lr}
	irmp_init();					// initialize irmp
 800193e:	f7ff fd43 	bl	80013c8 <irmp_init>
	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <sw_ir_init+0x38>)
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	69d1      	ldr	r1, [r2, #28]
 800194a:	430b      	orrs	r3, r1
 800194c:	61d3      	str	r3, [r2, #28]
	TIM14->PSC = ( (SystemCoreClock / F_INTERRUPTS) / 8 ) - 1;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <sw_ir_init+0x3c>)
 8001950:	490a      	ldr	r1, [pc, #40]	; (800197c <sw_ir_init+0x40>)
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	f7fe fbe2 	bl	800011c <__udivsi3>
	TIM14->ARR = 7;
 8001958:	2207      	movs	r2, #7
	TIM14->PSC = ( (SystemCoreClock / F_INTERRUPTS) / 8 ) - 1;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <sw_ir_init+0x44>)
 800195c:	3801      	subs	r0, #1
 800195e:	6298      	str	r0, [r3, #40]	; 0x28
	TIM14->ARR = 7;
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->DIER	= TIM_DIER_UIE;		// Update Event Interrupt
 8001962:	3a06      	subs	r2, #6
 8001964:	60da      	str	r2, [r3, #12]
	TIM14->CR1 = TIM_CR1_CEN;		// Counter start
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <sw_ir_init+0x48>)
 800196c:	0312      	lsls	r2, r2, #12
 800196e:	601a      	str	r2, [r3, #0]
	timer14_init();					// initialize timer2
}
 8001970:	bd10      	pop	{r4, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	40021000 	.word	0x40021000
 8001978:	20000000 	.word	0x20000000
 800197c:	00013880 	.word	0x00013880
 8001980:	40002000 	.word	0x40002000
 8001984:	e000e100 	.word	0xe000e100

08001988 <SW_IR_DECODED_EVENT>:
}
/********************************************************/


/**********************************************************************/
void SW_IR_DECODED_EVENT( void ) {
 8001988:	b570      	push	{r4, r5, r6, lr}
	if ( irmp_get_data(&irmpData) && repeatTimer == 0 ) {
 800198a:	4c1a      	ldr	r4, [pc, #104]	; (80019f4 <SW_IR_DECODED_EVENT+0x6c>)
 800198c:	0020      	movs	r0, r4
 800198e:	f7ff fd1d 	bl	80013cc <irmp_get_data>
 8001992:	4919      	ldr	r1, [pc, #100]	; (80019f8 <SW_IR_DECODED_EVENT+0x70>)
 8001994:	2800      	cmp	r0, #0
 8001996:	d103      	bne.n	80019a0 <SW_IR_DECODED_EVENT+0x18>
	irDecoded = sw_get_ir_data( AUTOREPEAT_ON );
 8001998:	2301      	movs	r3, #1
 800199a:	425b      	negs	r3, r3
 800199c:	800b      	strh	r3, [r1, #0]
	if ( irDecoded != NO_IR_CODE ) {
		if ( irDecoded_event_callback ) {
			irDecoded_event_callback();
		}
	}
}
 800199e:	bd70      	pop	{r4, r5, r6, pc}
	if ( irmp_get_data(&irmpData) && repeatTimer == 0 ) {
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <SW_IR_DECODED_EVENT+0x74>)
 80019a2:	8802      	ldrh	r2, [r0, #0]
 80019a4:	b293      	uxth	r3, r2
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d1f6      	bne.n	8001998 <SW_IR_DECODED_EVENT+0x10>
		if ( irmpData.address != globalIrAddress )
 80019aa:	78a2      	ldrb	r2, [r4, #2]
 80019ac:	7866      	ldrb	r6, [r4, #1]
 80019ae:	4d14      	ldr	r5, [pc, #80]	; (8001a00 <SW_IR_DECODED_EVENT+0x78>)
 80019b0:	0212      	lsls	r2, r2, #8
 80019b2:	4332      	orrs	r2, r6
 80019b4:	42aa      	cmp	r2, r5
 80019b6:	d006      	beq.n	80019c6 <SW_IR_DECODED_EVENT+0x3e>
	irDecoded = sw_get_ir_data( AUTOREPEAT_ON );
 80019b8:	800b      	strh	r3, [r1, #0]
		if ( irDecoded_event_callback ) {
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <SW_IR_DECODED_EVENT+0x7c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0ed      	beq.n	800199e <SW_IR_DECODED_EVENT+0x16>
			irDecoded_event_callback();
 80019c2:	4798      	blx	r3
}
 80019c4:	e7eb      	b.n	800199e <SW_IR_DECODED_EVENT+0x16>
		repeatFlag = irmpData.flags & IRMP_FLAG_REPETITION;
 80019c6:	7965      	ldrb	r5, [r4, #5]
 80019c8:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <SW_IR_DECODED_EVENT+0x80>)
		if ( repeatFlag ) irRepeatCounter++;
 80019ca:	07ed      	lsls	r5, r5, #31
 80019cc:	d502      	bpl.n	80019d4 <SW_IR_DECODED_EVENT+0x4c>
 80019ce:	8813      	ldrh	r3, [r2, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	8013      	strh	r3, [r2, #0]
		if ( irRepeatCounter > IR_OMIT || irRepeatCounter == 0 )
 80019d6:	3b01      	subs	r3, #1
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d9dd      	bls.n	8001998 <SW_IR_DECODED_EVENT+0x10>
			repeatTimer = 100;
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	8003      	strh	r3, [r0, #0]
		return irmpData.command;
 80019e0:	7923      	ldrb	r3, [r4, #4]
 80019e2:	78e2      	ldrb	r2, [r4, #3]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	4313      	orrs	r3, r2
	if ( irDecoded != NO_IR_CODE ) {
 80019e8:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <SW_IR_DECODED_EVENT+0x84>)
	irDecoded = sw_get_ir_data( AUTOREPEAT_ON );
 80019ea:	800b      	strh	r3, [r1, #0]
	if ( irDecoded != NO_IR_CODE ) {
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d1e4      	bne.n	80019ba <SW_IR_DECODED_EVENT+0x32>
 80019f0:	e7d5      	b.n	800199e <SW_IR_DECODED_EVENT+0x16>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	20000286 	.word	0x20000286
 80019f8:	20000030 	.word	0x20000030
 80019fc:	200002be 	.word	0x200002be
 8001a00:	00000813 	.word	0x00000813
 8001a04:	20000280 	.word	0x20000280
 8001a08:	20000284 	.word	0x20000284
 8001a0c:	0000ffff 	.word	0x0000ffff

08001a10 <keyboard_ptr>:
/************************************************************************/

/************************ Public functions ******************************/
KEYB_t * keyboard_ptr(void) {
	return &keyboard;
}
 8001a10:	4800      	ldr	r0, [pc, #0]	; (8001a14 <keyboard_ptr+0x4>)
 8001a12:	4770      	bx	lr
 8001a14:	2000028d 	.word	0x2000028d

08001a18 <sw_keyboard_init>:

// ---------------------- Main init function -----------------------------
void sw_keyboard_init(void) {
 8001a18:	b510      	push	{r4, lr}
	for ( uint8_t i = 0; i<NUM_KEYS; i++ ) {
		gpio_pin_cfg(KeysTab[ i ].port, KeysTab[ i ].pin, gpio_mode_in_PU);
 8001a1a:	2490      	movs	r4, #144	; 0x90
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	05e4      	lsls	r4, r4, #23
 8001a20:	0020      	movs	r0, r4
 8001a22:	2210      	movs	r2, #16
 8001a24:	00c9      	lsls	r1, r1, #3
 8001a26:	f7fe fd19 	bl	800045c <gpio_pin_cfg>
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0020      	movs	r0, r4
 8001a2e:	2210      	movs	r2, #16
 8001a30:	0109      	lsls	r1, r1, #4
 8001a32:	f7fe fd13 	bl	800045c <gpio_pin_cfg>
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	2210      	movs	r2, #16
 8001a3a:	0020      	movs	r0, r4
 8001a3c:	0149      	lsls	r1, r1, #5
 8001a3e:	f7fe fd0d 	bl	800045c <gpio_pin_cfg>
	}
}
 8001a42:	bd10      	pop	{r4, pc}

08001a44 <SW_KEYBOARD_EVENT>:
// -----------------------------------------------------------------------

void SW_KEYBOARD_EVENT( void ) {
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	2390      	movs	r3, #144	; 0x90
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	4e65      	ldr	r6, [pc, #404]	; (8001be0 <SW_KEYBOARD_EVENT+0x19c>)
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	7832      	ldrb	r2, [r6, #0]
 8001a50:	4c64      	ldr	r4, [pc, #400]	; (8001be4 <SW_KEYBOARD_EVENT+0x1a0>)
 8001a52:	0549      	lsls	r1, r1, #21
 8001a54:	d526      	bpl.n	8001aa4 <SW_KEYBOARD_EVENT+0x60>
 8001a56:	6919      	ldr	r1, [r3, #16]
 8001a58:	0509      	lsls	r1, r1, #20
 8001a5a:	d537      	bpl.n	8001acc <SW_KEYBOARD_EVENT+0x88>
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	04db      	lsls	r3, r3, #19
 8001a60:	d536      	bpl.n	8001ad0 <SW_KEYBOARD_EVENT+0x8c>
	else if (state == keyRELEASED && lastState == keyPRESSED)
 8001a62:	2a01      	cmp	r2, #1
 8001a64:	d136      	bne.n	8001ad4 <SW_KEYBOARD_EVENT+0x90>
			timeFallRise = millis() - timeFallRise;
 8001a66:	f000 fb71 	bl	800214c <millis>
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <SW_KEYBOARD_EVENT+0x1a4>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	1a80      	subs	r0, r0, r2
			if ( speedPressCounter++ == (EDGE_COUNTER - 1) ) {
 8001a70:	4a5e      	ldr	r2, [pc, #376]	; (8001bec <SW_KEYBOARD_EVENT+0x1a8>)
			timeFallRise = millis() - timeFallRise;
 8001a72:	8018      	strh	r0, [r3, #0]
			if ( speedPressCounter++ == (EDGE_COUNTER - 1) ) {
 8001a74:	7813      	ldrb	r3, [r2, #0]
 8001a76:	1c59      	adds	r1, r3, #1
 8001a78:	7011      	strb	r1, [r2, #0]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d105      	bne.n	8001a8a <SW_KEYBOARD_EVENT+0x46>
				timeFall2Rise = millis() - timeFall2Rise;
 8001a7e:	f000 fb65 	bl	800214c <millis>
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <SW_KEYBOARD_EVENT+0x1ac>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	1a80      	subs	r0, r0, r2
 8001a88:	8018      	strh	r0, [r3, #0]
	if ( keyAction == action_check || keyAction == action_repeat ) {
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <SW_KEYBOARD_EVENT+0x1b0>)
 8001a8c:	21fd      	movs	r1, #253	; 0xfd
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	3a02      	subs	r2, #2
 8001a92:	0013      	movs	r3, r2
 8001a94:	400b      	ands	r3, r1
 8001a96:	420a      	tst	r2, r1
 8001a98:	d11e      	bne.n	8001ad8 <SW_KEYBOARD_EVENT+0x94>
		debounceTimer = DEBOUNCE_TIME;
 8001a9a:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
 8001a9c:	39f3      	subs	r1, #243	; 0xf3
 8001a9e:	8011      	strh	r1, [r2, #0]
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	e00c      	b.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
#	define learn_key3_pressed()	gpio_pin_READ( BTN3_PORT, BTN3_PIN )

/********************************* Obsługa kilku klawiszy  *******************************/
static inline uint8_t sw_get_keys_simple( void ) {
	if ( learn_key1_pressed() )
		return 1;									// Przycisk 1 wciśnięty
 8001aa4:	2301      	movs	r3, #1
		keyboard.keyCoded = pressKeyCheck;
 8001aa6:	4d53      	ldr	r5, [pc, #332]	; (8001bf4 <SW_KEYBOARD_EVENT+0x1b0>)
 8001aa8:	7063      	strb	r3, [r4, #1]
	if 		(state == keyPRESSED  && lastState == keyRELEASED)
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d129      	bne.n	8001b02 <SW_KEYBOARD_EVENT+0xbe>
	switch ( keyAction ) {
 8001aae:	782b      	ldrb	r3, [r5, #0]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d049      	beq.n	8001b48 <SW_KEYBOARD_EVENT+0x104>
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d054      	beq.n	8001b62 <SW_KEYBOARD_EVENT+0x11e>
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d039      	beq.n	8001b30 <SW_KEYBOARD_EVENT+0xec>
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001abc:	2300      	movs	r3, #0
	lastState = pressKeyCheck;
 8001abe:	7032      	strb	r2, [r6, #0]
	if (keyboard.keyCoded)return keyEvent;
 8001ac0:	7862      	ldrb	r2, [r4, #1]
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d000      	beq.n	8001ac8 <SW_KEYBOARD_EVENT+0x84>
 8001ac6:	e079      	b.n	8001bbc <SW_KEYBOARD_EVENT+0x178>
	keyboard.keyEvent = key_pressed();
 8001ac8:	7022      	strb	r2, [r4, #0]
		if( KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback ) {
			KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback();
			machine_state_reset();
		}
	}
}
 8001aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else
	if ( learn_key2_pressed() )
		return 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	e7ea      	b.n	8001aa6 <SW_KEYBOARD_EVENT+0x62>
	else
	if ( learn_key3_pressed() )
		return 3;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e7e8      	b.n	8001aa6 <SW_KEYBOARD_EVENT+0x62>
	else if (state == keyRELEASED && lastState == keyRELEASED)
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d001      	beq.n	8001adc <SW_KEYBOARD_EVENT+0x98>
		debounceTimer = DEBOUNCE_TIME;
 8001ad8:	2200      	movs	r2, #0
 8001ada:	e7ef      	b.n	8001abc <SW_KEYBOARD_EVENT+0x78>
	switch ( keyAction ) {
 8001adc:	4945      	ldr	r1, [pc, #276]	; (8001bf4 <SW_KEYBOARD_EVENT+0x1b0>)
 8001ade:	780b      	ldrb	r3, [r1, #0]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d04d      	beq.n	8001b80 <SW_KEYBOARD_EVENT+0x13c>
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d1e9      	bne.n	8001abc <SW_KEYBOARD_EVENT+0x78>
			if ( debounceTimer == 0 ) {
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f3      	bne.n	8001ad8 <SW_KEYBOARD_EVENT+0x94>
				if ( repeatCounter == 0 ) {
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <SW_KEYBOARD_EVENT+0x1b8>)
				keyAction = action_idle;
 8001af2:	700a      	strb	r2, [r1, #0]
				if ( repeatCounter == 0 ) {
 8001af4:	781b      	ldrb	r3, [r3, #0]
					keyEvent = MEDIUM_PRESS;
 8001af6:	4258      	negs	r0, r3
 8001af8:	4143      	adcs	r3, r0
				speedPressCounter = 0;
 8001afa:	483c      	ldr	r0, [pc, #240]	; (8001bec <SW_KEYBOARD_EVENT+0x1a8>)
					keyEvent = MEDIUM_PRESS;
 8001afc:	005b      	lsls	r3, r3, #1
				speedPressCounter = 0;
 8001afe:	7002      	strb	r2, [r0, #0]
				keyAction = action_idle;
 8001b00:	e7dd      	b.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
			timeFallRise = millis();
 8001b02:	f000 fb23 	bl	800214c <millis>
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <SW_KEYBOARD_EVENT+0x1a4>)
			if (speedPressCounter++ == 0) {
 8001b08:	4a38      	ldr	r2, [pc, #224]	; (8001bec <SW_KEYBOARD_EVENT+0x1a8>)
			timeFallRise = millis();
 8001b0a:	8018      	strh	r0, [r3, #0]
			if (speedPressCounter++ == 0) {
 8001b0c:	7813      	ldrb	r3, [r2, #0]
 8001b0e:	1c59      	adds	r1, r3, #1
 8001b10:	7011      	strb	r1, [r2, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <SW_KEYBOARD_EVENT+0xda>
				timeFall2Rise = millis();
 8001b16:	f000 fb19 	bl	800214c <millis>
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <SW_KEYBOARD_EVENT+0x1ac>)
 8001b1c:	8018      	strh	r0, [r3, #0]
	if ( keyAction == action_idle ) {
 8001b1e:	782b      	ldrb	r3, [r5, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <SW_KEYBOARD_EVENT+0xf6>
		keyAction 	  = action_debounce;
 8001b24:	2201      	movs	r2, #1
		debounceTimer = DEBOUNCE_TIME;
 8001b26:	200a      	movs	r0, #10
 8001b28:	4933      	ldr	r1, [pc, #204]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
		keyAction 	  = action_debounce;
 8001b2a:	702a      	strb	r2, [r5, #0]
				debounceTimer = SHORT_MAX_TIME;
 8001b2c:	8008      	strh	r0, [r1, #0]
 8001b2e:	e7c6      	b.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
			if ( debounceTimer == 0 ) {
 8001b30:	4931      	ldr	r1, [pc, #196]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
 8001b32:	8808      	ldrh	r0, [r1, #0]
 8001b34:	b283      	uxth	r3, r0
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d001      	beq.n	8001b3e <SW_KEYBOARD_EVENT+0xfa>
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	e7be      	b.n	8001abc <SW_KEYBOARD_EVENT+0x78>
				keyAction 	  = action_check;
 8001b3e:	2002      	movs	r0, #2
 8001b40:	7028      	strb	r0, [r5, #0]
				debounceTimer = SHORT_MAX_TIME;
 8001b42:	308f      	adds	r0, #143	; 0x8f
 8001b44:	30ff      	adds	r0, #255	; 0xff
 8001b46:	e7f1      	b.n	8001b2c <SW_KEYBOARD_EVENT+0xe8>
			if ( debounceTimer == 0 ) {
 8001b48:	492b      	ldr	r1, [pc, #172]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
 8001b4a:	8808      	ldrh	r0, [r1, #0]
 8001b4c:	b283      	uxth	r3, r0
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d1f3      	bne.n	8001b3a <SW_KEYBOARD_EVENT+0xf6>
				keyAction 	  = action_repeat;
 8001b52:	3004      	adds	r0, #4
 8001b54:	7028      	strb	r0, [r5, #0]
				debounceTimer = MEDIUM_MAX_TIME;
 8001b56:	30f1      	adds	r0, #241	; 0xf1
 8001b58:	30ff      	adds	r0, #255	; 0xff
 8001b5a:	8008      	strh	r0, [r1, #0]
				repeatCounter = 0;
 8001b5c:	4927      	ldr	r1, [pc, #156]	; (8001bfc <SW_KEYBOARD_EVENT+0x1b8>)
 8001b5e:	700b      	strb	r3, [r1, #0]
 8001b60:	e7ad      	b.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
			if ( debounceTimer == 0 ) {
 8001b62:	4925      	ldr	r1, [pc, #148]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
 8001b64:	8808      	ldrh	r0, [r1, #0]
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d1e7      	bne.n	8001b3a <SW_KEYBOARD_EVENT+0xf6>
				debounceTimer = REPEAT_TIME;
 8001b6a:	3064      	adds	r0, #100	; 0x64
 8001b6c:	8008      	strh	r0, [r1, #0]
				repeatCounter++;
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <SW_KEYBOARD_EVENT+0x1b8>)
 8001b70:	7801      	ldrb	r1, [r0, #0]
 8001b72:	3101      	adds	r1, #1
 8001b74:	b2c9      	uxtb	r1, r1
 8001b76:	7001      	strb	r1, [r0, #0]
				if ( repeatCounter == VLONG_TIME_CNT ) {
 8001b78:	2914      	cmp	r1, #20
 8001b7a:	d0a0      	beq.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
					keyEvent = KEY_REPEAT;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	e79e      	b.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
			if ( debounceTimer == 0 ) {
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <SW_KEYBOARD_EVENT+0x1b4>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1a7      	bne.n	8001ad8 <SW_KEYBOARD_EVENT+0x94>
				if ( timeFallRise > SHORT_MIN_TIME ) {
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <SW_KEYBOARD_EVENT+0x1a4>)
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <SW_KEYBOARD_EVENT+0x1a8>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d904      	bls.n	8001b9c <SW_KEYBOARD_EVENT+0x158>
					keyEvent = SHORT_PRESS;
 8001b92:	2301      	movs	r3, #1
					speedPressCounter = 0;
 8001b94:	7002      	strb	r2, [r0, #0]
				keyAction = action_idle;
 8001b96:	2000      	movs	r0, #0
 8001b98:	7008      	strb	r0, [r1, #0]
 8001b9a:	e790      	b.n	8001abe <SW_KEYBOARD_EVENT+0x7a>
					if ( speedPressCounter == EDGE_COUNTER ) {
 8001b9c:	7805      	ldrb	r5, [r0, #0]
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001b9e:	0013      	movs	r3, r2
					if ( speedPressCounter == EDGE_COUNTER ) {
 8001ba0:	2d04      	cmp	r5, #4
 8001ba2:	d1f8      	bne.n	8001b96 <SW_KEYBOARD_EVENT+0x152>
						if ( timeFall2Rise < MULTI_PRESS_TIME ) {
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <SW_KEYBOARD_EVENT+0x1ac>)
 8001ba6:	27fa      	movs	r7, #250	; 0xfa
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	0015      	movs	r5, r2
 8001bac:	469c      	mov	ip, r3
 8001bae:	007f      	lsls	r7, r7, #1
	KEY_EVENT_t keyEvent = NO_EVENT;
 8001bb0:	0013      	movs	r3, r2
						if ( timeFall2Rise < MULTI_PRESS_TIME ) {
 8001bb2:	45bc      	cmp	ip, r7
 8001bb4:	d200      	bcs.n	8001bb8 <SW_KEYBOARD_EVENT+0x174>
							keyEvent = DOUBLE_PRESS;
 8001bb6:	2305      	movs	r3, #5
						speedPressCounter = 0;
 8001bb8:	7005      	strb	r5, [r0, #0]
 8001bba:	e7ec      	b.n	8001b96 <SW_KEYBOARD_EVENT+0x152>
	keyboard.keyEvent = key_pressed();
 8001bbc:	7023      	strb	r3, [r4, #0]
	if ( keyboard.keyEvent != NO_EVENT ) {
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <SW_KEYBOARD_EVENT+0x180>
 8001bc2:	e782      	b.n	8001aca <SW_KEYBOARD_EVENT+0x86>
		if( KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback ) {
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <SW_KEYBOARD_EVENT+0x1bc>)
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	189a      	adds	r2, r3, r2
 8001bcc:	6893      	ldr	r3, [r2, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d100      	bne.n	8001bd4 <SW_KEYBOARD_EVENT+0x190>
 8001bd2:	e77a      	b.n	8001aca <SW_KEYBOARD_EVENT+0x86>
			KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback();
 8001bd4:	4798      	blx	r3
	keyboard.keyEvent = NO_EVENT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	7023      	strb	r3, [r4, #0]
	keyboard.keyCoded = NO_KEY;
 8001bda:	7063      	strb	r3, [r4, #1]
}
 8001bdc:	e775      	b.n	8001aca <SW_KEYBOARD_EVENT+0x86>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	2000028f 	.word	0x2000028f
 8001be4:	2000028d 	.word	0x2000028d
 8001be8:	20000294 	.word	0x20000294
 8001bec:	20000291 	.word	0x20000291
 8001bf0:	20000292 	.word	0x20000292
 8001bf4:	2000028c 	.word	0x2000028c
 8001bf8:	200002bc 	.word	0x200002bc
 8001bfc:	20000290 	.word	0x20000290
 8001c00:	08002c90 	.word	0x08002c90

08001c04 <input_init>:
#include "KEYBOARD/keyboard.h"
#include "IR/sw_irmanage.h"

#include "input.h"

void input_init(void) {
 8001c04:	b510      	push	{r4, lr}
	sw_keyboard_init();
 8001c06:	f7ff ff07 	bl	8001a18 <sw_keyboard_init>
	sw_ir_init();
 8001c0a:	f7ff fe97 	bl	800193c <sw_ir_init>
}
 8001c0e:	bd10      	pop	{r4, pc}

08001c10 <input_event>:

INLINE void input_event(void) {
 8001c10:	b510      	push	{r4, lr}
	SW_KEYBOARD_EVENT();
 8001c12:	f7ff ff17 	bl	8001a44 <SW_KEYBOARD_EVENT>
	SW_IR_DECODED_EVENT();
 8001c16:	f7ff feb7 	bl	8001988 <SW_IR_DECODED_EVENT>
}
 8001c1a:	bd10      	pop	{r4, pc}

08001c1c <input_keyboard_proc>:

/**********************************************************************/
void input_keyboard_proc( void ) {
 8001c1c:	b510      	push	{r4, lr}
	KEY_EVENT_t presType  = keyboard_ptr()->keyEvent;
 8001c1e:	f7ff fef7 	bl	8001a10 <keyboard_ptr>
 8001c22:	7804      	ldrb	r4, [r0, #0]
	uint8_t 	keyNumber = keyboard_ptr()->keyCoded;
 8001c24:	f7ff fef4 	bl	8001a10 <keyboard_ptr>

	if ( presType == SHORT_PRESS ) {
 8001c28:	2c01      	cmp	r4, #1
 8001c2a:	d103      	bne.n	8001c34 <input_keyboard_proc+0x18>
				break;
			default:
				break;
		}
//		osdDisplayContant = DISPLAY_SET_TIME;
		softTimer5 = 0;						// Break main loop
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <input_keyboard_proc+0x20>)
 8001c30:	801a      	strh	r2, [r3, #0]
	}
}
 8001c32:	e001      	b.n	8001c38 <input_keyboard_proc+0x1c>
	if ( presType == VLONG_PRESS ) {
 8001c34:	2c04      	cmp	r4, #4
 8001c36:	d0f9      	beq.n	8001c2c <input_keyboard_proc+0x10>
}
 8001c38:	bd10      	pop	{r4, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	200002d8 	.word	0x200002d8

08001c40 <ds3231_get_datetime>:
}
/*************************************************************************/

/************************* Read from DS3231 ******************************/
void ds3231_get_datetime( void ) {
	i2cRxBuff.memAddress = DS3231_TIME_ADDR; 	// memory address to read
 8001c40:	2300      	movs	r3, #0
void ds3231_get_datetime( void ) {
 8001c42:	b510      	push	{r4, lr}
	i2cRxBuff.memAddress = DS3231_TIME_ADDR; 	// memory address to read
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <ds3231_get_datetime+0x14>)
	sw_i2c_dma_get_buff( DS3231_I2C_ADDR, (uint8_t *)&i2cRxBuff,
 8001c46:	2207      	movs	r2, #7
	i2cRxBuff.memAddress = DS3231_TIME_ADDR; 	// memory address to read
 8001c48:	700b      	strb	r3, [r1, #0]
	sw_i2c_dma_get_buff( DS3231_I2C_ADDR, (uint8_t *)&i2cRxBuff,
 8001c4a:	2068      	movs	r0, #104	; 0x68
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f000 f95b 	bl	8001f08 <sw_i2c_dma_get_buff>
						 7, I2C_ADDRESS_BYTE );
}
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	20000296 	.word	0x20000296

08001c58 <EXTI2_3_IRQHandler>:
	if (EXTI->PR & EXTI_PR_PR3) {
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <EXTI2_3_IRQHandler+0x14>)
void EXTI2_3_IRQHandler(void) {
 8001c5c:	b510      	push	{r4, lr}
	if (EXTI->PR & EXTI_PR_PR3) {
 8001c5e:	6959      	ldr	r1, [r3, #20]
 8001c60:	4211      	tst	r1, r2
 8001c62:	d002      	beq.n	8001c6a <EXTI2_3_IRQHandler+0x12>
		EXTI->PR = EXTI_PR_PR3;
 8001c64:	615a      	str	r2, [r3, #20]
		ds3231_get_datetime();
 8001c66:	f7ff ffeb 	bl	8001c40 <ds3231_get_datetime>
}
 8001c6a:	bd10      	pop	{r4, pc}
 8001c6c:	40010400 	.word	0x40010400

08001c70 <STM32F051_Rtc_init_on>:
	RTC->WPR 	= 0x64; 									/* (9) */
}

/*********************** Base functions *******************************/
static void STM32F051_Rtc_init_on(void) {
	RTC->ISR |= RTC_ISR_INIT;		// enter initialization mode.
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <STM32F051_Rtc_init_on+0x14>)
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	60da      	str	r2, [r3, #12]
	while ( (RTC->ISR & RTC_ISR_INITF ) != RTC_ISR_INITF) {}
 8001c7a:	2240      	movs	r2, #64	; 0x40
 8001c7c:	68d9      	ldr	r1, [r3, #12]
 8001c7e:	4211      	tst	r1, r2
 8001c80:	d0fc      	beq.n	8001c7c <STM32F051_Rtc_init_on+0xc>
}
 8001c82:	4770      	bx	lr
 8001c84:	40002800 	.word	0x40002800

08001c88 <STM32F051_Rtc_protect_off>:
static void STM32F051_Rtc_init_off(void) {
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
}

static void STM32F051_Rtc_protect_off(void) {
	PWR->CR	|= PWR_CR_DBP;			// Write protection OFF
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <STM32F051_Rtc_protect_off+0x18>)
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6013      	str	r3, [r2, #0]
	RTC->WPR = WPR_KEY1;			// Unlock the write protection
 8001c94:	22ca      	movs	r2, #202	; 0xca
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <STM32F051_Rtc_protect_off+0x1c>)
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = WPR_KEY2;			// on all the RTC registers
 8001c9a:	3a77      	subs	r2, #119	; 0x77
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c9e:	4770      	bx	lr
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	40002800 	.word	0x40002800

08001ca8 <STM32F051_Rtc_protect_on>:
static void STM32F051_Rtc_protect_on(void) {
	PWR->CR	 &= ~PWR_CR_DBP;		// Write protection ON
 8001ca8:	4a02      	ldr	r2, [pc, #8]	; (8001cb4 <STM32F051_Rtc_protect_on+0xc>)
 8001caa:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <STM32F051_Rtc_protect_on+0x10>)
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	6013      	str	r3, [r2, #0]
}
 8001cb2:	4770      	bx	lr
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	fffffeff 	.word	0xfffffeff

08001cbc <STM32F051_Rtc_Clock_Config>:
/**********************************************************************/

/**********************************************************************/
void STM32F051_Rtc_Clock_Config( void ) {
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001cbc:	2380      	movs	r3, #128	; 0x80
void STM32F051_Rtc_Clock_Config( void ) {
 8001cbe:	b510      	push	{r4, lr}
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001cc0:	4c11      	ldr	r4, [pc, #68]	; (8001d08 <STM32F051_Rtc_Clock_Config+0x4c>)
 8001cc2:	055b      	lsls	r3, r3, #21
 8001cc4:	69e2      	ldr	r2, [r4, #28]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61e3      	str	r3, [r4, #28]

	STM32F051_Rtc_protect_off();
 8001cca:	f7ff ffdd 	bl	8001c88 <STM32F051_Rtc_protect_off>

	RCC->BDCR &= ~RCC_BDCR_RTCEN;	// RTC clock enabled
 8001cce:	6a23      	ldr	r3, [r4, #32]
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <STM32F051_Rtc_Clock_Config+0x50>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	6223      	str	r3, [r4, #32]

#if RTC_CLOCK == LSI_CLOCK
	RCC->CSR |= RCC_CSR_LSION;
	while ( (RCC->CSR & RCC_CSR_LSIRDY) == 0 ) {}
#elif RTC_CLOCK == LSE_CLOCK
	RCC->BDCR |= RCC_BDCR_LSEON;	// LSE 32kHz clock enabled
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	6a22      	ldr	r2, [r4, #32]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	6223      	str	r3, [r4, #32]
	while ( (RCC->BDCR & RCC_BDCR_LSERDY) == 0 ) {}
 8001cde:	2302      	movs	r3, #2
 8001ce0:	6a22      	ldr	r2, [r4, #32]
 8001ce2:	421a      	tst	r2, r3
 8001ce4:	d0fc      	beq.n	8001ce0 <STM32F051_Rtc_Clock_Config+0x24>
#endif

	RCC->BDCR &= ~RCC_BDCR_RTCSEL;		// Reset oscillator selection
 8001ce6:	6a23      	ldr	r3, [r4, #32]
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <STM32F051_Rtc_Clock_Config+0x54>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	6223      	str	r3, [r4, #32]

#if RTC_CLOCK == LSI_CLOCK
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSI;	// Internal 40KHz oscillator clock
#elif RTC_CLOCK == LSE_CLOCK
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;	// External 32KHz oscillator clock
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	6a22      	ldr	r2, [r4, #32]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	6223      	str	r3, [r4, #32]
#endif
	RCC->BDCR |= RCC_BDCR_RTCEN;		// RTC clock enabled
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	6a22      	ldr	r2, [r4, #32]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6223      	str	r3, [r4, #32]

	STM32F051_Rtc_protect_on();
 8001d02:	f7ff ffd1 	bl	8001ca8 <STM32F051_Rtc_protect_on>

	// Activate the watchdog
	// Be sure reset watchdog unless 1s
//	configure_IWDG();
}
 8001d06:	bd10      	pop	{r4, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	ffff7fff 	.word	0xffff7fff
 8001d10:	fffffcff 	.word	0xfffffcff

08001d14 <STM32F051_Rtc_Config>:
/*************************************************************************/

/*************************************************************************/
uint8_t  STM32F051_Rtc_Config( uint8_t resetRtcDomain ) {
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4c0e      	ldr	r4, [pc, #56]	; (8001d50 <STM32F051_Rtc_Config+0x3c>)
 8001d18:	4d0e      	ldr	r5, [pc, #56]	; (8001d54 <STM32F051_Rtc_Config+0x40>)

	if ( resetRtcDomain == 1) {
 8001d1a:	2801      	cmp	r0, #1
 8001d1c:	d003      	beq.n	8001d26 <STM32F051_Rtc_Config+0x12>

	}
	else
	if ( NO_POWER_CHECK == RTC->BKP4R ) {
 8001d1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
		return RTC_CONFIG_NOT_RESET;
 8001d20:	2000      	movs	r0, #0
	if ( NO_POWER_CHECK == RTC->BKP4R ) {
 8001d22:	42ab      	cmp	r3, r5
 8001d24:	d012      	beq.n	8001d4c <STM32F051_Rtc_Config+0x38>
	}
	STM32F051_Rtc_protect_off();
 8001d26:	f7ff ffaf 	bl	8001c88 <STM32F051_Rtc_protect_off>
	STM32F051_Rtc_init_on();
 8001d2a:	f7ff ffa1 	bl	8001c70 <STM32F051_Rtc_init_on>
	// 40KHz/320/256 = 1Hz
	RTC->PRER = (128-1) << RTC_PRER_PREDIV_A_Pos |	// The asynchronous prescaler division factor is set to 128
				(320-1) << RTC_PRER_PREDIV_S_Pos;	// and the synchronous division factor to 256
#else
	// 32KHz/128/256 = 1Hz
	RTC->PRER = (128-1) << RTC_PRER_PREDIV_A_Pos |	// The asynchronous prescaler division factor is set to 128
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <STM32F051_Rtc_Config+0x44>)
 8001d30:	6123      	str	r3, [r4, #16]
				(256-1) << RTC_PRER_PREDIV_S_Pos;	// and the synchronous division factor to 256
#endif

//	RTC->CR |= RTC_CR_FMT;		// 12 hours format: AM/PM
	RTC->CR	|= RTC_CR_ADD1H;	// Add 1 hour (summer time change)
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	68a2      	ldr	r2, [r4, #8]
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	4313      	orrs	r3, r2
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001d3a:	2280      	movs	r2, #128	; 0x80
	RTC->CR	|= RTC_CR_ADD1H;	// Add 1 hour (summer time change)
 8001d3c:	60a3      	str	r3, [r4, #8]


	RTC->BKP4R = NO_POWER_CHECK;// Set magic number to backup register
 8001d3e:	6625      	str	r5, [r4, #96]	; 0x60
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001d40:	68e3      	ldr	r3, [r4, #12]
 8001d42:	4393      	bics	r3, r2
 8001d44:	60e3      	str	r3, [r4, #12]

	STM32F051_Rtc_init_off();
	STM32F051_Rtc_protect_on();
 8001d46:	f7ff ffaf 	bl	8001ca8 <STM32F051_Rtc_protect_on>

//	RTC->CR |= RTC_CR_TSIE;
//	NVIC_EnableIRQ( RTC_IRQn );

	return RTC_CONFIG_RESET;
 8001d4a:	2001      	movs	r0, #1
}
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40002800 	.word	0x40002800
 8001d54:	0000aaaa 	.word	0x0000aaaa
 8001d58:	007f00ff 	.word	0x007f00ff

08001d5c <STM32F051_Rtc_Get_Time>:
/*************************************************************************/
//void RTC_IRQHandler( void ) {
//
//}
/**************************************** Get time from RTC *************************************/
void STM32F051_Rtc_Get_Time( uint8_t * bufferPTR ) {
 8001d5c:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = RTC->TR & (RTC_TR_ST_Msk | RTC_TR_SU_Msk);
 8001d5e:	267f      	movs	r6, #127	; 0x7f
 8001d60:	4d09      	ldr	r5, [pc, #36]	; (8001d88 <STM32F051_Rtc_Get_Time+0x2c>)
void STM32F051_Rtc_Get_Time( uint8_t * bufferPTR ) {
 8001d62:	0004      	movs	r4, r0
	uint32_t tmp = RTC->TR & (RTC_TR_ST_Msk | RTC_TR_SU_Msk);
 8001d64:	6828      	ldr	r0, [r5, #0]
	*(bufferPTR + 0) = sw_bcd2dec( (uint8_t) tmp );							// Seconds
 8001d66:	4030      	ands	r0, r6
 8001d68:	f000 f88a 	bl	8001e80 <sw_bcd2dec>
 8001d6c:	7020      	strb	r0, [r4, #0]

	tmp = RTC->TR & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk);
 8001d6e:	6828      	ldr	r0, [r5, #0]
	*(bufferPTR + 1) = sw_bcd2dec( (uint8_t) (tmp >> RTC_TR_MNU_Pos ) );	// Minutes
 8001d70:	0a00      	lsrs	r0, r0, #8
 8001d72:	4030      	ands	r0, r6
 8001d74:	f000 f884 	bl	8001e80 <sw_bcd2dec>
 8001d78:	7060      	strb	r0, [r4, #1]

	tmp = RTC->TR & (RTC_TR_HT_Msk | RTC_TR_HU_Msk);
 8001d7a:	6828      	ldr	r0, [r5, #0]
	*(bufferPTR + 2) = sw_bcd2dec( (uint8_t) (tmp >> RTC_TR_HU_Pos) );		// Hours
 8001d7c:	0280      	lsls	r0, r0, #10
 8001d7e:	0e80      	lsrs	r0, r0, #26
 8001d80:	f000 f87e 	bl	8001e80 <sw_bcd2dec>
 8001d84:	70a0      	strb	r0, [r4, #2]
}
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	40002800 	.word	0x40002800

08001d8c <STM32F051_Rtc_Get_Date>:
/*************************************************************************************************/
/**************************************** Get date from RTC *************************************/
void STM32F051_Rtc_Get_Date( uint8_t * bufferPTR ) {
 8001d8c:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = RTC->DR & (RTC_DR_WDU_Msk);
 8001d8e:	4d0d      	ldr	r5, [pc, #52]	; (8001dc4 <STM32F051_Rtc_Get_Date+0x38>)
void STM32F051_Rtc_Get_Date( uint8_t * bufferPTR ) {
 8001d90:	0004      	movs	r4, r0
	uint32_t tmp = RTC->DR & (RTC_DR_WDU_Msk);
 8001d92:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 3) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_WDU_Pos) );		// Days of week
 8001d94:	0400      	lsls	r0, r0, #16
 8001d96:	0f40      	lsrs	r0, r0, #29
 8001d98:	f000 f872 	bl	8001e80 <sw_bcd2dec>

	tmp = RTC->DR & (RTC_DR_DT_Msk | RTC_DR_DU_Msk);
	*(bufferPTR + 4) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_DU_Pos) );		// Days
 8001d9c:	233f      	movs	r3, #63	; 0x3f
	*(bufferPTR + 3) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_WDU_Pos) );		// Days of week
 8001d9e:	70e0      	strb	r0, [r4, #3]
	tmp = RTC->DR & (RTC_DR_DT_Msk | RTC_DR_DU_Msk);
 8001da0:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 4) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_DU_Pos) );		// Days
 8001da2:	4018      	ands	r0, r3
 8001da4:	f000 f86c 	bl	8001e80 <sw_bcd2dec>
 8001da8:	7120      	strb	r0, [r4, #4]

	tmp = RTC->DR & (RTC_DR_MT_Msk | RTC_DR_MU_Msk);
 8001daa:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 5) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_MU_Pos) );		// Months
 8001dac:	04c0      	lsls	r0, r0, #19
 8001dae:	0ec0      	lsrs	r0, r0, #27
 8001db0:	f000 f866 	bl	8001e80 <sw_bcd2dec>
 8001db4:	7160      	strb	r0, [r4, #5]

	tmp = RTC->DR & (RTC_DR_YT_Msk | RTC_DR_YU_Msk);
 8001db6:	6868      	ldr	r0, [r5, #4]
	*(bufferPTR + 6) = sw_bcd2dec( (uint8_t) (tmp >> RTC_DR_YU_Pos) );		// Years
 8001db8:	0c00      	lsrs	r0, r0, #16
 8001dba:	b2c0      	uxtb	r0, r0
 8001dbc:	f000 f860 	bl	8001e80 <sw_bcd2dec>
 8001dc0:	71a0      	strb	r0, [r4, #6]
}
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
 8001dc4:	40002800 	.word	0x40002800

08001dc8 <STM32F051_Rtc_Set_Time>:
/*************************************************************************************************/

/**************************************** Upload time to RTC *************************************/
void STM32F051_Rtc_Set_Time( uint8_t * bufferPTR ) {
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	0006      	movs	r6, r0
	uint32_t tmp = 0;
	tmp =  (uint32_t)sw_dec2bcd( *(bufferPTR + 0) ) << RTC_TR_SU_Pos;		// Seconds
 8001dcc:	7800      	ldrb	r0, [r0, #0]
 8001dce:	f000 f849 	bl	8001e64 <sw_dec2bcd>
 8001dd2:	0005      	movs	r5, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 1) ) << RTC_TR_MNU_Pos;		// Minutes
 8001dd4:	7870      	ldrb	r0, [r6, #1]
 8001dd6:	f000 f845 	bl	8001e64 <sw_dec2bcd>
 8001dda:	0004      	movs	r4, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 2) ) << RTC_TR_HU_Pos;		// Hours
 8001ddc:	78b0      	ldrb	r0, [r6, #2]
 8001dde:	f000 f841 	bl	8001e64 <sw_dec2bcd>
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 1) ) << RTC_TR_MNU_Pos;		// Minutes
 8001de2:	0224      	lsls	r4, r4, #8
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 2) ) << RTC_TR_HU_Pos;		// Hours
 8001de4:	0400      	lsls	r0, r0, #16
 8001de6:	4304      	orrs	r4, r0

	STM32F051_Rtc_protect_off();
 8001de8:	f7ff ff4e 	bl	8001c88 <STM32F051_Rtc_protect_off>
	STM32F051_Rtc_init_on();
 8001dec:	f7ff ff40 	bl	8001c70 <STM32F051_Rtc_init_on>
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001df0:	2180      	movs	r1, #128	; 0x80

	RTC->TR = tmp;															// Write time to RTC
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <STM32F051_Rtc_Set_Time+0x3c>)
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 2) ) << RTC_TR_HU_Pos;		// Hours
 8001df4:	432c      	orrs	r4, r5
	RTC->TR = tmp;															// Write time to RTC
 8001df6:	601c      	str	r4, [r3, #0]
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
	STM32F051_Rtc_init_off();
	STM32F051_Rtc_protect_on();
 8001dfe:	f7ff ff53 	bl	8001ca8 <STM32F051_Rtc_protect_on>
}
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	40002800 	.word	0x40002800

08001e08 <STM32F051_Rtc_Set_Date>:
/*************************************************************************************************/
/**************************************** Upload date to RTC *************************************/
void STM32F051_Rtc_Set_Date( uint8_t * bufferPTR ) {
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	0006      	movs	r6, r0
	uint32_t tmp = 0;
	tmp =  (uint32_t)sw_dec2bcd( *(bufferPTR + 3) ) << RTC_DR_WDU_Pos;		// Days of week
 8001e0c:	78c0      	ldrb	r0, [r0, #3]
 8001e0e:	f000 f829 	bl	8001e64 <sw_dec2bcd>
 8001e12:	0005      	movs	r5, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 4) ) << RTC_DR_DU_Pos;		// Days
 8001e14:	7930      	ldrb	r0, [r6, #4]
 8001e16:	f000 f825 	bl	8001e64 <sw_dec2bcd>
 8001e1a:	0007      	movs	r7, r0
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 5) ) << RTC_DR_MU_Pos;		// Months
 8001e1c:	7970      	ldrb	r0, [r6, #5]
 8001e1e:	f000 f821 	bl	8001e64 <sw_dec2bcd>
 8001e22:	0204      	lsls	r4, r0, #8
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 6) ) << RTC_DR_YU_Pos;		// Years
 8001e24:	79b0      	ldrb	r0, [r6, #6]
 8001e26:	f000 f81d 	bl	8001e64 <sw_dec2bcd>
	tmp =  (uint32_t)sw_dec2bcd( *(bufferPTR + 3) ) << RTC_DR_WDU_Pos;		// Days of week
 8001e2a:	036d      	lsls	r5, r5, #13
 8001e2c:	432c      	orrs	r4, r5
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 6) ) << RTC_DR_YU_Pos;		// Years
 8001e2e:	0400      	lsls	r0, r0, #16
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 5) ) << RTC_DR_MU_Pos;		// Months
 8001e30:	433c      	orrs	r4, r7
	tmp |= (uint32_t)sw_dec2bcd( *(bufferPTR + 6) ) << RTC_DR_YU_Pos;		// Years
 8001e32:	4304      	orrs	r4, r0

	STM32F051_Rtc_protect_off();
 8001e34:	f7ff ff28 	bl	8001c88 <STM32F051_Rtc_protect_off>
	STM32F051_Rtc_init_on();
 8001e38:	f7ff ff1a 	bl	8001c70 <STM32F051_Rtc_init_on>
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001e3c:	2180      	movs	r1, #128	; 0x80
	RTC->DR = tmp;															// Write date to RTC
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <STM32F051_Rtc_Set_Date+0x48>)
 8001e40:	605c      	str	r4, [r3, #4]
	RTC->ISR &= ~RTC_ISR_INIT;		// Exit the initialization mode
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	438a      	bics	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]
	STM32F051_Rtc_init_off();
	STM32F051_Rtc_protect_on();
 8001e48:	f7ff ff2e 	bl	8001ca8 <STM32F051_Rtc_protect_on>
}
 8001e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40002800 	.word	0x40002800

08001e54 <RTC_IRQHandler>:
/*************************************************************************************************/

void RTC_IRQHandler( void ) {
	static uint8_t simon;
	simon++;
 8001e54:	4a02      	ldr	r2, [pc, #8]	; (8001e60 <RTC_IRQHandler+0xc>)
 8001e56:	7813      	ldrb	r3, [r2, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	7013      	strb	r3, [r2, #0]
}
 8001e5c:	4770      	bx	lr
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	2000029e 	.word	0x2000029e

08001e64 <sw_dec2bcd>:


#include "sw_mcu_conf.h"


uint8_t sw_dec2bcd( uint8_t dec ) {
 8001e64:	b570      	push	{r4, r5, r6, lr}
	return ( (dec/10)<<4 ) | (dec % 10);
 8001e66:	210a      	movs	r1, #10
uint8_t sw_dec2bcd( uint8_t dec ) {
 8001e68:	0005      	movs	r5, r0
	return ( (dec/10)<<4 ) | (dec % 10);
 8001e6a:	f7fe f957 	bl	800011c <__udivsi3>
 8001e6e:	210a      	movs	r1, #10
 8001e70:	b2c4      	uxtb	r4, r0
 8001e72:	0028      	movs	r0, r5
 8001e74:	f7fe f9d8 	bl	8000228 <__aeabi_uidivmod>
 8001e78:	0124      	lsls	r4, r4, #4
 8001e7a:	430c      	orrs	r4, r1
 8001e7c:	b2e0      	uxtb	r0, r4
}
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}

08001e80 <sw_bcd2dec>:
uint8_t sw_bcd2dec( uint8_t bcd ) {
	return (( ((bcd) >> 4) & 0x0F) * 10) + +((bcd) & 0x0F);
 8001e80:	0902      	lsrs	r2, r0, #4
uint8_t sw_bcd2dec( uint8_t bcd ) {
 8001e82:	0003      	movs	r3, r0
	return (( ((bcd) >> 4) & 0x0F) * 10) + +((bcd) & 0x0F);
 8001e84:	200a      	movs	r0, #10
 8001e86:	4350      	muls	r0, r2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	18c0      	adds	r0, r0, r3
 8001e8e:	b2c0      	uxtb	r0, r0
}
 8001e90:	4770      	bx	lr
	...

08001e94 <sw_i2c_dma_send_buff>:
	}
}
/************************************************************************/

/*********************************************************************************/
void sw_i2c_dma_send_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff ) {
 8001e94:	b530      	push	{r4, r5, lr}
	if (i2cErrorOcurred) return;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <sw_i2c_dma_send_buff+0x5c>)
void sw_i2c_dma_send_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff ) {
 8001e98:	0004      	movs	r4, r0
	if (i2cErrorOcurred) return;
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d122      	bne.n	8001ee6 <sw_i2c_dma_send_buff+0x52>
	i2c->CR2 = (i2c->CR2 &											// Clear actual values
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <sw_i2c_dma_send_buff+0x60>)
 8001ea2:	4d15      	ldr	r5, [pc, #84]	; (8001ef8 <sw_i2c_dma_send_buff+0x64>)
 8001ea4:	6858      	ldr	r0, [r3, #4]
			  |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS				// Set slave address
 8001ea6:	0064      	lsls	r4, r4, #1
	i2c->CR2 = (i2c->CR2 &											// Clear actual values
 8001ea8:	4028      	ands	r0, r5
			  |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS				// Set slave address
 8001eaa:	4320      	orrs	r0, r4
			  |(uint32_t)sizeBuff  << I2C_CR2_NBYTES_Pos			// Bytes to send
 8001eac:	b2d4      	uxtb	r4, r2
 8001eae:	0424      	lsls	r4, r4, #16
			  |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS				// Set slave address
 8001eb0:	4320      	orrs	r0, r4
	i2c->CR2 = (i2c->CR2 &											// Clear actual values
 8001eb2:	6058      	str	r0, [r3, #4]

	sw_i2c_master_transmit_mode( i2c, slaveAddr, sizeBuff );
	if (i2cAutoEnd == 1)
 8001eb4:	4811      	ldr	r0, [pc, #68]	; (8001efc <sw_i2c_dma_send_buff+0x68>)
 8001eb6:	7800      	ldrb	r0, [r0, #0]
 8001eb8:	2801      	cmp	r0, #1
 8001eba:	d115      	bne.n	8001ee8 <sw_i2c_dma_send_buff+0x54>
		i2c->CR2 |= I2C_CR2_AUTOEND;						// Auto STOP at the end of frame
 8001ebc:	2080      	movs	r0, #128	; 0x80
 8001ebe:	685c      	ldr	r4, [r3, #4]
 8001ec0:	0480      	lsls	r0, r0, #18
 8001ec2:	4320      	orrs	r0, r4
	else
		i2c->CR2 &= ~I2C_CR2_AUTOEND;						// No STOP at the end of frame
 8001ec4:	6058      	str	r0, [r3, #4]


	DMA1_Channel6->CMAR	 = (uint32_t)( (uint8_t *)buffPtr );
 8001ec6:	480e      	ldr	r0, [pc, #56]	; (8001f00 <sw_i2c_dma_send_buff+0x6c>)
 8001ec8:	60c1      	str	r1, [r0, #12]
	DMA1_Channel6->CNDTR = sizeBuff;
 8001eca:	6042      	str	r2, [r0, #4]

//	TX transfer start
	i2c->CR2 |= ( sizeBuff << I2C_CR2_NBYTES_Pos);
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	0412      	lsls	r2, r2, #16
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]

	DMA1_Channel6->CCR  |= DMA_CCR_EN;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	6801      	ldr	r1, [r0, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	6002      	str	r2, [r0, #0]
	i2c->CR2 			|= I2C_CR2_START;
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	0192      	lsls	r2, r2, #6
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
}
 8001ee6:	bd30      	pop	{r4, r5, pc}
		i2c->CR2 &= ~I2C_CR2_AUTOEND;						// No STOP at the end of frame
 8001ee8:	6858      	ldr	r0, [r3, #4]
 8001eea:	4c06      	ldr	r4, [pc, #24]	; (8001f04 <sw_i2c_dma_send_buff+0x70>)
 8001eec:	4020      	ands	r0, r4
 8001eee:	e7e9      	b.n	8001ec4 <sw_i2c_dma_send_buff+0x30>
 8001ef0:	2000029f 	.word	0x2000029f
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	ff00f800 	.word	0xff00f800
 8001efc:	20000032 	.word	0x20000032
 8001f00:	4002006c 	.word	0x4002006c
 8001f04:	fdffffff 	.word	0xfdffffff

08001f08 <sw_i2c_dma_get_buff>:
/*********************************************************************************/

/*********************************************************************************/
void sw_i2c_dma_get_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff, uint8_t wordLength ) {
 8001f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (i2cErrorOcurred) return;
 8001f0a:	4f1a      	ldr	r7, [pc, #104]	; (8001f74 <sw_i2c_dma_get_buff+0x6c>)
void sw_i2c_dma_get_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff, uint8_t wordLength ) {
 8001f0c:	9301      	str	r3, [sp, #4]
	if (i2cErrorOcurred) return;
 8001f0e:	783b      	ldrb	r3, [r7, #0]
void sw_i2c_dma_get_buff ( uint8_t slaveAddr, uint8_t *buffPtr, uint16_t sizeBuff, uint8_t wordLength ) {
 8001f10:	0004      	movs	r4, r0
 8001f12:	000d      	movs	r5, r1
 8001f14:	9200      	str	r2, [sp, #0]
	if (i2cErrorOcurred) return;
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d12a      	bne.n	8001f70 <sw_i2c_dma_get_buff+0x68>

// Send address to slave -------------------
	i2cAutoEnd = 0;
 8001f1a:	4e17      	ldr	r6, [pc, #92]	; (8001f78 <sw_i2c_dma_get_buff+0x70>)
 8001f1c:	7033      	strb	r3, [r6, #0]
	sw_i2c_dma_send_buff( slaveAddr, buffPtr, wordLength );
 8001f1e:	466b      	mov	r3, sp
 8001f20:	889a      	ldrh	r2, [r3, #4]
 8001f22:	f7ff ffb7 	bl	8001e94 <sw_i2c_dma_send_buff>
	i2cAutoEnd = 1;
 8001f26:	2301      	movs	r3, #1
// -----------------------------------------
	uint32_t delay = 10000;
	while( (i2c->ISR & I2C_ISR_TC) == 0 ) {
 8001f28:	2140      	movs	r1, #64	; 0x40
	i2cAutoEnd = 1;
 8001f2a:	7033      	strb	r3, [r6, #0]
	while( (i2c->ISR & I2C_ISR_TC) == 0 ) {
 8001f2c:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <sw_i2c_dma_get_buff+0x74>)
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <sw_i2c_dma_get_buff+0x78>)
 8001f30:	6998      	ldr	r0, [r3, #24]
 8001f32:	4208      	tst	r0, r1
 8001f34:	d017      	beq.n	8001f66 <sw_i2c_dma_get_buff+0x5e>
			i2cErrorOcurred = 1;
			return;
		}
	}

	DMA1_Channel7->CNDTR = (uint32_t)sizeBuff;
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <sw_i2c_dma_get_buff+0x7c>)
 8001f38:	9900      	ldr	r1, [sp, #0]
 8001f3a:	6051      	str	r1, [r2, #4]
	DMA1_Channel7->CMAR	 = (uint32_t)( (uint8_t *)buffPtr + wordLength );
 8001f3c:	9901      	ldr	r1, [sp, #4]
 8001f3e:	186d      	adds	r5, r5, r1
	DMA1_Channel7->CCR  |= DMA_CCR_EN;
 8001f40:	2101      	movs	r1, #1
			 |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS		// Set slave address
 8001f42:	408c      	lsls	r4, r1
	DMA1_Channel7->CMAR	 = (uint32_t)( (uint8_t *)buffPtr + wordLength );
 8001f44:	60d5      	str	r5, [r2, #12]
	DMA1_Channel7->CCR  |= DMA_CCR_EN;
 8001f46:	6810      	ldr	r0, [r2, #0]
 8001f48:	4308      	orrs	r0, r1
 8001f4a:	6010      	str	r0, [r2, #0]
	i2c->CR2 = (i2c->CR2 & 									// Clear actual values
 8001f4c:	685a      	ldr	r2, [r3, #4]
			 |I2C_CR2_RD_WRN								// Receive mode
 8001f4e:	480e      	ldr	r0, [pc, #56]	; (8001f88 <sw_i2c_dma_get_buff+0x80>)
 8001f50:	4002      	ands	r2, r0
			 |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS		// Set slave address
 8001f52:	4314      	orrs	r4, r2
			 |(uint32_t)sizeBuff  << I2C_CR2_NBYTES_Pos		// Bytes to send
 8001f54:	466a      	mov	r2, sp
 8001f56:	7812      	ldrb	r2, [r2, #0]
 8001f58:	0412      	lsls	r2, r2, #16
			 |(uint32_t)slaveAddr << I2C_7BIT_ADDRESS		// Set slave address
 8001f5a:	4314      	orrs	r4, r2
			 |I2C_CR2_START
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <sw_i2c_dma_get_buff+0x84>)
 8001f5e:	4314      	orrs	r4, r2
	i2c->CR2 = (i2c->CR2 & 									// Clear actual values
 8001f60:	605c      	str	r4, [r3, #4]
	i2cAutoEnd = 1;
 8001f62:	7031      	strb	r1, [r6, #0]
}
 8001f64:	e004      	b.n	8001f70 <sw_i2c_dma_get_buff+0x68>
		if (delay-- == 0 ) 	{
 8001f66:	3a01      	subs	r2, #1
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d1e1      	bne.n	8001f30 <sw_i2c_dma_get_buff+0x28>
			i2cErrorOcurred = 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	703b      	strb	r3, [r7, #0]

	sw_i2c_master_receive_mode( i2c, slaveAddr, sizeBuff );
}
 8001f70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	2000029f 	.word	0x2000029f
 8001f78:	20000032 	.word	0x20000032
 8001f7c:	00002711 	.word	0x00002711
 8001f80:	40005400 	.word	0x40005400
 8001f84:	40020080 	.word	0x40020080
 8001f88:	ff00f800 	.word	0xff00f800
 8001f8c:	02002400 	.word	0x02002400

08001f90 <Rtc_copy_structures>:
static void ( *datetime_event_callback )( void );
//static uint8_t 	rtcDatetimeFlag = 0;
//static bool 	i2cRtcExist 	= FALSE;


void Rtc_copy_structures( uint8_t direction ) {
 8001f90:	0002      	movs	r2, r0
 8001f92:	b510      	push	{r4, lr}
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <Rtc_copy_structures+0x20>)
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <Rtc_copy_structures+0x24>)
//	memcpy( dest->bytes, source->bytes, sizeof(source));
//	dest->hh = source->hh;
//	dest->mm = source->mm;
//	dest->ss = source->ss;
	if (direction)
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d004      	beq.n	8001fa6 <Rtc_copy_structures+0x16>
		SetDateTime = ShowDateTime;
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	0019      	movs	r1, r3
	else
		ShowDateTime = SetDateTime;
 8001fa0:	f000 f944 	bl	800222c <memcpy>

}
 8001fa4:	bd10      	pop	{r4, pc}
		ShowDateTime = SetDateTime;
 8001fa6:	0001      	movs	r1, r0
 8001fa8:	2207      	movs	r2, #7
 8001faa:	0018      	movs	r0, r3
 8001fac:	e7f8      	b.n	8001fa0 <Rtc_copy_structures+0x10>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	200002ac 	.word	0x200002ac
 8001fb4:	200002b3 	.word	0x200002b3

08001fb8 <Rtc_Set_Time>:
	*day 		= ShowDateTime.day;
	*month 		= ShowDateTime.month;
	*year 		= ShowDateTime.year;
}

void Rtc_Set_Time( uint8_t hh, uint8_t mm, uint8_t ss ) {
 8001fb8:	b510      	push	{r4, lr}
	SetDateTime.hh = hh;
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <Rtc_Set_Time+0x14>)
 8001fbc:	7098      	strb	r0, [r3, #2]
	SetDateTime.mm = mm;
	SetDateTime.ss = ss;
	STM32F051_Rtc_Set_Time( (uint8_t *)&SetDateTime );
 8001fbe:	0018      	movs	r0, r3
	SetDateTime.mm = mm;
 8001fc0:	7059      	strb	r1, [r3, #1]
	SetDateTime.ss = ss;
 8001fc2:	701a      	strb	r2, [r3, #0]
	STM32F051_Rtc_Set_Time( (uint8_t *)&SetDateTime );
 8001fc4:	f7ff ff00 	bl	8001dc8 <STM32F051_Rtc_Set_Time>
}
 8001fc8:	bd10      	pop	{r4, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	200002ac 	.word	0x200002ac

08001fd0 <Rtc_Set_Date>:

void Rtc_Set_Date( uint8_t year, uint8_t month, uint8_t day, uint8_t dayOfWeek ) {
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	0004      	movs	r4, r0
	SetDateTime.year		= year;
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <Rtc_Set_Date+0x14>)
 8001fd6:	7184      	strb	r4, [r0, #6]
	SetDateTime.month		= month;
 8001fd8:	7141      	strb	r1, [r0, #5]
	SetDateTime.day			= day;
 8001fda:	7102      	strb	r2, [r0, #4]
	SetDateTime.dayofweek	= dayOfWeek;
 8001fdc:	70c3      	strb	r3, [r0, #3]

	STM32F051_Rtc_Set_Date( (uint8_t *)&SetDateTime );
 8001fde:	f7ff ff13 	bl	8001e08 <STM32F051_Rtc_Set_Date>
}
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	200002ac 	.word	0x200002ac

08001fe8 <clock_init>:
/*************************************************************************/

/******** Zbiorcza funkcja do inicjalizacji zegara i peryferiów **********/
uint8_t clock_init( bool resetRtcDomain ) {
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	0004      	movs	r4, r0
//	i2cRtcExist = ds3231_init();
//	if (i2cRtcExist == TRUE) return FALSE;

	STM32F051_Rtc_Clock_Config();
 8001fec:	f7ff fe66 	bl	8001cbc <STM32F051_Rtc_Clock_Config>
	if ( STM32F051_Rtc_Config( resetRtcDomain ) == RTC_CONFIG_RESET || resetRtcDomain == TRUE ) {
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f7ff fe8f 	bl	8001d14 <STM32F051_Rtc_Config>
 8001ff6:	2801      	cmp	r0, #1
 8001ff8:	d002      	beq.n	8002000 <clock_init+0x18>
		Rtc_Set_Time( 23, 59, 50 );		// 23:59:50, default time
		Rtc_Set_Date( 10, 1, 1, 5 );	// 2010.07.01 Friday, default date
		return TRUE;
	}
	return FALSE;
 8001ffa:	2000      	movs	r0, #0
	if ( STM32F051_Rtc_Config( resetRtcDomain ) == RTC_CONFIG_RESET || resetRtcDomain == TRUE ) {
 8001ffc:	2c01      	cmp	r4, #1
 8001ffe:	d10b      	bne.n	8002018 <clock_init+0x30>
		Rtc_Set_Time( 23, 59, 50 );		// 23:59:50, default time
 8002000:	2232      	movs	r2, #50	; 0x32
 8002002:	213b      	movs	r1, #59	; 0x3b
 8002004:	2017      	movs	r0, #23
 8002006:	f7ff ffd7 	bl	8001fb8 <Rtc_Set_Time>
		Rtc_Set_Date( 10, 1, 1, 5 );	// 2010.07.01 Friday, default date
 800200a:	2201      	movs	r2, #1
 800200c:	200a      	movs	r0, #10
 800200e:	2305      	movs	r3, #5
 8002010:	0011      	movs	r1, r2
 8002012:	f7ff ffdd 	bl	8001fd0 <Rtc_Set_Date>
		return TRUE;
 8002016:	2001      	movs	r0, #1
	softTimer1 = 0;
}
 8002018:	bd10      	pop	{r4, pc}
	...

0800201c <rtc_get_date_time>:
/*************************************************************************/

/*************************************************************************/
void rtc_get_date_time( void ) {
 800201c:	b510      	push	{r4, lr}
	STM32F051_Rtc_Get_Time( (uint8_t *)&ShowDateTime );
 800201e:	4c04      	ldr	r4, [pc, #16]	; (8002030 <rtc_get_date_time+0x14>)
 8002020:	0020      	movs	r0, r4
 8002022:	f7ff fe9b 	bl	8001d5c <STM32F051_Rtc_Get_Time>
	STM32F051_Rtc_Get_Date( (uint8_t *)&ShowDateTime );
 8002026:	0020      	movs	r0, r4
 8002028:	f7ff feb0 	bl	8001d8c <STM32F051_Rtc_Get_Date>
}
 800202c:	bd10      	pop	{r4, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	200002b3 	.word	0x200002b3

08002034 <register_datetime_event_callback>:
/**************************************************************************/

/****************** Funkcje callback'owe i zdarzeniowe ********************/
void register_datetime_event_callback( void (*callback)( void ) ) {
	datetime_event_callback = callback;
 8002034:	4b01      	ldr	r3, [pc, #4]	; (800203c <register_datetime_event_callback+0x8>)
 8002036:	6018      	str	r0, [r3, #0]
}
 8002038:	4770      	bx	lr
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	200002a0 	.word	0x200002a0

08002040 <SW_DATETIME_EVENT>:
void SW_DATETIME_EVENT( void ) {
	if ( softTimer1 == 0 ) {
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <SW_DATETIME_EVENT+0x1c>)
void SW_DATETIME_EVENT( void ) {
 8002042:	b510      	push	{r4, lr}
	if ( softTimer1 == 0 ) {
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	2a00      	cmp	r2, #0
 8002048:	d106      	bne.n	8002058 <SW_DATETIME_EVENT+0x18>
		softTimer1 = 250;
 800204a:	32fa      	adds	r2, #250	; 0xfa
 800204c:	801a      	strh	r2, [r3, #0]
		if( datetime_event_callback ) {
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SW_DATETIME_EVENT+0x20>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d000      	beq.n	8002058 <SW_DATETIME_EVENT+0x18>
			datetime_event_callback();
 8002056:	4798      	blx	r3
		}
	}
}
 8002058:	bd10      	pop	{r4, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	200002e4 	.word	0x200002e4
 8002060:	200002a0 	.word	0x200002a0

08002064 <SysTick_Handler>:
volatile uint16_t softTimer1, softTimer2, softTimer5, softTimer3, whileTimer ;

volatile static uint16_t delayTimer;
volatile static uint32_t milis = 0;
void SysTick_Handler( void ) {
	milis++;
 8002064:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <SysTick_Handler+0xbc>)
void SysTick_Handler( void ) {
 8002066:	b510      	push	{r4, lr}
	milis++;
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	6013      	str	r3, [r2, #0]
	if (pressTimer) 	pressTimer--;
 800206e:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <SysTick_Handler+0xc0>)
 8002070:	8813      	ldrh	r3, [r2, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <SysTick_Handler+0x1a>
 8002076:	8813      	ldrh	r3, [r2, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	b29b      	uxth	r3, r3
 800207c:	8013      	strh	r3, [r2, #0]
	if (debounceTimer)	debounceTimer--;
 800207e:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <SysTick_Handler+0xc4>)
 8002080:	8813      	ldrh	r3, [r2, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <SysTick_Handler+0x2a>
 8002086:	8813      	ldrh	r3, [r2, #0]
 8002088:	3b01      	subs	r3, #1
 800208a:	b29b      	uxth	r3, r3
 800208c:	8013      	strh	r3, [r2, #0]
	if (repeatTimer)	repeatTimer--;
 800208e:	4a27      	ldr	r2, [pc, #156]	; (800212c <SysTick_Handler+0xc8>)
 8002090:	8813      	ldrh	r3, [r2, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <SysTick_Handler+0x3a>
 8002096:	8813      	ldrh	r3, [r2, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	8013      	strh	r3, [r2, #0]
	if (delayTimer)		delayTimer--;
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <SysTick_Handler+0xcc>)
 80020a0:	8813      	ldrh	r3, [r2, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <SysTick_Handler+0x4a>
 80020a6:	8813      	ldrh	r3, [r2, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	8013      	strh	r3, [r2, #0]
	if (showMenuTimer) 	showMenuTimer--;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <SysTick_Handler+0xd0>)
 80020b0:	881a      	ldrh	r2, [r3, #0]
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d003      	beq.n	80020be <SysTick_Handler+0x5a>
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	3a01      	subs	r2, #1
 80020ba:	b292      	uxth	r2, r2
 80020bc:	801a      	strh	r2, [r3, #0]
	if (softTimer1) 	softTimer1--;
 80020be:	491e      	ldr	r1, [pc, #120]	; (8002138 <SysTick_Handler+0xd4>)
 80020c0:	880a      	ldrh	r2, [r1, #0]
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d003      	beq.n	80020ce <SysTick_Handler+0x6a>
 80020c6:	880a      	ldrh	r2, [r1, #0]
 80020c8:	3a01      	subs	r2, #1
 80020ca:	b292      	uxth	r2, r2
 80020cc:	800a      	strh	r2, [r1, #0]
	if (softTimer2) 	softTimer2--;
 80020ce:	491b      	ldr	r1, [pc, #108]	; (800213c <SysTick_Handler+0xd8>)
 80020d0:	880a      	ldrh	r2, [r1, #0]
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d003      	beq.n	80020de <SysTick_Handler+0x7a>
 80020d6:	880a      	ldrh	r2, [r1, #0]
 80020d8:	3a01      	subs	r2, #1
 80020da:	b292      	uxth	r2, r2
 80020dc:	800a      	strh	r2, [r1, #0]
	if (softTimer3) 	softTimer3--;
 80020de:	4918      	ldr	r1, [pc, #96]	; (8002140 <SysTick_Handler+0xdc>)
 80020e0:	880a      	ldrh	r2, [r1, #0]
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	d003      	beq.n	80020ee <SysTick_Handler+0x8a>
 80020e6:	880a      	ldrh	r2, [r1, #0]
 80020e8:	3a01      	subs	r2, #1
 80020ea:	b292      	uxth	r2, r2
 80020ec:	800a      	strh	r2, [r1, #0]
	if (softTimer5) 	softTimer5--;
 80020ee:	4915      	ldr	r1, [pc, #84]	; (8002144 <SysTick_Handler+0xe0>)
 80020f0:	880a      	ldrh	r2, [r1, #0]
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d003      	beq.n	80020fe <SysTick_Handler+0x9a>
 80020f6:	880a      	ldrh	r2, [r1, #0]
 80020f8:	3a01      	subs	r2, #1
 80020fa:	b292      	uxth	r2, r2
 80020fc:	800a      	strh	r2, [r1, #0]
	if (whileTimer) 	whileTimer--;
 80020fe:	4912      	ldr	r1, [pc, #72]	; (8002148 <SysTick_Handler+0xe4>)
 8002100:	880a      	ldrh	r2, [r1, #0]
 8002102:	2a00      	cmp	r2, #0
 8002104:	d003      	beq.n	800210e <SysTick_Handler+0xaa>
 8002106:	880a      	ldrh	r2, [r1, #0]
 8002108:	3a01      	subs	r2, #1
 800210a:	b292      	uxth	r2, r2
 800210c:	800a      	strh	r2, [r1, #0]

	if (showMenuTimer == 0) {
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	2a00      	cmp	r2, #0
 8002112:	d103      	bne.n	800211c <SysTick_Handler+0xb8>
		showMenuTimer = 10;
 8002114:	320a      	adds	r2, #10
 8002116:	801a      	strh	r2, [r3, #0]
		input_event();
 8002118:	f7ff fd7a 	bl	8001c10 <input_event>
	}
}
 800211c:	bd10      	pop	{r4, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	200002a8 	.word	0x200002a8
 8002124:	200002c8 	.word	0x200002c8
 8002128:	200002bc 	.word	0x200002bc
 800212c:	200002be 	.word	0x200002be
 8002130:	200002a4 	.word	0x200002a4
 8002134:	200002d4 	.word	0x200002d4
 8002138:	200002e4 	.word	0x200002e4
 800213c:	200002c2 	.word	0x200002c2
 8002140:	200002d6 	.word	0x200002d6
 8002144:	200002d8 	.word	0x200002d8
 8002148:	200002c0 	.word	0x200002c0

0800214c <millis>:
	while ( softTimer5 ) {}
}
/*********************************************************/

uint32_t millis(void) {
	return milis;
 800214c:	4b01      	ldr	r3, [pc, #4]	; (8002154 <millis+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
}
 8002150:	4770      	bx	lr
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	200002a8 	.word	0x200002a8

08002158 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800215a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480d      	ldr	r0, [pc, #52]	; (8002194 <LoopForever+0x6>)
  ldr r1, =_edata
 800215e:	490e      	ldr	r1, [pc, #56]	; (8002198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <LoopForever+0xe>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002174:	4c0b      	ldr	r4, [pc, #44]	; (80021a4 <LoopForever+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002182:	f7fe f8e5 	bl	8000350 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002186:	f000 f811 	bl	80021ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218a:	f7fe f873 	bl	8000274 <main>

0800218e <LoopForever>:

LoopForever:
    b LoopForever
 800218e:	e7fe      	b.n	800218e <LoopForever>
  ldr   r0, =_estack
 8002190:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800219c:	08002cf0 	.word	0x08002cf0
  ldr r2, =_sbss
 80021a0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80021a4:	200002e8 	.word	0x200002e8

080021a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC1_COMP_IRQHandler>
	...

080021ac <__libc_init_array>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	2600      	movs	r6, #0
 80021b0:	4d0c      	ldr	r5, [pc, #48]	; (80021e4 <__libc_init_array+0x38>)
 80021b2:	4c0d      	ldr	r4, [pc, #52]	; (80021e8 <__libc_init_array+0x3c>)
 80021b4:	1b64      	subs	r4, r4, r5
 80021b6:	10a4      	asrs	r4, r4, #2
 80021b8:	42a6      	cmp	r6, r4
 80021ba:	d109      	bne.n	80021d0 <__libc_init_array+0x24>
 80021bc:	2600      	movs	r6, #0
 80021be:	f000 f889 	bl	80022d4 <_init>
 80021c2:	4d0a      	ldr	r5, [pc, #40]	; (80021ec <__libc_init_array+0x40>)
 80021c4:	4c0a      	ldr	r4, [pc, #40]	; (80021f0 <__libc_init_array+0x44>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	42a6      	cmp	r6, r4
 80021cc:	d105      	bne.n	80021da <__libc_init_array+0x2e>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	00b3      	lsls	r3, r6, #2
 80021d2:	58eb      	ldr	r3, [r5, r3]
 80021d4:	4798      	blx	r3
 80021d6:	3601      	adds	r6, #1
 80021d8:	e7ee      	b.n	80021b8 <__libc_init_array+0xc>
 80021da:	00b3      	lsls	r3, r6, #2
 80021dc:	58eb      	ldr	r3, [r5, r3]
 80021de:	4798      	blx	r3
 80021e0:	3601      	adds	r6, #1
 80021e2:	e7f2      	b.n	80021ca <__libc_init_array+0x1e>
 80021e4:	08002ce8 	.word	0x08002ce8
 80021e8:	08002ce8 	.word	0x08002ce8
 80021ec:	08002ce8 	.word	0x08002ce8
 80021f0:	08002cec 	.word	0x08002cec

080021f4 <__itoa>:
 80021f4:	1e93      	subs	r3, r2, #2
 80021f6:	b510      	push	{r4, lr}
 80021f8:	000c      	movs	r4, r1
 80021fa:	2b22      	cmp	r3, #34	; 0x22
 80021fc:	d904      	bls.n	8002208 <__itoa+0x14>
 80021fe:	2300      	movs	r3, #0
 8002200:	001c      	movs	r4, r3
 8002202:	700b      	strb	r3, [r1, #0]
 8002204:	0020      	movs	r0, r4
 8002206:	bd10      	pop	{r4, pc}
 8002208:	2a0a      	cmp	r2, #10
 800220a:	d109      	bne.n	8002220 <__itoa+0x2c>
 800220c:	2800      	cmp	r0, #0
 800220e:	da07      	bge.n	8002220 <__itoa+0x2c>
 8002210:	232d      	movs	r3, #45	; 0x2d
 8002212:	700b      	strb	r3, [r1, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	4240      	negs	r0, r0
 8002218:	1861      	adds	r1, r4, r1
 800221a:	f000 f825 	bl	8002268 <__utoa>
 800221e:	e7f1      	b.n	8002204 <__itoa+0x10>
 8002220:	2100      	movs	r1, #0
 8002222:	e7f9      	b.n	8002218 <__itoa+0x24>

08002224 <itoa>:
 8002224:	b510      	push	{r4, lr}
 8002226:	f7ff ffe5 	bl	80021f4 <__itoa>
 800222a:	bd10      	pop	{r4, pc}

0800222c <memcpy>:
 800222c:	2300      	movs	r3, #0
 800222e:	b510      	push	{r4, lr}
 8002230:	429a      	cmp	r2, r3
 8002232:	d100      	bne.n	8002236 <memcpy+0xa>
 8002234:	bd10      	pop	{r4, pc}
 8002236:	5ccc      	ldrb	r4, [r1, r3]
 8002238:	54c4      	strb	r4, [r0, r3]
 800223a:	3301      	adds	r3, #1
 800223c:	e7f8      	b.n	8002230 <memcpy+0x4>

0800223e <memset>:
 800223e:	0003      	movs	r3, r0
 8002240:	1882      	adds	r2, r0, r2
 8002242:	4293      	cmp	r3, r2
 8002244:	d100      	bne.n	8002248 <memset+0xa>
 8002246:	4770      	bx	lr
 8002248:	7019      	strb	r1, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	e7f9      	b.n	8002242 <memset+0x4>

0800224e <strcat>:
 800224e:	0002      	movs	r2, r0
 8002250:	b510      	push	{r4, lr}
 8002252:	7813      	ldrb	r3, [r2, #0]
 8002254:	0014      	movs	r4, r2
 8002256:	3201      	adds	r2, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1fa      	bne.n	8002252 <strcat+0x4>
 800225c:	5cca      	ldrb	r2, [r1, r3]
 800225e:	54e2      	strb	r2, [r4, r3]
 8002260:	3301      	adds	r3, #1
 8002262:	2a00      	cmp	r2, #0
 8002264:	d1fa      	bne.n	800225c <strcat+0xe>
 8002266:	bd10      	pop	{r4, pc}

08002268 <__utoa>:
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	0016      	movs	r6, r2
 800226c:	b08d      	sub	sp, #52	; 0x34
 800226e:	0007      	movs	r7, r0
 8002270:	000c      	movs	r4, r1
 8002272:	2225      	movs	r2, #37	; 0x25
 8002274:	4916      	ldr	r1, [pc, #88]	; (80022d0 <__utoa+0x68>)
 8002276:	a802      	add	r0, sp, #8
 8002278:	f7ff ffd8 	bl	800222c <memcpy>
 800227c:	1eb3      	subs	r3, r6, #2
 800227e:	2500      	movs	r5, #0
 8002280:	2b22      	cmp	r3, #34	; 0x22
 8002282:	d820      	bhi.n	80022c6 <__utoa+0x5e>
 8002284:	1e63      	subs	r3, r4, #1
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	ab02      	add	r3, sp, #8
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	0038      	movs	r0, r7
 800228e:	0031      	movs	r1, r6
 8002290:	f7fd ffca 	bl	8000228 <__aeabi_uidivmod>
 8002294:	000b      	movs	r3, r1
 8002296:	9a01      	ldr	r2, [sp, #4]
 8002298:	0029      	movs	r1, r5
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	9a00      	ldr	r2, [sp, #0]
 800229e:	3501      	adds	r5, #1
 80022a0:	5553      	strb	r3, [r2, r5]
 80022a2:	003b      	movs	r3, r7
 80022a4:	0007      	movs	r7, r0
 80022a6:	429e      	cmp	r6, r3
 80022a8:	d9f0      	bls.n	800228c <__utoa+0x24>
 80022aa:	2300      	movs	r3, #0
 80022ac:	0022      	movs	r2, r4
 80022ae:	5563      	strb	r3, [r4, r5]
 80022b0:	000b      	movs	r3, r1
 80022b2:	1ac8      	subs	r0, r1, r3
 80022b4:	4283      	cmp	r3, r0
 80022b6:	dd08      	ble.n	80022ca <__utoa+0x62>
 80022b8:	7810      	ldrb	r0, [r2, #0]
 80022ba:	5ce5      	ldrb	r5, [r4, r3]
 80022bc:	7015      	strb	r5, [r2, #0]
 80022be:	54e0      	strb	r0, [r4, r3]
 80022c0:	3201      	adds	r2, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	e7f5      	b.n	80022b2 <__utoa+0x4a>
 80022c6:	7025      	strb	r5, [r4, #0]
 80022c8:	002c      	movs	r4, r5
 80022ca:	0020      	movs	r0, r4
 80022cc:	b00d      	add	sp, #52	; 0x34
 80022ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d0:	08002cc0 	.word	0x08002cc0

080022d4 <_init>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr

080022e0 <_fini>:
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e6:	bc08      	pop	{r3}
 80022e8:	469e      	mov	lr, r3
 80022ea:	4770      	bx	lr
